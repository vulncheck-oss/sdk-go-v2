/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryHitachi type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryHitachi{}

// AdvisoryHitachi struct for AdvisoryHitachi
type AdvisoryHitachi struct {
	AffectedProducts *string `json:"affectedProducts,omitempty"`
	Cve []string `json:"cve,omitempty"`
	DateAdded *string `json:"date_added,omitempty"`
	FixedProducts *string `json:"fixedProducts,omitempty"`
	HitachiId *string `json:"hitachiId,omitempty"`
	References []string `json:"references,omitempty"`
	Title *string `json:"title,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewAdvisoryHitachi instantiates a new AdvisoryHitachi object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryHitachi() *AdvisoryHitachi {
	this := AdvisoryHitachi{}
	return &this
}

// NewAdvisoryHitachiWithDefaults instantiates a new AdvisoryHitachi object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryHitachiWithDefaults() *AdvisoryHitachi {
	this := AdvisoryHitachi{}
	return &this
}

// GetAffectedProducts returns the AffectedProducts field value if set, zero value otherwise.
func (o *AdvisoryHitachi) GetAffectedProducts() string {
	if o == nil || IsNil(o.AffectedProducts) {
		var ret string
		return ret
	}
	return *o.AffectedProducts
}

// GetAffectedProductsOk returns a tuple with the AffectedProducts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryHitachi) GetAffectedProductsOk() (*string, bool) {
	if o == nil || IsNil(o.AffectedProducts) {
		return nil, false
	}
	return o.AffectedProducts, true
}

// HasAffectedProducts returns a boolean if a field has been set.
func (o *AdvisoryHitachi) HasAffectedProducts() bool {
	if o != nil && !IsNil(o.AffectedProducts) {
		return true
	}

	return false
}

// SetAffectedProducts gets a reference to the given string and assigns it to the AffectedProducts field.
func (o *AdvisoryHitachi) SetAffectedProducts(v string) {
	o.AffectedProducts = &v
}

// GetCve returns the Cve field value if set, zero value otherwise.
func (o *AdvisoryHitachi) GetCve() []string {
	if o == nil || IsNil(o.Cve) {
		var ret []string
		return ret
	}
	return o.Cve
}

// GetCveOk returns a tuple with the Cve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryHitachi) GetCveOk() ([]string, bool) {
	if o == nil || IsNil(o.Cve) {
		return nil, false
	}
	return o.Cve, true
}

// HasCve returns a boolean if a field has been set.
func (o *AdvisoryHitachi) HasCve() bool {
	if o != nil && !IsNil(o.Cve) {
		return true
	}

	return false
}

// SetCve gets a reference to the given []string and assigns it to the Cve field.
func (o *AdvisoryHitachi) SetCve(v []string) {
	o.Cve = v
}

// GetDateAdded returns the DateAdded field value if set, zero value otherwise.
func (o *AdvisoryHitachi) GetDateAdded() string {
	if o == nil || IsNil(o.DateAdded) {
		var ret string
		return ret
	}
	return *o.DateAdded
}

// GetDateAddedOk returns a tuple with the DateAdded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryHitachi) GetDateAddedOk() (*string, bool) {
	if o == nil || IsNil(o.DateAdded) {
		return nil, false
	}
	return o.DateAdded, true
}

// HasDateAdded returns a boolean if a field has been set.
func (o *AdvisoryHitachi) HasDateAdded() bool {
	if o != nil && !IsNil(o.DateAdded) {
		return true
	}

	return false
}

// SetDateAdded gets a reference to the given string and assigns it to the DateAdded field.
func (o *AdvisoryHitachi) SetDateAdded(v string) {
	o.DateAdded = &v
}

// GetFixedProducts returns the FixedProducts field value if set, zero value otherwise.
func (o *AdvisoryHitachi) GetFixedProducts() string {
	if o == nil || IsNil(o.FixedProducts) {
		var ret string
		return ret
	}
	return *o.FixedProducts
}

// GetFixedProductsOk returns a tuple with the FixedProducts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryHitachi) GetFixedProductsOk() (*string, bool) {
	if o == nil || IsNil(o.FixedProducts) {
		return nil, false
	}
	return o.FixedProducts, true
}

// HasFixedProducts returns a boolean if a field has been set.
func (o *AdvisoryHitachi) HasFixedProducts() bool {
	if o != nil && !IsNil(o.FixedProducts) {
		return true
	}

	return false
}

// SetFixedProducts gets a reference to the given string and assigns it to the FixedProducts field.
func (o *AdvisoryHitachi) SetFixedProducts(v string) {
	o.FixedProducts = &v
}

// GetHitachiId returns the HitachiId field value if set, zero value otherwise.
func (o *AdvisoryHitachi) GetHitachiId() string {
	if o == nil || IsNil(o.HitachiId) {
		var ret string
		return ret
	}
	return *o.HitachiId
}

// GetHitachiIdOk returns a tuple with the HitachiId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryHitachi) GetHitachiIdOk() (*string, bool) {
	if o == nil || IsNil(o.HitachiId) {
		return nil, false
	}
	return o.HitachiId, true
}

// HasHitachiId returns a boolean if a field has been set.
func (o *AdvisoryHitachi) HasHitachiId() bool {
	if o != nil && !IsNil(o.HitachiId) {
		return true
	}

	return false
}

// SetHitachiId gets a reference to the given string and assigns it to the HitachiId field.
func (o *AdvisoryHitachi) SetHitachiId(v string) {
	o.HitachiId = &v
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *AdvisoryHitachi) GetReferences() []string {
	if o == nil || IsNil(o.References) {
		var ret []string
		return ret
	}
	return o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryHitachi) GetReferencesOk() ([]string, bool) {
	if o == nil || IsNil(o.References) {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *AdvisoryHitachi) HasReferences() bool {
	if o != nil && !IsNil(o.References) {
		return true
	}

	return false
}

// SetReferences gets a reference to the given []string and assigns it to the References field.
func (o *AdvisoryHitachi) SetReferences(v []string) {
	o.References = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *AdvisoryHitachi) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryHitachi) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *AdvisoryHitachi) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *AdvisoryHitachi) SetTitle(v string) {
	o.Title = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *AdvisoryHitachi) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryHitachi) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *AdvisoryHitachi) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *AdvisoryHitachi) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *AdvisoryHitachi) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryHitachi) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *AdvisoryHitachi) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *AdvisoryHitachi) SetUrl(v string) {
	o.Url = &v
}

func (o AdvisoryHitachi) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryHitachi) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AffectedProducts) {
		toSerialize["affectedProducts"] = o.AffectedProducts
	}
	if !IsNil(o.Cve) {
		toSerialize["cve"] = o.Cve
	}
	if !IsNil(o.DateAdded) {
		toSerialize["date_added"] = o.DateAdded
	}
	if !IsNil(o.FixedProducts) {
		toSerialize["fixedProducts"] = o.FixedProducts
	}
	if !IsNil(o.HitachiId) {
		toSerialize["hitachiId"] = o.HitachiId
	}
	if !IsNil(o.References) {
		toSerialize["references"] = o.References
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableAdvisoryHitachi struct {
	value *AdvisoryHitachi
	isSet bool
}

func (v NullableAdvisoryHitachi) Get() *AdvisoryHitachi {
	return v.value
}

func (v *NullableAdvisoryHitachi) Set(val *AdvisoryHitachi) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryHitachi) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryHitachi) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryHitachi(val *AdvisoryHitachi) *NullableAdvisoryHitachi {
	return &NullableAdvisoryHitachi{value: val, isSet: true}
}

func (v NullableAdvisoryHitachi) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryHitachi) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


