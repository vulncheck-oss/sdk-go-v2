/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryTracking type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryTracking{}

// AdvisoryTracking struct for AdvisoryTracking
type AdvisoryTracking struct {
	CurrentReleaseDate *string `json:"current_release_date,omitempty"`
	Id *string `json:"id,omitempty"`
	InitialReleaseDate *string `json:"initial_release_date,omitempty"`
	RevisionHistory []AdvisoryRevisionHistory `json:"revision_history,omitempty"`
	Status *string `json:"status,omitempty"`
	// should match last 'number' in []RevisionHistory
	Version *string `json:"version,omitempty"`
}

// NewAdvisoryTracking instantiates a new AdvisoryTracking object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryTracking() *AdvisoryTracking {
	this := AdvisoryTracking{}
	return &this
}

// NewAdvisoryTrackingWithDefaults instantiates a new AdvisoryTracking object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryTrackingWithDefaults() *AdvisoryTracking {
	this := AdvisoryTracking{}
	return &this
}

// GetCurrentReleaseDate returns the CurrentReleaseDate field value if set, zero value otherwise.
func (o *AdvisoryTracking) GetCurrentReleaseDate() string {
	if o == nil || IsNil(o.CurrentReleaseDate) {
		var ret string
		return ret
	}
	return *o.CurrentReleaseDate
}

// GetCurrentReleaseDateOk returns a tuple with the CurrentReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryTracking) GetCurrentReleaseDateOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentReleaseDate) {
		return nil, false
	}
	return o.CurrentReleaseDate, true
}

// HasCurrentReleaseDate returns a boolean if a field has been set.
func (o *AdvisoryTracking) HasCurrentReleaseDate() bool {
	if o != nil && !IsNil(o.CurrentReleaseDate) {
		return true
	}

	return false
}

// SetCurrentReleaseDate gets a reference to the given string and assigns it to the CurrentReleaseDate field.
func (o *AdvisoryTracking) SetCurrentReleaseDate(v string) {
	o.CurrentReleaseDate = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AdvisoryTracking) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryTracking) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AdvisoryTracking) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AdvisoryTracking) SetId(v string) {
	o.Id = &v
}

// GetInitialReleaseDate returns the InitialReleaseDate field value if set, zero value otherwise.
func (o *AdvisoryTracking) GetInitialReleaseDate() string {
	if o == nil || IsNil(o.InitialReleaseDate) {
		var ret string
		return ret
	}
	return *o.InitialReleaseDate
}

// GetInitialReleaseDateOk returns a tuple with the InitialReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryTracking) GetInitialReleaseDateOk() (*string, bool) {
	if o == nil || IsNil(o.InitialReleaseDate) {
		return nil, false
	}
	return o.InitialReleaseDate, true
}

// HasInitialReleaseDate returns a boolean if a field has been set.
func (o *AdvisoryTracking) HasInitialReleaseDate() bool {
	if o != nil && !IsNil(o.InitialReleaseDate) {
		return true
	}

	return false
}

// SetInitialReleaseDate gets a reference to the given string and assigns it to the InitialReleaseDate field.
func (o *AdvisoryTracking) SetInitialReleaseDate(v string) {
	o.InitialReleaseDate = &v
}

// GetRevisionHistory returns the RevisionHistory field value if set, zero value otherwise.
func (o *AdvisoryTracking) GetRevisionHistory() []AdvisoryRevisionHistory {
	if o == nil || IsNil(o.RevisionHistory) {
		var ret []AdvisoryRevisionHistory
		return ret
	}
	return o.RevisionHistory
}

// GetRevisionHistoryOk returns a tuple with the RevisionHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryTracking) GetRevisionHistoryOk() ([]AdvisoryRevisionHistory, bool) {
	if o == nil || IsNil(o.RevisionHistory) {
		return nil, false
	}
	return o.RevisionHistory, true
}

// HasRevisionHistory returns a boolean if a field has been set.
func (o *AdvisoryTracking) HasRevisionHistory() bool {
	if o != nil && !IsNil(o.RevisionHistory) {
		return true
	}

	return false
}

// SetRevisionHistory gets a reference to the given []AdvisoryRevisionHistory and assigns it to the RevisionHistory field.
func (o *AdvisoryTracking) SetRevisionHistory(v []AdvisoryRevisionHistory) {
	o.RevisionHistory = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AdvisoryTracking) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryTracking) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AdvisoryTracking) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *AdvisoryTracking) SetStatus(v string) {
	o.Status = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AdvisoryTracking) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryTracking) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *AdvisoryTracking) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *AdvisoryTracking) SetVersion(v string) {
	o.Version = &v
}

func (o AdvisoryTracking) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryTracking) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrentReleaseDate) {
		toSerialize["current_release_date"] = o.CurrentReleaseDate
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InitialReleaseDate) {
		toSerialize["initial_release_date"] = o.InitialReleaseDate
	}
	if !IsNil(o.RevisionHistory) {
		toSerialize["revision_history"] = o.RevisionHistory
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableAdvisoryTracking struct {
	value *AdvisoryTracking
	isSet bool
}

func (v NullableAdvisoryTracking) Get() *AdvisoryTracking {
	return v.value
}

func (v *NullableAdvisoryTracking) Set(val *AdvisoryTracking) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryTracking) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryTracking) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryTracking(val *AdvisoryTracking) *NullableAdvisoryTracking {
	return &NullableAdvisoryTracking{value: val, isSet: true}
}

func (v NullableAdvisoryTracking) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryTracking) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


