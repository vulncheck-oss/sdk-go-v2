/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the ApiProblemType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiProblemType{}

// ApiProblemType struct for ApiProblemType
type ApiProblemType struct {
	ProblemtypeData []ApiProblemTypeData `json:"problemtype_data,omitempty"`
}

// NewApiProblemType instantiates a new ApiProblemType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiProblemType() *ApiProblemType {
	this := ApiProblemType{}
	return &this
}

// NewApiProblemTypeWithDefaults instantiates a new ApiProblemType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiProblemTypeWithDefaults() *ApiProblemType {
	this := ApiProblemType{}
	return &this
}

// GetProblemtypeData returns the ProblemtypeData field value if set, zero value otherwise.
func (o *ApiProblemType) GetProblemtypeData() []ApiProblemTypeData {
	if o == nil || IsNil(o.ProblemtypeData) {
		var ret []ApiProblemTypeData
		return ret
	}
	return o.ProblemtypeData
}

// GetProblemtypeDataOk returns a tuple with the ProblemtypeData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiProblemType) GetProblemtypeDataOk() ([]ApiProblemTypeData, bool) {
	if o == nil || IsNil(o.ProblemtypeData) {
		return nil, false
	}
	return o.ProblemtypeData, true
}

// HasProblemtypeData returns a boolean if a field has been set.
func (o *ApiProblemType) HasProblemtypeData() bool {
	if o != nil && !IsNil(o.ProblemtypeData) {
		return true
	}

	return false
}

// SetProblemtypeData gets a reference to the given []ApiProblemTypeData and assigns it to the ProblemtypeData field.
func (o *ApiProblemType) SetProblemtypeData(v []ApiProblemTypeData) {
	o.ProblemtypeData = v
}

func (o ApiProblemType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiProblemType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProblemtypeData) {
		toSerialize["problemtype_data"] = o.ProblemtypeData
	}
	return toSerialize, nil
}

type NullableApiProblemType struct {
	value *ApiProblemType
	isSet bool
}

func (v NullableApiProblemType) Get() *ApiProblemType {
	return v.value
}

func (v *NullableApiProblemType) Set(val *ApiProblemType) {
	v.value = val
	v.isSet = true
}

func (v NullableApiProblemType) IsSet() bool {
	return v.isSet
}

func (v *NullableApiProblemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiProblemType(val *ApiProblemType) *NullableApiProblemType {
	return &NullableApiProblemType{value: val, isSet: true}
}

func (v NullableApiProblemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiProblemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


