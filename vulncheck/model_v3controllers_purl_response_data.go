/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the V3controllersPurlResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V3controllersPurlResponseData{}

// V3controllersPurlResponseData struct for V3controllersPurlResponseData
type V3controllersPurlResponseData struct {
	// list of associated CVE 's
	Cves []string `json:"cves,omitempty"`
	// list of associated vulnerabilities
	Vulnerabilities []ApiOSSPackageVulnerability `json:"vulnerabilities,omitempty"`
}

// NewV3controllersPurlResponseData instantiates a new V3controllersPurlResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV3controllersPurlResponseData() *V3controllersPurlResponseData {
	this := V3controllersPurlResponseData{}
	return &this
}

// NewV3controllersPurlResponseDataWithDefaults instantiates a new V3controllersPurlResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV3controllersPurlResponseDataWithDefaults() *V3controllersPurlResponseData {
	this := V3controllersPurlResponseData{}
	return &this
}

// GetCves returns the Cves field value if set, zero value otherwise.
func (o *V3controllersPurlResponseData) GetCves() []string {
	if o == nil || IsNil(o.Cves) {
		var ret []string
		return ret
	}
	return o.Cves
}

// GetCvesOk returns a tuple with the Cves field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V3controllersPurlResponseData) GetCvesOk() ([]string, bool) {
	if o == nil || IsNil(o.Cves) {
		return nil, false
	}
	return o.Cves, true
}

// HasCves returns a boolean if a field has been set.
func (o *V3controllersPurlResponseData) HasCves() bool {
	if o != nil && !IsNil(o.Cves) {
		return true
	}

	return false
}

// SetCves gets a reference to the given []string and assigns it to the Cves field.
func (o *V3controllersPurlResponseData) SetCves(v []string) {
	o.Cves = v
}

// GetVulnerabilities returns the Vulnerabilities field value if set, zero value otherwise.
func (o *V3controllersPurlResponseData) GetVulnerabilities() []ApiOSSPackageVulnerability {
	if o == nil || IsNil(o.Vulnerabilities) {
		var ret []ApiOSSPackageVulnerability
		return ret
	}
	return o.Vulnerabilities
}

// GetVulnerabilitiesOk returns a tuple with the Vulnerabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V3controllersPurlResponseData) GetVulnerabilitiesOk() ([]ApiOSSPackageVulnerability, bool) {
	if o == nil || IsNil(o.Vulnerabilities) {
		return nil, false
	}
	return o.Vulnerabilities, true
}

// HasVulnerabilities returns a boolean if a field has been set.
func (o *V3controllersPurlResponseData) HasVulnerabilities() bool {
	if o != nil && !IsNil(o.Vulnerabilities) {
		return true
	}

	return false
}

// SetVulnerabilities gets a reference to the given []ApiOSSPackageVulnerability and assigns it to the Vulnerabilities field.
func (o *V3controllersPurlResponseData) SetVulnerabilities(v []ApiOSSPackageVulnerability) {
	o.Vulnerabilities = v
}

func (o V3controllersPurlResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V3controllersPurlResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cves) {
		toSerialize["cves"] = o.Cves
	}
	if !IsNil(o.Vulnerabilities) {
		toSerialize["vulnerabilities"] = o.Vulnerabilities
	}
	return toSerialize, nil
}

type NullableV3controllersPurlResponseData struct {
	value *V3controllersPurlResponseData
	isSet bool
}

func (v NullableV3controllersPurlResponseData) Get() *V3controllersPurlResponseData {
	return v.value
}

func (v *NullableV3controllersPurlResponseData) Set(val *V3controllersPurlResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableV3controllersPurlResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableV3controllersPurlResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV3controllersPurlResponseData(val *V3controllersPurlResponseData) *NullableV3controllersPurlResponseData {
	return &NullableV3controllersPurlResponseData{value: val, isSet: true}
}

func (v NullableV3controllersPurlResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV3controllersPurlResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


