/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryMVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryMVersion{}

// AdvisoryMVersion struct for AdvisoryMVersion
type AdvisoryMVersion struct {
	LessThan *string `json:"lessThan,omitempty"`
	LessThanOrEqual *string `json:"lessThanOrEqual,omitempty"`
	Status *string `json:"status,omitempty"`
	Version *string `json:"version,omitempty"`
	VersionType *string `json:"versionType,omitempty"`
}

// NewAdvisoryMVersion instantiates a new AdvisoryMVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryMVersion() *AdvisoryMVersion {
	this := AdvisoryMVersion{}
	return &this
}

// NewAdvisoryMVersionWithDefaults instantiates a new AdvisoryMVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryMVersionWithDefaults() *AdvisoryMVersion {
	this := AdvisoryMVersion{}
	return &this
}

// GetLessThan returns the LessThan field value if set, zero value otherwise.
func (o *AdvisoryMVersion) GetLessThan() string {
	if o == nil || IsNil(o.LessThan) {
		var ret string
		return ret
	}
	return *o.LessThan
}

// GetLessThanOk returns a tuple with the LessThan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryMVersion) GetLessThanOk() (*string, bool) {
	if o == nil || IsNil(o.LessThan) {
		return nil, false
	}
	return o.LessThan, true
}

// HasLessThan returns a boolean if a field has been set.
func (o *AdvisoryMVersion) HasLessThan() bool {
	if o != nil && !IsNil(o.LessThan) {
		return true
	}

	return false
}

// SetLessThan gets a reference to the given string and assigns it to the LessThan field.
func (o *AdvisoryMVersion) SetLessThan(v string) {
	o.LessThan = &v
}

// GetLessThanOrEqual returns the LessThanOrEqual field value if set, zero value otherwise.
func (o *AdvisoryMVersion) GetLessThanOrEqual() string {
	if o == nil || IsNil(o.LessThanOrEqual) {
		var ret string
		return ret
	}
	return *o.LessThanOrEqual
}

// GetLessThanOrEqualOk returns a tuple with the LessThanOrEqual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryMVersion) GetLessThanOrEqualOk() (*string, bool) {
	if o == nil || IsNil(o.LessThanOrEqual) {
		return nil, false
	}
	return o.LessThanOrEqual, true
}

// HasLessThanOrEqual returns a boolean if a field has been set.
func (o *AdvisoryMVersion) HasLessThanOrEqual() bool {
	if o != nil && !IsNil(o.LessThanOrEqual) {
		return true
	}

	return false
}

// SetLessThanOrEqual gets a reference to the given string and assigns it to the LessThanOrEqual field.
func (o *AdvisoryMVersion) SetLessThanOrEqual(v string) {
	o.LessThanOrEqual = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AdvisoryMVersion) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryMVersion) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AdvisoryMVersion) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *AdvisoryMVersion) SetStatus(v string) {
	o.Status = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AdvisoryMVersion) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryMVersion) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *AdvisoryMVersion) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *AdvisoryMVersion) SetVersion(v string) {
	o.Version = &v
}

// GetVersionType returns the VersionType field value if set, zero value otherwise.
func (o *AdvisoryMVersion) GetVersionType() string {
	if o == nil || IsNil(o.VersionType) {
		var ret string
		return ret
	}
	return *o.VersionType
}

// GetVersionTypeOk returns a tuple with the VersionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryMVersion) GetVersionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.VersionType) {
		return nil, false
	}
	return o.VersionType, true
}

// HasVersionType returns a boolean if a field has been set.
func (o *AdvisoryMVersion) HasVersionType() bool {
	if o != nil && !IsNil(o.VersionType) {
		return true
	}

	return false
}

// SetVersionType gets a reference to the given string and assigns it to the VersionType field.
func (o *AdvisoryMVersion) SetVersionType(v string) {
	o.VersionType = &v
}

func (o AdvisoryMVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryMVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LessThan) {
		toSerialize["lessThan"] = o.LessThan
	}
	if !IsNil(o.LessThanOrEqual) {
		toSerialize["lessThanOrEqual"] = o.LessThanOrEqual
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.VersionType) {
		toSerialize["versionType"] = o.VersionType
	}
	return toSerialize, nil
}

type NullableAdvisoryMVersion struct {
	value *AdvisoryMVersion
	isSet bool
}

func (v NullableAdvisoryMVersion) Get() *AdvisoryMVersion {
	return v.value
}

func (v *NullableAdvisoryMVersion) Set(val *AdvisoryMVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryMVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryMVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryMVersion(val *AdvisoryMVersion) *NullableAdvisoryMVersion {
	return &NullableAdvisoryMVersion{value: val, isSet: true}
}

func (v NullableAdvisoryMVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryMVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


