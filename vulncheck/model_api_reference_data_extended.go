/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the ApiReferenceDataExtended type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiReferenceDataExtended{}

// ApiReferenceDataExtended struct for ApiReferenceDataExtended
type ApiReferenceDataExtended struct {
	DateAdded *string `json:"date_added,omitempty"`
	ExternalId *string `json:"external_id,omitempty"`
	Lang *string `json:"lang,omitempty"`
	Name *string `json:"name,omitempty"`
	PreviousUrl *string `json:"previous_url,omitempty"`
	Refsource *string `json:"refsource,omitempty"`
	Status *string `json:"status,omitempty"`
	Tags []string `json:"tags,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewApiReferenceDataExtended instantiates a new ApiReferenceDataExtended object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiReferenceDataExtended() *ApiReferenceDataExtended {
	this := ApiReferenceDataExtended{}
	return &this
}

// NewApiReferenceDataExtendedWithDefaults instantiates a new ApiReferenceDataExtended object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiReferenceDataExtendedWithDefaults() *ApiReferenceDataExtended {
	this := ApiReferenceDataExtended{}
	return &this
}

// GetDateAdded returns the DateAdded field value if set, zero value otherwise.
func (o *ApiReferenceDataExtended) GetDateAdded() string {
	if o == nil || IsNil(o.DateAdded) {
		var ret string
		return ret
	}
	return *o.DateAdded
}

// GetDateAddedOk returns a tuple with the DateAdded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiReferenceDataExtended) GetDateAddedOk() (*string, bool) {
	if o == nil || IsNil(o.DateAdded) {
		return nil, false
	}
	return o.DateAdded, true
}

// HasDateAdded returns a boolean if a field has been set.
func (o *ApiReferenceDataExtended) HasDateAdded() bool {
	if o != nil && !IsNil(o.DateAdded) {
		return true
	}

	return false
}

// SetDateAdded gets a reference to the given string and assigns it to the DateAdded field.
func (o *ApiReferenceDataExtended) SetDateAdded(v string) {
	o.DateAdded = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *ApiReferenceDataExtended) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiReferenceDataExtended) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *ApiReferenceDataExtended) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *ApiReferenceDataExtended) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetLang returns the Lang field value if set, zero value otherwise.
func (o *ApiReferenceDataExtended) GetLang() string {
	if o == nil || IsNil(o.Lang) {
		var ret string
		return ret
	}
	return *o.Lang
}

// GetLangOk returns a tuple with the Lang field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiReferenceDataExtended) GetLangOk() (*string, bool) {
	if o == nil || IsNil(o.Lang) {
		return nil, false
	}
	return o.Lang, true
}

// HasLang returns a boolean if a field has been set.
func (o *ApiReferenceDataExtended) HasLang() bool {
	if o != nil && !IsNil(o.Lang) {
		return true
	}

	return false
}

// SetLang gets a reference to the given string and assigns it to the Lang field.
func (o *ApiReferenceDataExtended) SetLang(v string) {
	o.Lang = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApiReferenceDataExtended) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiReferenceDataExtended) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApiReferenceDataExtended) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApiReferenceDataExtended) SetName(v string) {
	o.Name = &v
}

// GetPreviousUrl returns the PreviousUrl field value if set, zero value otherwise.
func (o *ApiReferenceDataExtended) GetPreviousUrl() string {
	if o == nil || IsNil(o.PreviousUrl) {
		var ret string
		return ret
	}
	return *o.PreviousUrl
}

// GetPreviousUrlOk returns a tuple with the PreviousUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiReferenceDataExtended) GetPreviousUrlOk() (*string, bool) {
	if o == nil || IsNil(o.PreviousUrl) {
		return nil, false
	}
	return o.PreviousUrl, true
}

// HasPreviousUrl returns a boolean if a field has been set.
func (o *ApiReferenceDataExtended) HasPreviousUrl() bool {
	if o != nil && !IsNil(o.PreviousUrl) {
		return true
	}

	return false
}

// SetPreviousUrl gets a reference to the given string and assigns it to the PreviousUrl field.
func (o *ApiReferenceDataExtended) SetPreviousUrl(v string) {
	o.PreviousUrl = &v
}

// GetRefsource returns the Refsource field value if set, zero value otherwise.
func (o *ApiReferenceDataExtended) GetRefsource() string {
	if o == nil || IsNil(o.Refsource) {
		var ret string
		return ret
	}
	return *o.Refsource
}

// GetRefsourceOk returns a tuple with the Refsource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiReferenceDataExtended) GetRefsourceOk() (*string, bool) {
	if o == nil || IsNil(o.Refsource) {
		return nil, false
	}
	return o.Refsource, true
}

// HasRefsource returns a boolean if a field has been set.
func (o *ApiReferenceDataExtended) HasRefsource() bool {
	if o != nil && !IsNil(o.Refsource) {
		return true
	}

	return false
}

// SetRefsource gets a reference to the given string and assigns it to the Refsource field.
func (o *ApiReferenceDataExtended) SetRefsource(v string) {
	o.Refsource = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ApiReferenceDataExtended) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiReferenceDataExtended) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ApiReferenceDataExtended) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ApiReferenceDataExtended) SetStatus(v string) {
	o.Status = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ApiReferenceDataExtended) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiReferenceDataExtended) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ApiReferenceDataExtended) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ApiReferenceDataExtended) SetTags(v []string) {
	o.Tags = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ApiReferenceDataExtended) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiReferenceDataExtended) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ApiReferenceDataExtended) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ApiReferenceDataExtended) SetUrl(v string) {
	o.Url = &v
}

func (o ApiReferenceDataExtended) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiReferenceDataExtended) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DateAdded) {
		toSerialize["date_added"] = o.DateAdded
	}
	if !IsNil(o.ExternalId) {
		toSerialize["external_id"] = o.ExternalId
	}
	if !IsNil(o.Lang) {
		toSerialize["lang"] = o.Lang
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PreviousUrl) {
		toSerialize["previous_url"] = o.PreviousUrl
	}
	if !IsNil(o.Refsource) {
		toSerialize["refsource"] = o.Refsource
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableApiReferenceDataExtended struct {
	value *ApiReferenceDataExtended
	isSet bool
}

func (v NullableApiReferenceDataExtended) Get() *ApiReferenceDataExtended {
	return v.value
}

func (v *NullableApiReferenceDataExtended) Set(val *ApiReferenceDataExtended) {
	v.value = val
	v.isSet = true
}

func (v NullableApiReferenceDataExtended) IsSet() bool {
	return v.isSet
}

func (v *NullableApiReferenceDataExtended) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiReferenceDataExtended(val *ApiReferenceDataExtended) *NullableApiReferenceDataExtended {
	return &NullableApiReferenceDataExtended{value: val, isSet: true}
}

func (v NullableApiReferenceDataExtended) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiReferenceDataExtended) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


