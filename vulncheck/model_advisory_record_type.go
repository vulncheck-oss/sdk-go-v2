/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryRecordType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryRecordType{}

// AdvisoryRecordType struct for AdvisoryRecordType
type AdvisoryRecordType struct {
	Finding *string `json:"finding,omitempty"`
	Id *string `json:"id,omitempty"`
	Kind *string `json:"kind,omitempty"`
}

// NewAdvisoryRecordType instantiates a new AdvisoryRecordType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryRecordType() *AdvisoryRecordType {
	this := AdvisoryRecordType{}
	return &this
}

// NewAdvisoryRecordTypeWithDefaults instantiates a new AdvisoryRecordType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryRecordTypeWithDefaults() *AdvisoryRecordType {
	this := AdvisoryRecordType{}
	return &this
}

// GetFinding returns the Finding field value if set, zero value otherwise.
func (o *AdvisoryRecordType) GetFinding() string {
	if o == nil || IsNil(o.Finding) {
		var ret string
		return ret
	}
	return *o.Finding
}

// GetFindingOk returns a tuple with the Finding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRecordType) GetFindingOk() (*string, bool) {
	if o == nil || IsNil(o.Finding) {
		return nil, false
	}
	return o.Finding, true
}

// HasFinding returns a boolean if a field has been set.
func (o *AdvisoryRecordType) HasFinding() bool {
	if o != nil && !IsNil(o.Finding) {
		return true
	}

	return false
}

// SetFinding gets a reference to the given string and assigns it to the Finding field.
func (o *AdvisoryRecordType) SetFinding(v string) {
	o.Finding = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AdvisoryRecordType) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRecordType) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AdvisoryRecordType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AdvisoryRecordType) SetId(v string) {
	o.Id = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *AdvisoryRecordType) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRecordType) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *AdvisoryRecordType) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *AdvisoryRecordType) SetKind(v string) {
	o.Kind = &v
}

func (o AdvisoryRecordType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryRecordType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Finding) {
		toSerialize["finding"] = o.Finding
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	return toSerialize, nil
}

type NullableAdvisoryRecordType struct {
	value *AdvisoryRecordType
	isSet bool
}

func (v NullableAdvisoryRecordType) Get() *AdvisoryRecordType {
	return v.value
}

func (v *NullableAdvisoryRecordType) Set(val *AdvisoryRecordType) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryRecordType) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryRecordType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryRecordType(val *AdvisoryRecordType) *NullableAdvisoryRecordType {
	return &NullableAdvisoryRecordType{value: val, isSet: true}
}

func (v NullableAdvisoryRecordType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryRecordType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


