/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryAffectedDebianRelease type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryAffectedDebianRelease{}

// AdvisoryAffectedDebianRelease struct for AdvisoryAffectedDebianRelease
type AdvisoryAffectedDebianRelease struct {
	FixedVersion *string `json:"fixed_version,omitempty"`
	Nodsa *string `json:"nodsa,omitempty"`
	NodsaReason *string `json:"nodsa_reason,omitempty"`
	ReleaseName *string `json:"release_name,omitempty"`
	Repositories []AdvisoryAffectedDebianRepository `json:"repositories,omitempty"`
	Status *string `json:"status,omitempty"`
	Urgency *string `json:"urgency,omitempty"`
}

// NewAdvisoryAffectedDebianRelease instantiates a new AdvisoryAffectedDebianRelease object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryAffectedDebianRelease() *AdvisoryAffectedDebianRelease {
	this := AdvisoryAffectedDebianRelease{}
	return &this
}

// NewAdvisoryAffectedDebianReleaseWithDefaults instantiates a new AdvisoryAffectedDebianRelease object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryAffectedDebianReleaseWithDefaults() *AdvisoryAffectedDebianRelease {
	this := AdvisoryAffectedDebianRelease{}
	return &this
}

// GetFixedVersion returns the FixedVersion field value if set, zero value otherwise.
func (o *AdvisoryAffectedDebianRelease) GetFixedVersion() string {
	if o == nil || IsNil(o.FixedVersion) {
		var ret string
		return ret
	}
	return *o.FixedVersion
}

// GetFixedVersionOk returns a tuple with the FixedVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryAffectedDebianRelease) GetFixedVersionOk() (*string, bool) {
	if o == nil || IsNil(o.FixedVersion) {
		return nil, false
	}
	return o.FixedVersion, true
}

// HasFixedVersion returns a boolean if a field has been set.
func (o *AdvisoryAffectedDebianRelease) HasFixedVersion() bool {
	if o != nil && !IsNil(o.FixedVersion) {
		return true
	}

	return false
}

// SetFixedVersion gets a reference to the given string and assigns it to the FixedVersion field.
func (o *AdvisoryAffectedDebianRelease) SetFixedVersion(v string) {
	o.FixedVersion = &v
}

// GetNodsa returns the Nodsa field value if set, zero value otherwise.
func (o *AdvisoryAffectedDebianRelease) GetNodsa() string {
	if o == nil || IsNil(o.Nodsa) {
		var ret string
		return ret
	}
	return *o.Nodsa
}

// GetNodsaOk returns a tuple with the Nodsa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryAffectedDebianRelease) GetNodsaOk() (*string, bool) {
	if o == nil || IsNil(o.Nodsa) {
		return nil, false
	}
	return o.Nodsa, true
}

// HasNodsa returns a boolean if a field has been set.
func (o *AdvisoryAffectedDebianRelease) HasNodsa() bool {
	if o != nil && !IsNil(o.Nodsa) {
		return true
	}

	return false
}

// SetNodsa gets a reference to the given string and assigns it to the Nodsa field.
func (o *AdvisoryAffectedDebianRelease) SetNodsa(v string) {
	o.Nodsa = &v
}

// GetNodsaReason returns the NodsaReason field value if set, zero value otherwise.
func (o *AdvisoryAffectedDebianRelease) GetNodsaReason() string {
	if o == nil || IsNil(o.NodsaReason) {
		var ret string
		return ret
	}
	return *o.NodsaReason
}

// GetNodsaReasonOk returns a tuple with the NodsaReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryAffectedDebianRelease) GetNodsaReasonOk() (*string, bool) {
	if o == nil || IsNil(o.NodsaReason) {
		return nil, false
	}
	return o.NodsaReason, true
}

// HasNodsaReason returns a boolean if a field has been set.
func (o *AdvisoryAffectedDebianRelease) HasNodsaReason() bool {
	if o != nil && !IsNil(o.NodsaReason) {
		return true
	}

	return false
}

// SetNodsaReason gets a reference to the given string and assigns it to the NodsaReason field.
func (o *AdvisoryAffectedDebianRelease) SetNodsaReason(v string) {
	o.NodsaReason = &v
}

// GetReleaseName returns the ReleaseName field value if set, zero value otherwise.
func (o *AdvisoryAffectedDebianRelease) GetReleaseName() string {
	if o == nil || IsNil(o.ReleaseName) {
		var ret string
		return ret
	}
	return *o.ReleaseName
}

// GetReleaseNameOk returns a tuple with the ReleaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryAffectedDebianRelease) GetReleaseNameOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseName) {
		return nil, false
	}
	return o.ReleaseName, true
}

// HasReleaseName returns a boolean if a field has been set.
func (o *AdvisoryAffectedDebianRelease) HasReleaseName() bool {
	if o != nil && !IsNil(o.ReleaseName) {
		return true
	}

	return false
}

// SetReleaseName gets a reference to the given string and assigns it to the ReleaseName field.
func (o *AdvisoryAffectedDebianRelease) SetReleaseName(v string) {
	o.ReleaseName = &v
}

// GetRepositories returns the Repositories field value if set, zero value otherwise.
func (o *AdvisoryAffectedDebianRelease) GetRepositories() []AdvisoryAffectedDebianRepository {
	if o == nil || IsNil(o.Repositories) {
		var ret []AdvisoryAffectedDebianRepository
		return ret
	}
	return o.Repositories
}

// GetRepositoriesOk returns a tuple with the Repositories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryAffectedDebianRelease) GetRepositoriesOk() ([]AdvisoryAffectedDebianRepository, bool) {
	if o == nil || IsNil(o.Repositories) {
		return nil, false
	}
	return o.Repositories, true
}

// HasRepositories returns a boolean if a field has been set.
func (o *AdvisoryAffectedDebianRelease) HasRepositories() bool {
	if o != nil && !IsNil(o.Repositories) {
		return true
	}

	return false
}

// SetRepositories gets a reference to the given []AdvisoryAffectedDebianRepository and assigns it to the Repositories field.
func (o *AdvisoryAffectedDebianRelease) SetRepositories(v []AdvisoryAffectedDebianRepository) {
	o.Repositories = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AdvisoryAffectedDebianRelease) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryAffectedDebianRelease) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AdvisoryAffectedDebianRelease) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *AdvisoryAffectedDebianRelease) SetStatus(v string) {
	o.Status = &v
}

// GetUrgency returns the Urgency field value if set, zero value otherwise.
func (o *AdvisoryAffectedDebianRelease) GetUrgency() string {
	if o == nil || IsNil(o.Urgency) {
		var ret string
		return ret
	}
	return *o.Urgency
}

// GetUrgencyOk returns a tuple with the Urgency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryAffectedDebianRelease) GetUrgencyOk() (*string, bool) {
	if o == nil || IsNil(o.Urgency) {
		return nil, false
	}
	return o.Urgency, true
}

// HasUrgency returns a boolean if a field has been set.
func (o *AdvisoryAffectedDebianRelease) HasUrgency() bool {
	if o != nil && !IsNil(o.Urgency) {
		return true
	}

	return false
}

// SetUrgency gets a reference to the given string and assigns it to the Urgency field.
func (o *AdvisoryAffectedDebianRelease) SetUrgency(v string) {
	o.Urgency = &v
}

func (o AdvisoryAffectedDebianRelease) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryAffectedDebianRelease) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FixedVersion) {
		toSerialize["fixed_version"] = o.FixedVersion
	}
	if !IsNil(o.Nodsa) {
		toSerialize["nodsa"] = o.Nodsa
	}
	if !IsNil(o.NodsaReason) {
		toSerialize["nodsa_reason"] = o.NodsaReason
	}
	if !IsNil(o.ReleaseName) {
		toSerialize["release_name"] = o.ReleaseName
	}
	if !IsNil(o.Repositories) {
		toSerialize["repositories"] = o.Repositories
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Urgency) {
		toSerialize["urgency"] = o.Urgency
	}
	return toSerialize, nil
}

type NullableAdvisoryAffectedDebianRelease struct {
	value *AdvisoryAffectedDebianRelease
	isSet bool
}

func (v NullableAdvisoryAffectedDebianRelease) Get() *AdvisoryAffectedDebianRelease {
	return v.value
}

func (v *NullableAdvisoryAffectedDebianRelease) Set(val *AdvisoryAffectedDebianRelease) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryAffectedDebianRelease) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryAffectedDebianRelease) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryAffectedDebianRelease(val *AdvisoryAffectedDebianRelease) *NullableAdvisoryAffectedDebianRelease {
	return &NullableAdvisoryAffectedDebianRelease{value: val, isSet: true}
}

func (v NullableAdvisoryAffectedDebianRelease) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryAffectedDebianRelease) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


