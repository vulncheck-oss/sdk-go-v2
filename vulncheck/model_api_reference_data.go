/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the ApiReferenceData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiReferenceData{}

// ApiReferenceData struct for ApiReferenceData
type ApiReferenceData struct {
	Name *string `json:"name,omitempty"`
	Refsource *string `json:"refsource,omitempty"`
	Tags []string `json:"tags,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewApiReferenceData instantiates a new ApiReferenceData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiReferenceData() *ApiReferenceData {
	this := ApiReferenceData{}
	return &this
}

// NewApiReferenceDataWithDefaults instantiates a new ApiReferenceData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiReferenceDataWithDefaults() *ApiReferenceData {
	this := ApiReferenceData{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApiReferenceData) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiReferenceData) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApiReferenceData) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApiReferenceData) SetName(v string) {
	o.Name = &v
}

// GetRefsource returns the Refsource field value if set, zero value otherwise.
func (o *ApiReferenceData) GetRefsource() string {
	if o == nil || IsNil(o.Refsource) {
		var ret string
		return ret
	}
	return *o.Refsource
}

// GetRefsourceOk returns a tuple with the Refsource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiReferenceData) GetRefsourceOk() (*string, bool) {
	if o == nil || IsNil(o.Refsource) {
		return nil, false
	}
	return o.Refsource, true
}

// HasRefsource returns a boolean if a field has been set.
func (o *ApiReferenceData) HasRefsource() bool {
	if o != nil && !IsNil(o.Refsource) {
		return true
	}

	return false
}

// SetRefsource gets a reference to the given string and assigns it to the Refsource field.
func (o *ApiReferenceData) SetRefsource(v string) {
	o.Refsource = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ApiReferenceData) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiReferenceData) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ApiReferenceData) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ApiReferenceData) SetTags(v []string) {
	o.Tags = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ApiReferenceData) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiReferenceData) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ApiReferenceData) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ApiReferenceData) SetUrl(v string) {
	o.Url = &v
}

func (o ApiReferenceData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiReferenceData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Refsource) {
		toSerialize["refsource"] = o.Refsource
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableApiReferenceData struct {
	value *ApiReferenceData
	isSet bool
}

func (v NullableApiReferenceData) Get() *ApiReferenceData {
	return v.value
}

func (v *NullableApiReferenceData) Set(val *ApiReferenceData) {
	v.value = val
	v.isSet = true
}

func (v NullableApiReferenceData) IsSet() bool {
	return v.isSet
}

func (v *NullableApiReferenceData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiReferenceData(val *ApiReferenceData) *NullableApiReferenceData {
	return &NullableApiReferenceData{value: val, isSet: true}
}

func (v NullableApiReferenceData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiReferenceData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


