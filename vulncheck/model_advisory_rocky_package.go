/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryRockyPackage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryRockyPackage{}

// AdvisoryRockyPackage struct for AdvisoryRockyPackage
type AdvisoryRockyPackage struct {
	Distro *string `json:"distro,omitempty"`
	Name *string `json:"name,omitempty"`
	Version *string `json:"version,omitempty"`
}

// NewAdvisoryRockyPackage instantiates a new AdvisoryRockyPackage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryRockyPackage() *AdvisoryRockyPackage {
	this := AdvisoryRockyPackage{}
	return &this
}

// NewAdvisoryRockyPackageWithDefaults instantiates a new AdvisoryRockyPackage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryRockyPackageWithDefaults() *AdvisoryRockyPackage {
	this := AdvisoryRockyPackage{}
	return &this
}

// GetDistro returns the Distro field value if set, zero value otherwise.
func (o *AdvisoryRockyPackage) GetDistro() string {
	if o == nil || IsNil(o.Distro) {
		var ret string
		return ret
	}
	return *o.Distro
}

// GetDistroOk returns a tuple with the Distro field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRockyPackage) GetDistroOk() (*string, bool) {
	if o == nil || IsNil(o.Distro) {
		return nil, false
	}
	return o.Distro, true
}

// HasDistro returns a boolean if a field has been set.
func (o *AdvisoryRockyPackage) HasDistro() bool {
	if o != nil && !IsNil(o.Distro) {
		return true
	}

	return false
}

// SetDistro gets a reference to the given string and assigns it to the Distro field.
func (o *AdvisoryRockyPackage) SetDistro(v string) {
	o.Distro = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AdvisoryRockyPackage) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRockyPackage) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AdvisoryRockyPackage) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AdvisoryRockyPackage) SetName(v string) {
	o.Name = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AdvisoryRockyPackage) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRockyPackage) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *AdvisoryRockyPackage) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *AdvisoryRockyPackage) SetVersion(v string) {
	o.Version = &v
}

func (o AdvisoryRockyPackage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryRockyPackage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Distro) {
		toSerialize["distro"] = o.Distro
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableAdvisoryRockyPackage struct {
	value *AdvisoryRockyPackage
	isSet bool
}

func (v NullableAdvisoryRockyPackage) Get() *AdvisoryRockyPackage {
	return v.value
}

func (v *NullableAdvisoryRockyPackage) Set(val *AdvisoryRockyPackage) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryRockyPackage) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryRockyPackage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryRockyPackage(val *AdvisoryRockyPackage) *NullableAdvisoryRockyPackage {
	return &NullableAdvisoryRockyPackage{value: val, isSet: true}
}

func (v NullableAdvisoryRockyPackage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryRockyPackage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


