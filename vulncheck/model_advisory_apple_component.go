/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryAppleComponent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryAppleComponent{}

// AdvisoryAppleComponent struct for AdvisoryAppleComponent
type AdvisoryAppleComponent struct {
	AvailableFor *string `json:"available_for,omitempty"`
	Cve []string `json:"cve,omitempty"`
	Description *string `json:"description,omitempty"`
	Impact *string `json:"impact,omitempty"`
	ItwExploit *bool `json:"itw_exploit,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewAdvisoryAppleComponent instantiates a new AdvisoryAppleComponent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryAppleComponent() *AdvisoryAppleComponent {
	this := AdvisoryAppleComponent{}
	return &this
}

// NewAdvisoryAppleComponentWithDefaults instantiates a new AdvisoryAppleComponent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryAppleComponentWithDefaults() *AdvisoryAppleComponent {
	this := AdvisoryAppleComponent{}
	return &this
}

// GetAvailableFor returns the AvailableFor field value if set, zero value otherwise.
func (o *AdvisoryAppleComponent) GetAvailableFor() string {
	if o == nil || IsNil(o.AvailableFor) {
		var ret string
		return ret
	}
	return *o.AvailableFor
}

// GetAvailableForOk returns a tuple with the AvailableFor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryAppleComponent) GetAvailableForOk() (*string, bool) {
	if o == nil || IsNil(o.AvailableFor) {
		return nil, false
	}
	return o.AvailableFor, true
}

// HasAvailableFor returns a boolean if a field has been set.
func (o *AdvisoryAppleComponent) HasAvailableFor() bool {
	if o != nil && !IsNil(o.AvailableFor) {
		return true
	}

	return false
}

// SetAvailableFor gets a reference to the given string and assigns it to the AvailableFor field.
func (o *AdvisoryAppleComponent) SetAvailableFor(v string) {
	o.AvailableFor = &v
}

// GetCve returns the Cve field value if set, zero value otherwise.
func (o *AdvisoryAppleComponent) GetCve() []string {
	if o == nil || IsNil(o.Cve) {
		var ret []string
		return ret
	}
	return o.Cve
}

// GetCveOk returns a tuple with the Cve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryAppleComponent) GetCveOk() ([]string, bool) {
	if o == nil || IsNil(o.Cve) {
		return nil, false
	}
	return o.Cve, true
}

// HasCve returns a boolean if a field has been set.
func (o *AdvisoryAppleComponent) HasCve() bool {
	if o != nil && !IsNil(o.Cve) {
		return true
	}

	return false
}

// SetCve gets a reference to the given []string and assigns it to the Cve field.
func (o *AdvisoryAppleComponent) SetCve(v []string) {
	o.Cve = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AdvisoryAppleComponent) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryAppleComponent) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AdvisoryAppleComponent) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AdvisoryAppleComponent) SetDescription(v string) {
	o.Description = &v
}

// GetImpact returns the Impact field value if set, zero value otherwise.
func (o *AdvisoryAppleComponent) GetImpact() string {
	if o == nil || IsNil(o.Impact) {
		var ret string
		return ret
	}
	return *o.Impact
}

// GetImpactOk returns a tuple with the Impact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryAppleComponent) GetImpactOk() (*string, bool) {
	if o == nil || IsNil(o.Impact) {
		return nil, false
	}
	return o.Impact, true
}

// HasImpact returns a boolean if a field has been set.
func (o *AdvisoryAppleComponent) HasImpact() bool {
	if o != nil && !IsNil(o.Impact) {
		return true
	}

	return false
}

// SetImpact gets a reference to the given string and assigns it to the Impact field.
func (o *AdvisoryAppleComponent) SetImpact(v string) {
	o.Impact = &v
}

// GetItwExploit returns the ItwExploit field value if set, zero value otherwise.
func (o *AdvisoryAppleComponent) GetItwExploit() bool {
	if o == nil || IsNil(o.ItwExploit) {
		var ret bool
		return ret
	}
	return *o.ItwExploit
}

// GetItwExploitOk returns a tuple with the ItwExploit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryAppleComponent) GetItwExploitOk() (*bool, bool) {
	if o == nil || IsNil(o.ItwExploit) {
		return nil, false
	}
	return o.ItwExploit, true
}

// HasItwExploit returns a boolean if a field has been set.
func (o *AdvisoryAppleComponent) HasItwExploit() bool {
	if o != nil && !IsNil(o.ItwExploit) {
		return true
	}

	return false
}

// SetItwExploit gets a reference to the given bool and assigns it to the ItwExploit field.
func (o *AdvisoryAppleComponent) SetItwExploit(v bool) {
	o.ItwExploit = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AdvisoryAppleComponent) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryAppleComponent) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AdvisoryAppleComponent) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AdvisoryAppleComponent) SetName(v string) {
	o.Name = &v
}

func (o AdvisoryAppleComponent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryAppleComponent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AvailableFor) {
		toSerialize["available_for"] = o.AvailableFor
	}
	if !IsNil(o.Cve) {
		toSerialize["cve"] = o.Cve
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Impact) {
		toSerialize["impact"] = o.Impact
	}
	if !IsNil(o.ItwExploit) {
		toSerialize["itw_exploit"] = o.ItwExploit
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableAdvisoryAppleComponent struct {
	value *AdvisoryAppleComponent
	isSet bool
}

func (v NullableAdvisoryAppleComponent) Get() *AdvisoryAppleComponent {
	return v.value
}

func (v *NullableAdvisoryAppleComponent) Set(val *AdvisoryAppleComponent) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryAppleComponent) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryAppleComponent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryAppleComponent(val *AdvisoryAppleComponent) *NullableAdvisoryAppleComponent {
	return &NullableAdvisoryAppleComponent{value: val, isSet: true}
}

func (v NullableAdvisoryAppleComponent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryAppleComponent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


