/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryMDocumentTracking type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryMDocumentTracking{}

// AdvisoryMDocumentTracking struct for AdvisoryMDocumentTracking
type AdvisoryMDocumentTracking struct {
	CurrentReleaseDate *string `json:"CurrentReleaseDate,omitempty"`
	InitialReleaseDate *string `json:"InitialReleaseDate,omitempty"`
	Identification *AdvisoryMIdentification `json:"identification,omitempty"`
	// diff in xml/json
	Revisionhistory []AdvisoryRRevision `json:"revisionhistory,omitempty"`
	// again - change in json/xml
	Status *int32 `json:"status,omitempty"`
	Version *string `json:"version,omitempty"`
}

// NewAdvisoryMDocumentTracking instantiates a new AdvisoryMDocumentTracking object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryMDocumentTracking() *AdvisoryMDocumentTracking {
	this := AdvisoryMDocumentTracking{}
	return &this
}

// NewAdvisoryMDocumentTrackingWithDefaults instantiates a new AdvisoryMDocumentTracking object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryMDocumentTrackingWithDefaults() *AdvisoryMDocumentTracking {
	this := AdvisoryMDocumentTracking{}
	return &this
}

// GetCurrentReleaseDate returns the CurrentReleaseDate field value if set, zero value otherwise.
func (o *AdvisoryMDocumentTracking) GetCurrentReleaseDate() string {
	if o == nil || IsNil(o.CurrentReleaseDate) {
		var ret string
		return ret
	}
	return *o.CurrentReleaseDate
}

// GetCurrentReleaseDateOk returns a tuple with the CurrentReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryMDocumentTracking) GetCurrentReleaseDateOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentReleaseDate) {
		return nil, false
	}
	return o.CurrentReleaseDate, true
}

// HasCurrentReleaseDate returns a boolean if a field has been set.
func (o *AdvisoryMDocumentTracking) HasCurrentReleaseDate() bool {
	if o != nil && !IsNil(o.CurrentReleaseDate) {
		return true
	}

	return false
}

// SetCurrentReleaseDate gets a reference to the given string and assigns it to the CurrentReleaseDate field.
func (o *AdvisoryMDocumentTracking) SetCurrentReleaseDate(v string) {
	o.CurrentReleaseDate = &v
}

// GetInitialReleaseDate returns the InitialReleaseDate field value if set, zero value otherwise.
func (o *AdvisoryMDocumentTracking) GetInitialReleaseDate() string {
	if o == nil || IsNil(o.InitialReleaseDate) {
		var ret string
		return ret
	}
	return *o.InitialReleaseDate
}

// GetInitialReleaseDateOk returns a tuple with the InitialReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryMDocumentTracking) GetInitialReleaseDateOk() (*string, bool) {
	if o == nil || IsNil(o.InitialReleaseDate) {
		return nil, false
	}
	return o.InitialReleaseDate, true
}

// HasInitialReleaseDate returns a boolean if a field has been set.
func (o *AdvisoryMDocumentTracking) HasInitialReleaseDate() bool {
	if o != nil && !IsNil(o.InitialReleaseDate) {
		return true
	}

	return false
}

// SetInitialReleaseDate gets a reference to the given string and assigns it to the InitialReleaseDate field.
func (o *AdvisoryMDocumentTracking) SetInitialReleaseDate(v string) {
	o.InitialReleaseDate = &v
}

// GetIdentification returns the Identification field value if set, zero value otherwise.
func (o *AdvisoryMDocumentTracking) GetIdentification() AdvisoryMIdentification {
	if o == nil || IsNil(o.Identification) {
		var ret AdvisoryMIdentification
		return ret
	}
	return *o.Identification
}

// GetIdentificationOk returns a tuple with the Identification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryMDocumentTracking) GetIdentificationOk() (*AdvisoryMIdentification, bool) {
	if o == nil || IsNil(o.Identification) {
		return nil, false
	}
	return o.Identification, true
}

// HasIdentification returns a boolean if a field has been set.
func (o *AdvisoryMDocumentTracking) HasIdentification() bool {
	if o != nil && !IsNil(o.Identification) {
		return true
	}

	return false
}

// SetIdentification gets a reference to the given AdvisoryMIdentification and assigns it to the Identification field.
func (o *AdvisoryMDocumentTracking) SetIdentification(v AdvisoryMIdentification) {
	o.Identification = &v
}

// GetRevisionhistory returns the Revisionhistory field value if set, zero value otherwise.
func (o *AdvisoryMDocumentTracking) GetRevisionhistory() []AdvisoryRRevision {
	if o == nil || IsNil(o.Revisionhistory) {
		var ret []AdvisoryRRevision
		return ret
	}
	return o.Revisionhistory
}

// GetRevisionhistoryOk returns a tuple with the Revisionhistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryMDocumentTracking) GetRevisionhistoryOk() ([]AdvisoryRRevision, bool) {
	if o == nil || IsNil(o.Revisionhistory) {
		return nil, false
	}
	return o.Revisionhistory, true
}

// HasRevisionhistory returns a boolean if a field has been set.
func (o *AdvisoryMDocumentTracking) HasRevisionhistory() bool {
	if o != nil && !IsNil(o.Revisionhistory) {
		return true
	}

	return false
}

// SetRevisionhistory gets a reference to the given []AdvisoryRRevision and assigns it to the Revisionhistory field.
func (o *AdvisoryMDocumentTracking) SetRevisionhistory(v []AdvisoryRRevision) {
	o.Revisionhistory = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AdvisoryMDocumentTracking) GetStatus() int32 {
	if o == nil || IsNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryMDocumentTracking) GetStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AdvisoryMDocumentTracking) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *AdvisoryMDocumentTracking) SetStatus(v int32) {
	o.Status = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AdvisoryMDocumentTracking) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryMDocumentTracking) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *AdvisoryMDocumentTracking) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *AdvisoryMDocumentTracking) SetVersion(v string) {
	o.Version = &v
}

func (o AdvisoryMDocumentTracking) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryMDocumentTracking) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrentReleaseDate) {
		toSerialize["CurrentReleaseDate"] = o.CurrentReleaseDate
	}
	if !IsNil(o.InitialReleaseDate) {
		toSerialize["InitialReleaseDate"] = o.InitialReleaseDate
	}
	if !IsNil(o.Identification) {
		toSerialize["identification"] = o.Identification
	}
	if !IsNil(o.Revisionhistory) {
		toSerialize["revisionhistory"] = o.Revisionhistory
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableAdvisoryMDocumentTracking struct {
	value *AdvisoryMDocumentTracking
	isSet bool
}

func (v NullableAdvisoryMDocumentTracking) Get() *AdvisoryMDocumentTracking {
	return v.value
}

func (v *NullableAdvisoryMDocumentTracking) Set(val *AdvisoryMDocumentTracking) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryMDocumentTracking) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryMDocumentTracking) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryMDocumentTracking(val *AdvisoryMDocumentTracking) *NullableAdvisoryMDocumentTracking {
	return &NullableAdvisoryMDocumentTracking{value: val, isSet: true}
}

func (v NullableAdvisoryMDocumentTracking) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryMDocumentTracking) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


