/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryVCCPEDictionary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryVCCPEDictionary{}

// AdvisoryVCCPEDictionary struct for AdvisoryVCCPEDictionary
type AdvisoryVCCPEDictionary struct {
	BaseCPE *string `json:"baseCPE,omitempty"`
	Versions []string `json:"versions,omitempty"`
}

// NewAdvisoryVCCPEDictionary instantiates a new AdvisoryVCCPEDictionary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryVCCPEDictionary() *AdvisoryVCCPEDictionary {
	this := AdvisoryVCCPEDictionary{}
	return &this
}

// NewAdvisoryVCCPEDictionaryWithDefaults instantiates a new AdvisoryVCCPEDictionary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryVCCPEDictionaryWithDefaults() *AdvisoryVCCPEDictionary {
	this := AdvisoryVCCPEDictionary{}
	return &this
}

// GetBaseCPE returns the BaseCPE field value if set, zero value otherwise.
func (o *AdvisoryVCCPEDictionary) GetBaseCPE() string {
	if o == nil || IsNil(o.BaseCPE) {
		var ret string
		return ret
	}
	return *o.BaseCPE
}

// GetBaseCPEOk returns a tuple with the BaseCPE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryVCCPEDictionary) GetBaseCPEOk() (*string, bool) {
	if o == nil || IsNil(o.BaseCPE) {
		return nil, false
	}
	return o.BaseCPE, true
}

// HasBaseCPE returns a boolean if a field has been set.
func (o *AdvisoryVCCPEDictionary) HasBaseCPE() bool {
	if o != nil && !IsNil(o.BaseCPE) {
		return true
	}

	return false
}

// SetBaseCPE gets a reference to the given string and assigns it to the BaseCPE field.
func (o *AdvisoryVCCPEDictionary) SetBaseCPE(v string) {
	o.BaseCPE = &v
}

// GetVersions returns the Versions field value if set, zero value otherwise.
func (o *AdvisoryVCCPEDictionary) GetVersions() []string {
	if o == nil || IsNil(o.Versions) {
		var ret []string
		return ret
	}
	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryVCCPEDictionary) GetVersionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Versions) {
		return nil, false
	}
	return o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *AdvisoryVCCPEDictionary) HasVersions() bool {
	if o != nil && !IsNil(o.Versions) {
		return true
	}

	return false
}

// SetVersions gets a reference to the given []string and assigns it to the Versions field.
func (o *AdvisoryVCCPEDictionary) SetVersions(v []string) {
	o.Versions = v
}

func (o AdvisoryVCCPEDictionary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryVCCPEDictionary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BaseCPE) {
		toSerialize["baseCPE"] = o.BaseCPE
	}
	if !IsNil(o.Versions) {
		toSerialize["versions"] = o.Versions
	}
	return toSerialize, nil
}

type NullableAdvisoryVCCPEDictionary struct {
	value *AdvisoryVCCPEDictionary
	isSet bool
}

func (v NullableAdvisoryVCCPEDictionary) Get() *AdvisoryVCCPEDictionary {
	return v.value
}

func (v *NullableAdvisoryVCCPEDictionary) Set(val *AdvisoryVCCPEDictionary) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryVCCPEDictionary) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryVCCPEDictionary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryVCCPEDictionary(val *AdvisoryVCCPEDictionary) *NullableAdvisoryVCCPEDictionary {
	return &NullableAdvisoryVCCPEDictionary{value: val, isSet: true}
}

func (v NullableAdvisoryVCCPEDictionary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryVCCPEDictionary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


