/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryCOSUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryCOSUpdate{}

// AdvisoryCOSUpdate struct for AdvisoryCOSUpdate
type AdvisoryCOSUpdate struct {
	Changed []string `json:"changed,omitempty"`
	Featured []string `json:"featured,omitempty"`
	Fixed []string `json:"fixed,omitempty"`
	Id *string `json:"id,omitempty"`
	Reference *string `json:"reference,omitempty"`
	Security []string `json:"security,omitempty"`
	Updated *string `json:"updated,omitempty"`
}

// NewAdvisoryCOSUpdate instantiates a new AdvisoryCOSUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryCOSUpdate() *AdvisoryCOSUpdate {
	this := AdvisoryCOSUpdate{}
	return &this
}

// NewAdvisoryCOSUpdateWithDefaults instantiates a new AdvisoryCOSUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryCOSUpdateWithDefaults() *AdvisoryCOSUpdate {
	this := AdvisoryCOSUpdate{}
	return &this
}

// GetChanged returns the Changed field value if set, zero value otherwise.
func (o *AdvisoryCOSUpdate) GetChanged() []string {
	if o == nil || IsNil(o.Changed) {
		var ret []string
		return ret
	}
	return o.Changed
}

// GetChangedOk returns a tuple with the Changed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryCOSUpdate) GetChangedOk() ([]string, bool) {
	if o == nil || IsNil(o.Changed) {
		return nil, false
	}
	return o.Changed, true
}

// HasChanged returns a boolean if a field has been set.
func (o *AdvisoryCOSUpdate) HasChanged() bool {
	if o != nil && !IsNil(o.Changed) {
		return true
	}

	return false
}

// SetChanged gets a reference to the given []string and assigns it to the Changed field.
func (o *AdvisoryCOSUpdate) SetChanged(v []string) {
	o.Changed = v
}

// GetFeatured returns the Featured field value if set, zero value otherwise.
func (o *AdvisoryCOSUpdate) GetFeatured() []string {
	if o == nil || IsNil(o.Featured) {
		var ret []string
		return ret
	}
	return o.Featured
}

// GetFeaturedOk returns a tuple with the Featured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryCOSUpdate) GetFeaturedOk() ([]string, bool) {
	if o == nil || IsNil(o.Featured) {
		return nil, false
	}
	return o.Featured, true
}

// HasFeatured returns a boolean if a field has been set.
func (o *AdvisoryCOSUpdate) HasFeatured() bool {
	if o != nil && !IsNil(o.Featured) {
		return true
	}

	return false
}

// SetFeatured gets a reference to the given []string and assigns it to the Featured field.
func (o *AdvisoryCOSUpdate) SetFeatured(v []string) {
	o.Featured = v
}

// GetFixed returns the Fixed field value if set, zero value otherwise.
func (o *AdvisoryCOSUpdate) GetFixed() []string {
	if o == nil || IsNil(o.Fixed) {
		var ret []string
		return ret
	}
	return o.Fixed
}

// GetFixedOk returns a tuple with the Fixed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryCOSUpdate) GetFixedOk() ([]string, bool) {
	if o == nil || IsNil(o.Fixed) {
		return nil, false
	}
	return o.Fixed, true
}

// HasFixed returns a boolean if a field has been set.
func (o *AdvisoryCOSUpdate) HasFixed() bool {
	if o != nil && !IsNil(o.Fixed) {
		return true
	}

	return false
}

// SetFixed gets a reference to the given []string and assigns it to the Fixed field.
func (o *AdvisoryCOSUpdate) SetFixed(v []string) {
	o.Fixed = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AdvisoryCOSUpdate) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryCOSUpdate) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AdvisoryCOSUpdate) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AdvisoryCOSUpdate) SetId(v string) {
	o.Id = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *AdvisoryCOSUpdate) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryCOSUpdate) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *AdvisoryCOSUpdate) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *AdvisoryCOSUpdate) SetReference(v string) {
	o.Reference = &v
}

// GetSecurity returns the Security field value if set, zero value otherwise.
func (o *AdvisoryCOSUpdate) GetSecurity() []string {
	if o == nil || IsNil(o.Security) {
		var ret []string
		return ret
	}
	return o.Security
}

// GetSecurityOk returns a tuple with the Security field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryCOSUpdate) GetSecurityOk() ([]string, bool) {
	if o == nil || IsNil(o.Security) {
		return nil, false
	}
	return o.Security, true
}

// HasSecurity returns a boolean if a field has been set.
func (o *AdvisoryCOSUpdate) HasSecurity() bool {
	if o != nil && !IsNil(o.Security) {
		return true
	}

	return false
}

// SetSecurity gets a reference to the given []string and assigns it to the Security field.
func (o *AdvisoryCOSUpdate) SetSecurity(v []string) {
	o.Security = v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *AdvisoryCOSUpdate) GetUpdated() string {
	if o == nil || IsNil(o.Updated) {
		var ret string
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryCOSUpdate) GetUpdatedOk() (*string, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *AdvisoryCOSUpdate) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given string and assigns it to the Updated field.
func (o *AdvisoryCOSUpdate) SetUpdated(v string) {
	o.Updated = &v
}

func (o AdvisoryCOSUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryCOSUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Changed) {
		toSerialize["changed"] = o.Changed
	}
	if !IsNil(o.Featured) {
		toSerialize["featured"] = o.Featured
	}
	if !IsNil(o.Fixed) {
		toSerialize["fixed"] = o.Fixed
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !IsNil(o.Security) {
		toSerialize["security"] = o.Security
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	return toSerialize, nil
}

type NullableAdvisoryCOSUpdate struct {
	value *AdvisoryCOSUpdate
	isSet bool
}

func (v NullableAdvisoryCOSUpdate) Get() *AdvisoryCOSUpdate {
	return v.value
}

func (v *NullableAdvisoryCOSUpdate) Set(val *AdvisoryCOSUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryCOSUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryCOSUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryCOSUpdate(val *AdvisoryCOSUpdate) *NullableAdvisoryCOSUpdate {
	return &NullableAdvisoryCOSUpdate{value: val, isSet: true}
}

func (v NullableAdvisoryCOSUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryCOSUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


