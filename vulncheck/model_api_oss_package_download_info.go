/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the ApiOSSPackageDownloadInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiOSSPackageDownloadInfo{}

// ApiOSSPackageDownloadInfo struct for ApiOSSPackageDownloadInfo
type ApiOSSPackageDownloadInfo struct {
	Hashes []ApiOSSPackageHashInfo `json:"hashes,omitempty"`
	Reference *string `json:"reference,omitempty"`
	// See OSSPackageDownloadInfoType* consts
	Type *string `json:"type,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewApiOSSPackageDownloadInfo instantiates a new ApiOSSPackageDownloadInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiOSSPackageDownloadInfo() *ApiOSSPackageDownloadInfo {
	this := ApiOSSPackageDownloadInfo{}
	return &this
}

// NewApiOSSPackageDownloadInfoWithDefaults instantiates a new ApiOSSPackageDownloadInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiOSSPackageDownloadInfoWithDefaults() *ApiOSSPackageDownloadInfo {
	this := ApiOSSPackageDownloadInfo{}
	return &this
}

// GetHashes returns the Hashes field value if set, zero value otherwise.
func (o *ApiOSSPackageDownloadInfo) GetHashes() []ApiOSSPackageHashInfo {
	if o == nil || IsNil(o.Hashes) {
		var ret []ApiOSSPackageHashInfo
		return ret
	}
	return o.Hashes
}

// GetHashesOk returns a tuple with the Hashes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiOSSPackageDownloadInfo) GetHashesOk() ([]ApiOSSPackageHashInfo, bool) {
	if o == nil || IsNil(o.Hashes) {
		return nil, false
	}
	return o.Hashes, true
}

// HasHashes returns a boolean if a field has been set.
func (o *ApiOSSPackageDownloadInfo) HasHashes() bool {
	if o != nil && !IsNil(o.Hashes) {
		return true
	}

	return false
}

// SetHashes gets a reference to the given []ApiOSSPackageHashInfo and assigns it to the Hashes field.
func (o *ApiOSSPackageDownloadInfo) SetHashes(v []ApiOSSPackageHashInfo) {
	o.Hashes = v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *ApiOSSPackageDownloadInfo) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiOSSPackageDownloadInfo) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *ApiOSSPackageDownloadInfo) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *ApiOSSPackageDownloadInfo) SetReference(v string) {
	o.Reference = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ApiOSSPackageDownloadInfo) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiOSSPackageDownloadInfo) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ApiOSSPackageDownloadInfo) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ApiOSSPackageDownloadInfo) SetType(v string) {
	o.Type = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ApiOSSPackageDownloadInfo) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiOSSPackageDownloadInfo) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ApiOSSPackageDownloadInfo) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ApiOSSPackageDownloadInfo) SetUrl(v string) {
	o.Url = &v
}

func (o ApiOSSPackageDownloadInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiOSSPackageDownloadInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hashes) {
		toSerialize["hashes"] = o.Hashes
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableApiOSSPackageDownloadInfo struct {
	value *ApiOSSPackageDownloadInfo
	isSet bool
}

func (v NullableApiOSSPackageDownloadInfo) Get() *ApiOSSPackageDownloadInfo {
	return v.value
}

func (v *NullableApiOSSPackageDownloadInfo) Set(val *ApiOSSPackageDownloadInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableApiOSSPackageDownloadInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableApiOSSPackageDownloadInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiOSSPackageDownloadInfo(val *ApiOSSPackageDownloadInfo) *NullableApiOSSPackageDownloadInfo {
	return &NullableApiOSSPackageDownloadInfo{value: val, isSet: true}
}

func (v NullableApiOSSPackageDownloadInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiOSSPackageDownloadInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


