/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the ApiCVEExtended type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiCVEExtended{}

// ApiCVEExtended struct for ApiCVEExtended
type ApiCVEExtended struct {
	CVEDataMeta *ApiCVEDataMetaExtended `json:"CVE_data_meta,omitempty"`
	Categorization *ApiCategorizationExtended `json:"categorization,omitempty"`
	DataFormat *string `json:"data_format,omitempty"`
	DataType *string `json:"data_type,omitempty"`
	DataVersion *string `json:"data_version,omitempty"`
	Description *ApiDescription `json:"description,omitempty"`
	Problemtype *ApiProblemTypeExtended `json:"problemtype,omitempty"`
	References *ApiReferencesExtended `json:"references,omitempty"`
}

// NewApiCVEExtended instantiates a new ApiCVEExtended object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiCVEExtended() *ApiCVEExtended {
	this := ApiCVEExtended{}
	return &this
}

// NewApiCVEExtendedWithDefaults instantiates a new ApiCVEExtended object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiCVEExtendedWithDefaults() *ApiCVEExtended {
	this := ApiCVEExtended{}
	return &this
}

// GetCVEDataMeta returns the CVEDataMeta field value if set, zero value otherwise.
func (o *ApiCVEExtended) GetCVEDataMeta() ApiCVEDataMetaExtended {
	if o == nil || IsNil(o.CVEDataMeta) {
		var ret ApiCVEDataMetaExtended
		return ret
	}
	return *o.CVEDataMeta
}

// GetCVEDataMetaOk returns a tuple with the CVEDataMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCVEExtended) GetCVEDataMetaOk() (*ApiCVEDataMetaExtended, bool) {
	if o == nil || IsNil(o.CVEDataMeta) {
		return nil, false
	}
	return o.CVEDataMeta, true
}

// HasCVEDataMeta returns a boolean if a field has been set.
func (o *ApiCVEExtended) HasCVEDataMeta() bool {
	if o != nil && !IsNil(o.CVEDataMeta) {
		return true
	}

	return false
}

// SetCVEDataMeta gets a reference to the given ApiCVEDataMetaExtended and assigns it to the CVEDataMeta field.
func (o *ApiCVEExtended) SetCVEDataMeta(v ApiCVEDataMetaExtended) {
	o.CVEDataMeta = &v
}

// GetCategorization returns the Categorization field value if set, zero value otherwise.
func (o *ApiCVEExtended) GetCategorization() ApiCategorizationExtended {
	if o == nil || IsNil(o.Categorization) {
		var ret ApiCategorizationExtended
		return ret
	}
	return *o.Categorization
}

// GetCategorizationOk returns a tuple with the Categorization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCVEExtended) GetCategorizationOk() (*ApiCategorizationExtended, bool) {
	if o == nil || IsNil(o.Categorization) {
		return nil, false
	}
	return o.Categorization, true
}

// HasCategorization returns a boolean if a field has been set.
func (o *ApiCVEExtended) HasCategorization() bool {
	if o != nil && !IsNil(o.Categorization) {
		return true
	}

	return false
}

// SetCategorization gets a reference to the given ApiCategorizationExtended and assigns it to the Categorization field.
func (o *ApiCVEExtended) SetCategorization(v ApiCategorizationExtended) {
	o.Categorization = &v
}

// GetDataFormat returns the DataFormat field value if set, zero value otherwise.
func (o *ApiCVEExtended) GetDataFormat() string {
	if o == nil || IsNil(o.DataFormat) {
		var ret string
		return ret
	}
	return *o.DataFormat
}

// GetDataFormatOk returns a tuple with the DataFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCVEExtended) GetDataFormatOk() (*string, bool) {
	if o == nil || IsNil(o.DataFormat) {
		return nil, false
	}
	return o.DataFormat, true
}

// HasDataFormat returns a boolean if a field has been set.
func (o *ApiCVEExtended) HasDataFormat() bool {
	if o != nil && !IsNil(o.DataFormat) {
		return true
	}

	return false
}

// SetDataFormat gets a reference to the given string and assigns it to the DataFormat field.
func (o *ApiCVEExtended) SetDataFormat(v string) {
	o.DataFormat = &v
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *ApiCVEExtended) GetDataType() string {
	if o == nil || IsNil(o.DataType) {
		var ret string
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCVEExtended) GetDataTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DataType) {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *ApiCVEExtended) HasDataType() bool {
	if o != nil && !IsNil(o.DataType) {
		return true
	}

	return false
}

// SetDataType gets a reference to the given string and assigns it to the DataType field.
func (o *ApiCVEExtended) SetDataType(v string) {
	o.DataType = &v
}

// GetDataVersion returns the DataVersion field value if set, zero value otherwise.
func (o *ApiCVEExtended) GetDataVersion() string {
	if o == nil || IsNil(o.DataVersion) {
		var ret string
		return ret
	}
	return *o.DataVersion
}

// GetDataVersionOk returns a tuple with the DataVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCVEExtended) GetDataVersionOk() (*string, bool) {
	if o == nil || IsNil(o.DataVersion) {
		return nil, false
	}
	return o.DataVersion, true
}

// HasDataVersion returns a boolean if a field has been set.
func (o *ApiCVEExtended) HasDataVersion() bool {
	if o != nil && !IsNil(o.DataVersion) {
		return true
	}

	return false
}

// SetDataVersion gets a reference to the given string and assigns it to the DataVersion field.
func (o *ApiCVEExtended) SetDataVersion(v string) {
	o.DataVersion = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ApiCVEExtended) GetDescription() ApiDescription {
	if o == nil || IsNil(o.Description) {
		var ret ApiDescription
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCVEExtended) GetDescriptionOk() (*ApiDescription, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ApiCVEExtended) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given ApiDescription and assigns it to the Description field.
func (o *ApiCVEExtended) SetDescription(v ApiDescription) {
	o.Description = &v
}

// GetProblemtype returns the Problemtype field value if set, zero value otherwise.
func (o *ApiCVEExtended) GetProblemtype() ApiProblemTypeExtended {
	if o == nil || IsNil(o.Problemtype) {
		var ret ApiProblemTypeExtended
		return ret
	}
	return *o.Problemtype
}

// GetProblemtypeOk returns a tuple with the Problemtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCVEExtended) GetProblemtypeOk() (*ApiProblemTypeExtended, bool) {
	if o == nil || IsNil(o.Problemtype) {
		return nil, false
	}
	return o.Problemtype, true
}

// HasProblemtype returns a boolean if a field has been set.
func (o *ApiCVEExtended) HasProblemtype() bool {
	if o != nil && !IsNil(o.Problemtype) {
		return true
	}

	return false
}

// SetProblemtype gets a reference to the given ApiProblemTypeExtended and assigns it to the Problemtype field.
func (o *ApiCVEExtended) SetProblemtype(v ApiProblemTypeExtended) {
	o.Problemtype = &v
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *ApiCVEExtended) GetReferences() ApiReferencesExtended {
	if o == nil || IsNil(o.References) {
		var ret ApiReferencesExtended
		return ret
	}
	return *o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCVEExtended) GetReferencesOk() (*ApiReferencesExtended, bool) {
	if o == nil || IsNil(o.References) {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *ApiCVEExtended) HasReferences() bool {
	if o != nil && !IsNil(o.References) {
		return true
	}

	return false
}

// SetReferences gets a reference to the given ApiReferencesExtended and assigns it to the References field.
func (o *ApiCVEExtended) SetReferences(v ApiReferencesExtended) {
	o.References = &v
}

func (o ApiCVEExtended) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiCVEExtended) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CVEDataMeta) {
		toSerialize["CVE_data_meta"] = o.CVEDataMeta
	}
	if !IsNil(o.Categorization) {
		toSerialize["categorization"] = o.Categorization
	}
	if !IsNil(o.DataFormat) {
		toSerialize["data_format"] = o.DataFormat
	}
	if !IsNil(o.DataType) {
		toSerialize["data_type"] = o.DataType
	}
	if !IsNil(o.DataVersion) {
		toSerialize["data_version"] = o.DataVersion
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Problemtype) {
		toSerialize["problemtype"] = o.Problemtype
	}
	if !IsNil(o.References) {
		toSerialize["references"] = o.References
	}
	return toSerialize, nil
}

type NullableApiCVEExtended struct {
	value *ApiCVEExtended
	isSet bool
}

func (v NullableApiCVEExtended) Get() *ApiCVEExtended {
	return v.value
}

func (v *NullableApiCVEExtended) Set(val *ApiCVEExtended) {
	v.value = val
	v.isSet = true
}

func (v NullableApiCVEExtended) IsSet() bool {
	return v.isSet
}

func (v *NullableApiCVEExtended) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiCVEExtended(val *ApiCVEExtended) *NullableApiCVEExtended {
	return &NullableApiCVEExtended{value: val, isSet: true}
}

func (v NullableApiCVEExtended) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiCVEExtended) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


