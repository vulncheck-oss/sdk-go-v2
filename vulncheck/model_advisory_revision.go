/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryRevision type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryRevision{}

// AdvisoryRevision struct for AdvisoryRevision
type AdvisoryRevision struct {
	Date *string `json:"date,omitempty"`
	Description *string `json:"description,omitempty"`
	Number *string `json:"number,omitempty"`
}

// NewAdvisoryRevision instantiates a new AdvisoryRevision object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryRevision() *AdvisoryRevision {
	this := AdvisoryRevision{}
	return &this
}

// NewAdvisoryRevisionWithDefaults instantiates a new AdvisoryRevision object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryRevisionWithDefaults() *AdvisoryRevision {
	this := AdvisoryRevision{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *AdvisoryRevision) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRevision) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *AdvisoryRevision) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *AdvisoryRevision) SetDate(v string) {
	o.Date = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AdvisoryRevision) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRevision) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AdvisoryRevision) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AdvisoryRevision) SetDescription(v string) {
	o.Description = &v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *AdvisoryRevision) GetNumber() string {
	if o == nil || IsNil(o.Number) {
		var ret string
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRevision) GetNumberOk() (*string, bool) {
	if o == nil || IsNil(o.Number) {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *AdvisoryRevision) HasNumber() bool {
	if o != nil && !IsNil(o.Number) {
		return true
	}

	return false
}

// SetNumber gets a reference to the given string and assigns it to the Number field.
func (o *AdvisoryRevision) SetNumber(v string) {
	o.Number = &v
}

func (o AdvisoryRevision) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryRevision) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Number) {
		toSerialize["number"] = o.Number
	}
	return toSerialize, nil
}

type NullableAdvisoryRevision struct {
	value *AdvisoryRevision
	isSet bool
}

func (v NullableAdvisoryRevision) Get() *AdvisoryRevision {
	return v.value
}

func (v *NullableAdvisoryRevision) Set(val *AdvisoryRevision) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryRevision) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryRevision) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryRevision(val *AdvisoryRevision) *NullableAdvisoryRevision {
	return &NullableAdvisoryRevision{value: val, isSet: true}
}

func (v NullableAdvisoryRevision) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryRevision) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


