/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryEUVD type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryEUVD{}

// AdvisoryEUVD struct for AdvisoryEUVD
type AdvisoryEUVD struct {
	Aliases []string `json:"aliases,omitempty"`
	Assigner *string `json:"assigner,omitempty"`
	BaseScore *float32 `json:"base_score,omitempty"`
	BaseScoreVector *string `json:"base_score_vector,omitempty"`
	BaseScoreVersion *string `json:"base_score_version,omitempty"`
	Cve []string `json:"cve,omitempty"`
	DateAdded *string `json:"date_added,omitempty"`
	DateUpdated *string `json:"date_updated,omitempty"`
	Description *string `json:"description,omitempty"`
	EnisaIdProduct []AdvisoryEnisaIDProduct `json:"enisa_id_product,omitempty"`
	EnisaIdVendor []AdvisoryEnisaIDVendor `json:"enisa_id_vendor,omitempty"`
	Epss *float32 `json:"epss,omitempty"`
	// This field is exploited field from endpoint /api/vulnerabilities. apidocs : https://euvd.enisa.europa.eu/apidoc Note: There are records where exploited_since is populated with a valid date, but it still shows up under non_exploitable data set
	Exploited *bool `json:"exploited,omitempty"`
	ExploitedSince *string `json:"exploited_since,omitempty"`
	Id *string `json:"id,omitempty"`
	References []string `json:"references,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewAdvisoryEUVD instantiates a new AdvisoryEUVD object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryEUVD() *AdvisoryEUVD {
	this := AdvisoryEUVD{}
	return &this
}

// NewAdvisoryEUVDWithDefaults instantiates a new AdvisoryEUVD object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryEUVDWithDefaults() *AdvisoryEUVD {
	this := AdvisoryEUVD{}
	return &this
}

// GetAliases returns the Aliases field value if set, zero value otherwise.
func (o *AdvisoryEUVD) GetAliases() []string {
	if o == nil || IsNil(o.Aliases) {
		var ret []string
		return ret
	}
	return o.Aliases
}

// GetAliasesOk returns a tuple with the Aliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryEUVD) GetAliasesOk() ([]string, bool) {
	if o == nil || IsNil(o.Aliases) {
		return nil, false
	}
	return o.Aliases, true
}

// HasAliases returns a boolean if a field has been set.
func (o *AdvisoryEUVD) HasAliases() bool {
	if o != nil && !IsNil(o.Aliases) {
		return true
	}

	return false
}

// SetAliases gets a reference to the given []string and assigns it to the Aliases field.
func (o *AdvisoryEUVD) SetAliases(v []string) {
	o.Aliases = v
}

// GetAssigner returns the Assigner field value if set, zero value otherwise.
func (o *AdvisoryEUVD) GetAssigner() string {
	if o == nil || IsNil(o.Assigner) {
		var ret string
		return ret
	}
	return *o.Assigner
}

// GetAssignerOk returns a tuple with the Assigner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryEUVD) GetAssignerOk() (*string, bool) {
	if o == nil || IsNil(o.Assigner) {
		return nil, false
	}
	return o.Assigner, true
}

// HasAssigner returns a boolean if a field has been set.
func (o *AdvisoryEUVD) HasAssigner() bool {
	if o != nil && !IsNil(o.Assigner) {
		return true
	}

	return false
}

// SetAssigner gets a reference to the given string and assigns it to the Assigner field.
func (o *AdvisoryEUVD) SetAssigner(v string) {
	o.Assigner = &v
}

// GetBaseScore returns the BaseScore field value if set, zero value otherwise.
func (o *AdvisoryEUVD) GetBaseScore() float32 {
	if o == nil || IsNil(o.BaseScore) {
		var ret float32
		return ret
	}
	return *o.BaseScore
}

// GetBaseScoreOk returns a tuple with the BaseScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryEUVD) GetBaseScoreOk() (*float32, bool) {
	if o == nil || IsNil(o.BaseScore) {
		return nil, false
	}
	return o.BaseScore, true
}

// HasBaseScore returns a boolean if a field has been set.
func (o *AdvisoryEUVD) HasBaseScore() bool {
	if o != nil && !IsNil(o.BaseScore) {
		return true
	}

	return false
}

// SetBaseScore gets a reference to the given float32 and assigns it to the BaseScore field.
func (o *AdvisoryEUVD) SetBaseScore(v float32) {
	o.BaseScore = &v
}

// GetBaseScoreVector returns the BaseScoreVector field value if set, zero value otherwise.
func (o *AdvisoryEUVD) GetBaseScoreVector() string {
	if o == nil || IsNil(o.BaseScoreVector) {
		var ret string
		return ret
	}
	return *o.BaseScoreVector
}

// GetBaseScoreVectorOk returns a tuple with the BaseScoreVector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryEUVD) GetBaseScoreVectorOk() (*string, bool) {
	if o == nil || IsNil(o.BaseScoreVector) {
		return nil, false
	}
	return o.BaseScoreVector, true
}

// HasBaseScoreVector returns a boolean if a field has been set.
func (o *AdvisoryEUVD) HasBaseScoreVector() bool {
	if o != nil && !IsNil(o.BaseScoreVector) {
		return true
	}

	return false
}

// SetBaseScoreVector gets a reference to the given string and assigns it to the BaseScoreVector field.
func (o *AdvisoryEUVD) SetBaseScoreVector(v string) {
	o.BaseScoreVector = &v
}

// GetBaseScoreVersion returns the BaseScoreVersion field value if set, zero value otherwise.
func (o *AdvisoryEUVD) GetBaseScoreVersion() string {
	if o == nil || IsNil(o.BaseScoreVersion) {
		var ret string
		return ret
	}
	return *o.BaseScoreVersion
}

// GetBaseScoreVersionOk returns a tuple with the BaseScoreVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryEUVD) GetBaseScoreVersionOk() (*string, bool) {
	if o == nil || IsNil(o.BaseScoreVersion) {
		return nil, false
	}
	return o.BaseScoreVersion, true
}

// HasBaseScoreVersion returns a boolean if a field has been set.
func (o *AdvisoryEUVD) HasBaseScoreVersion() bool {
	if o != nil && !IsNil(o.BaseScoreVersion) {
		return true
	}

	return false
}

// SetBaseScoreVersion gets a reference to the given string and assigns it to the BaseScoreVersion field.
func (o *AdvisoryEUVD) SetBaseScoreVersion(v string) {
	o.BaseScoreVersion = &v
}

// GetCve returns the Cve field value if set, zero value otherwise.
func (o *AdvisoryEUVD) GetCve() []string {
	if o == nil || IsNil(o.Cve) {
		var ret []string
		return ret
	}
	return o.Cve
}

// GetCveOk returns a tuple with the Cve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryEUVD) GetCveOk() ([]string, bool) {
	if o == nil || IsNil(o.Cve) {
		return nil, false
	}
	return o.Cve, true
}

// HasCve returns a boolean if a field has been set.
func (o *AdvisoryEUVD) HasCve() bool {
	if o != nil && !IsNil(o.Cve) {
		return true
	}

	return false
}

// SetCve gets a reference to the given []string and assigns it to the Cve field.
func (o *AdvisoryEUVD) SetCve(v []string) {
	o.Cve = v
}

// GetDateAdded returns the DateAdded field value if set, zero value otherwise.
func (o *AdvisoryEUVD) GetDateAdded() string {
	if o == nil || IsNil(o.DateAdded) {
		var ret string
		return ret
	}
	return *o.DateAdded
}

// GetDateAddedOk returns a tuple with the DateAdded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryEUVD) GetDateAddedOk() (*string, bool) {
	if o == nil || IsNil(o.DateAdded) {
		return nil, false
	}
	return o.DateAdded, true
}

// HasDateAdded returns a boolean if a field has been set.
func (o *AdvisoryEUVD) HasDateAdded() bool {
	if o != nil && !IsNil(o.DateAdded) {
		return true
	}

	return false
}

// SetDateAdded gets a reference to the given string and assigns it to the DateAdded field.
func (o *AdvisoryEUVD) SetDateAdded(v string) {
	o.DateAdded = &v
}

// GetDateUpdated returns the DateUpdated field value if set, zero value otherwise.
func (o *AdvisoryEUVD) GetDateUpdated() string {
	if o == nil || IsNil(o.DateUpdated) {
		var ret string
		return ret
	}
	return *o.DateUpdated
}

// GetDateUpdatedOk returns a tuple with the DateUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryEUVD) GetDateUpdatedOk() (*string, bool) {
	if o == nil || IsNil(o.DateUpdated) {
		return nil, false
	}
	return o.DateUpdated, true
}

// HasDateUpdated returns a boolean if a field has been set.
func (o *AdvisoryEUVD) HasDateUpdated() bool {
	if o != nil && !IsNil(o.DateUpdated) {
		return true
	}

	return false
}

// SetDateUpdated gets a reference to the given string and assigns it to the DateUpdated field.
func (o *AdvisoryEUVD) SetDateUpdated(v string) {
	o.DateUpdated = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AdvisoryEUVD) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryEUVD) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AdvisoryEUVD) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AdvisoryEUVD) SetDescription(v string) {
	o.Description = &v
}

// GetEnisaIdProduct returns the EnisaIdProduct field value if set, zero value otherwise.
func (o *AdvisoryEUVD) GetEnisaIdProduct() []AdvisoryEnisaIDProduct {
	if o == nil || IsNil(o.EnisaIdProduct) {
		var ret []AdvisoryEnisaIDProduct
		return ret
	}
	return o.EnisaIdProduct
}

// GetEnisaIdProductOk returns a tuple with the EnisaIdProduct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryEUVD) GetEnisaIdProductOk() ([]AdvisoryEnisaIDProduct, bool) {
	if o == nil || IsNil(o.EnisaIdProduct) {
		return nil, false
	}
	return o.EnisaIdProduct, true
}

// HasEnisaIdProduct returns a boolean if a field has been set.
func (o *AdvisoryEUVD) HasEnisaIdProduct() bool {
	if o != nil && !IsNil(o.EnisaIdProduct) {
		return true
	}

	return false
}

// SetEnisaIdProduct gets a reference to the given []AdvisoryEnisaIDProduct and assigns it to the EnisaIdProduct field.
func (o *AdvisoryEUVD) SetEnisaIdProduct(v []AdvisoryEnisaIDProduct) {
	o.EnisaIdProduct = v
}

// GetEnisaIdVendor returns the EnisaIdVendor field value if set, zero value otherwise.
func (o *AdvisoryEUVD) GetEnisaIdVendor() []AdvisoryEnisaIDVendor {
	if o == nil || IsNil(o.EnisaIdVendor) {
		var ret []AdvisoryEnisaIDVendor
		return ret
	}
	return o.EnisaIdVendor
}

// GetEnisaIdVendorOk returns a tuple with the EnisaIdVendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryEUVD) GetEnisaIdVendorOk() ([]AdvisoryEnisaIDVendor, bool) {
	if o == nil || IsNil(o.EnisaIdVendor) {
		return nil, false
	}
	return o.EnisaIdVendor, true
}

// HasEnisaIdVendor returns a boolean if a field has been set.
func (o *AdvisoryEUVD) HasEnisaIdVendor() bool {
	if o != nil && !IsNil(o.EnisaIdVendor) {
		return true
	}

	return false
}

// SetEnisaIdVendor gets a reference to the given []AdvisoryEnisaIDVendor and assigns it to the EnisaIdVendor field.
func (o *AdvisoryEUVD) SetEnisaIdVendor(v []AdvisoryEnisaIDVendor) {
	o.EnisaIdVendor = v
}

// GetEpss returns the Epss field value if set, zero value otherwise.
func (o *AdvisoryEUVD) GetEpss() float32 {
	if o == nil || IsNil(o.Epss) {
		var ret float32
		return ret
	}
	return *o.Epss
}

// GetEpssOk returns a tuple with the Epss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryEUVD) GetEpssOk() (*float32, bool) {
	if o == nil || IsNil(o.Epss) {
		return nil, false
	}
	return o.Epss, true
}

// HasEpss returns a boolean if a field has been set.
func (o *AdvisoryEUVD) HasEpss() bool {
	if o != nil && !IsNil(o.Epss) {
		return true
	}

	return false
}

// SetEpss gets a reference to the given float32 and assigns it to the Epss field.
func (o *AdvisoryEUVD) SetEpss(v float32) {
	o.Epss = &v
}

// GetExploited returns the Exploited field value if set, zero value otherwise.
func (o *AdvisoryEUVD) GetExploited() bool {
	if o == nil || IsNil(o.Exploited) {
		var ret bool
		return ret
	}
	return *o.Exploited
}

// GetExploitedOk returns a tuple with the Exploited field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryEUVD) GetExploitedOk() (*bool, bool) {
	if o == nil || IsNil(o.Exploited) {
		return nil, false
	}
	return o.Exploited, true
}

// HasExploited returns a boolean if a field has been set.
func (o *AdvisoryEUVD) HasExploited() bool {
	if o != nil && !IsNil(o.Exploited) {
		return true
	}

	return false
}

// SetExploited gets a reference to the given bool and assigns it to the Exploited field.
func (o *AdvisoryEUVD) SetExploited(v bool) {
	o.Exploited = &v
}

// GetExploitedSince returns the ExploitedSince field value if set, zero value otherwise.
func (o *AdvisoryEUVD) GetExploitedSince() string {
	if o == nil || IsNil(o.ExploitedSince) {
		var ret string
		return ret
	}
	return *o.ExploitedSince
}

// GetExploitedSinceOk returns a tuple with the ExploitedSince field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryEUVD) GetExploitedSinceOk() (*string, bool) {
	if o == nil || IsNil(o.ExploitedSince) {
		return nil, false
	}
	return o.ExploitedSince, true
}

// HasExploitedSince returns a boolean if a field has been set.
func (o *AdvisoryEUVD) HasExploitedSince() bool {
	if o != nil && !IsNil(o.ExploitedSince) {
		return true
	}

	return false
}

// SetExploitedSince gets a reference to the given string and assigns it to the ExploitedSince field.
func (o *AdvisoryEUVD) SetExploitedSince(v string) {
	o.ExploitedSince = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AdvisoryEUVD) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryEUVD) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AdvisoryEUVD) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AdvisoryEUVD) SetId(v string) {
	o.Id = &v
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *AdvisoryEUVD) GetReferences() []string {
	if o == nil || IsNil(o.References) {
		var ret []string
		return ret
	}
	return o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryEUVD) GetReferencesOk() ([]string, bool) {
	if o == nil || IsNil(o.References) {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *AdvisoryEUVD) HasReferences() bool {
	if o != nil && !IsNil(o.References) {
		return true
	}

	return false
}

// SetReferences gets a reference to the given []string and assigns it to the References field.
func (o *AdvisoryEUVD) SetReferences(v []string) {
	o.References = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *AdvisoryEUVD) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryEUVD) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *AdvisoryEUVD) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *AdvisoryEUVD) SetUrl(v string) {
	o.Url = &v
}

func (o AdvisoryEUVD) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryEUVD) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aliases) {
		toSerialize["aliases"] = o.Aliases
	}
	if !IsNil(o.Assigner) {
		toSerialize["assigner"] = o.Assigner
	}
	if !IsNil(o.BaseScore) {
		toSerialize["base_score"] = o.BaseScore
	}
	if !IsNil(o.BaseScoreVector) {
		toSerialize["base_score_vector"] = o.BaseScoreVector
	}
	if !IsNil(o.BaseScoreVersion) {
		toSerialize["base_score_version"] = o.BaseScoreVersion
	}
	if !IsNil(o.Cve) {
		toSerialize["cve"] = o.Cve
	}
	if !IsNil(o.DateAdded) {
		toSerialize["date_added"] = o.DateAdded
	}
	if !IsNil(o.DateUpdated) {
		toSerialize["date_updated"] = o.DateUpdated
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.EnisaIdProduct) {
		toSerialize["enisa_id_product"] = o.EnisaIdProduct
	}
	if !IsNil(o.EnisaIdVendor) {
		toSerialize["enisa_id_vendor"] = o.EnisaIdVendor
	}
	if !IsNil(o.Epss) {
		toSerialize["epss"] = o.Epss
	}
	if !IsNil(o.Exploited) {
		toSerialize["exploited"] = o.Exploited
	}
	if !IsNil(o.ExploitedSince) {
		toSerialize["exploited_since"] = o.ExploitedSince
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.References) {
		toSerialize["references"] = o.References
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableAdvisoryEUVD struct {
	value *AdvisoryEUVD
	isSet bool
}

func (v NullableAdvisoryEUVD) Get() *AdvisoryEUVD {
	return v.value
}

func (v *NullableAdvisoryEUVD) Set(val *AdvisoryEUVD) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryEUVD) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryEUVD) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryEUVD(val *AdvisoryEUVD) *NullableAdvisoryEUVD {
	return &NullableAdvisoryEUVD{value: val, isSet: true}
}

func (v NullableAdvisoryEUVD) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryEUVD) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


