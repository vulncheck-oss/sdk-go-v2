/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the ApiOSSPackageArtifacts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiOSSPackageArtifacts{}

// ApiOSSPackageArtifacts struct for ApiOSSPackageArtifacts
type ApiOSSPackageArtifacts struct {
	Binary []ApiOSSPackageDownloadInfo `json:"binary,omitempty"`
	Source []ApiOSSPackageDownloadInfo `json:"source,omitempty"`
}

// NewApiOSSPackageArtifacts instantiates a new ApiOSSPackageArtifacts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiOSSPackageArtifacts() *ApiOSSPackageArtifacts {
	this := ApiOSSPackageArtifacts{}
	return &this
}

// NewApiOSSPackageArtifactsWithDefaults instantiates a new ApiOSSPackageArtifacts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiOSSPackageArtifactsWithDefaults() *ApiOSSPackageArtifacts {
	this := ApiOSSPackageArtifacts{}
	return &this
}

// GetBinary returns the Binary field value if set, zero value otherwise.
func (o *ApiOSSPackageArtifacts) GetBinary() []ApiOSSPackageDownloadInfo {
	if o == nil || IsNil(o.Binary) {
		var ret []ApiOSSPackageDownloadInfo
		return ret
	}
	return o.Binary
}

// GetBinaryOk returns a tuple with the Binary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiOSSPackageArtifacts) GetBinaryOk() ([]ApiOSSPackageDownloadInfo, bool) {
	if o == nil || IsNil(o.Binary) {
		return nil, false
	}
	return o.Binary, true
}

// HasBinary returns a boolean if a field has been set.
func (o *ApiOSSPackageArtifacts) HasBinary() bool {
	if o != nil && !IsNil(o.Binary) {
		return true
	}

	return false
}

// SetBinary gets a reference to the given []ApiOSSPackageDownloadInfo and assigns it to the Binary field.
func (o *ApiOSSPackageArtifacts) SetBinary(v []ApiOSSPackageDownloadInfo) {
	o.Binary = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *ApiOSSPackageArtifacts) GetSource() []ApiOSSPackageDownloadInfo {
	if o == nil || IsNil(o.Source) {
		var ret []ApiOSSPackageDownloadInfo
		return ret
	}
	return o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiOSSPackageArtifacts) GetSourceOk() ([]ApiOSSPackageDownloadInfo, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *ApiOSSPackageArtifacts) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given []ApiOSSPackageDownloadInfo and assigns it to the Source field.
func (o *ApiOSSPackageArtifacts) SetSource(v []ApiOSSPackageDownloadInfo) {
	o.Source = v
}

func (o ApiOSSPackageArtifacts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiOSSPackageArtifacts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Binary) {
		toSerialize["binary"] = o.Binary
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	return toSerialize, nil
}

type NullableApiOSSPackageArtifacts struct {
	value *ApiOSSPackageArtifacts
	isSet bool
}

func (v NullableApiOSSPackageArtifacts) Get() *ApiOSSPackageArtifacts {
	return v.value
}

func (v *NullableApiOSSPackageArtifacts) Set(val *ApiOSSPackageArtifacts) {
	v.value = val
	v.isSet = true
}

func (v NullableApiOSSPackageArtifacts) IsSet() bool {
	return v.isSet
}

func (v *NullableApiOSSPackageArtifacts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiOSSPackageArtifacts(val *ApiOSSPackageArtifacts) *NullableApiOSSPackageArtifacts {
	return &NullableApiOSSPackageArtifacts{value: val, isSet: true}
}

func (v NullableApiOSSPackageArtifacts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiOSSPackageArtifacts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


