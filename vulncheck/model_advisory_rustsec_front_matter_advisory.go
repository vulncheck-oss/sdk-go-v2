/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryRustsecFrontMatterAdvisory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryRustsecFrontMatterAdvisory{}

// AdvisoryRustsecFrontMatterAdvisory struct for AdvisoryRustsecFrontMatterAdvisory
type AdvisoryRustsecFrontMatterAdvisory struct {
	// Vulnerability aliases, e.g. CVE IDs (optional but recommended) Request a CVE for your RustSec vulns: https://iwantacve.org/
	Aliases []string `json:"aliases,omitempty"`
	// Optional: Categories this advisory falls under. Valid categories are: \"code-execution\", \"crypto-failure\", \"denial-of-service\", \"file-disclosure\" \"format-injection\", \"memory-corruption\", \"memory-exposure\", \"privilege-escalation\"
	Categories []string `json:"categories,omitempty"`
	// Optional: a Common Vulnerability Scoring System score. More information can be found on the CVSS website, https://www.first.org/cvss/.
	Cvss *string `json:"cvss,omitempty"`
	// Disclosure date of the advisory as an RFC 3339 date (mandatory)
	Date *string `json:"date,omitempty"`
	// Optional: Indicates the type of informational security  advisory  - \"unsound\" for soundness issues  - \"unmaintained\" for crates that are no longer maintained  - \"notice\" for other informational notices
	Informational *string `json:"informational,omitempty"`
	// Freeform keywords which describe this vulnerability, similar to Cargo (optional)
	Keywords []string `json:"keywords,omitempty"`
	// Name of the affected crate (mandatory)
	Package *string `json:"package,omitempty"`
	// URL to additional helpful references regarding the advisory (optional)
	References []string `json:"references,omitempty"`
	// Related vulnerabilities (optional) e.g. CVE for a C library wrapped by a -sys crate)
	Related []string `json:"related,omitempty"`
	// Identifier for the advisory (mandatory). Will be assigned a \"RUSTSEC-YYYY-NNNN\" identifier e.g. RUSTSEC-2018-0001. Please use \"RUSTSEC-0000-0000\" in PRs.
	RustsecId *string `json:"rustsec_id,omitempty"`
	// URL to a long-form description of this issue, e.g. a GitHub issue/PR, a change log entry, or a blogpost announcing the release (optional)
	Url *string `json:"url,omitempty"`
	// Whether the advisory is withdrawn (optional)
	Withdrawn *string `json:"withdrawn,omitempty"`
}

// NewAdvisoryRustsecFrontMatterAdvisory instantiates a new AdvisoryRustsecFrontMatterAdvisory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryRustsecFrontMatterAdvisory() *AdvisoryRustsecFrontMatterAdvisory {
	this := AdvisoryRustsecFrontMatterAdvisory{}
	return &this
}

// NewAdvisoryRustsecFrontMatterAdvisoryWithDefaults instantiates a new AdvisoryRustsecFrontMatterAdvisory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryRustsecFrontMatterAdvisoryWithDefaults() *AdvisoryRustsecFrontMatterAdvisory {
	this := AdvisoryRustsecFrontMatterAdvisory{}
	return &this
}

// GetAliases returns the Aliases field value if set, zero value otherwise.
func (o *AdvisoryRustsecFrontMatterAdvisory) GetAliases() []string {
	if o == nil || IsNil(o.Aliases) {
		var ret []string
		return ret
	}
	return o.Aliases
}

// GetAliasesOk returns a tuple with the Aliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRustsecFrontMatterAdvisory) GetAliasesOk() ([]string, bool) {
	if o == nil || IsNil(o.Aliases) {
		return nil, false
	}
	return o.Aliases, true
}

// HasAliases returns a boolean if a field has been set.
func (o *AdvisoryRustsecFrontMatterAdvisory) HasAliases() bool {
	if o != nil && !IsNil(o.Aliases) {
		return true
	}

	return false
}

// SetAliases gets a reference to the given []string and assigns it to the Aliases field.
func (o *AdvisoryRustsecFrontMatterAdvisory) SetAliases(v []string) {
	o.Aliases = v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *AdvisoryRustsecFrontMatterAdvisory) GetCategories() []string {
	if o == nil || IsNil(o.Categories) {
		var ret []string
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRustsecFrontMatterAdvisory) GetCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *AdvisoryRustsecFrontMatterAdvisory) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []string and assigns it to the Categories field.
func (o *AdvisoryRustsecFrontMatterAdvisory) SetCategories(v []string) {
	o.Categories = v
}

// GetCvss returns the Cvss field value if set, zero value otherwise.
func (o *AdvisoryRustsecFrontMatterAdvisory) GetCvss() string {
	if o == nil || IsNil(o.Cvss) {
		var ret string
		return ret
	}
	return *o.Cvss
}

// GetCvssOk returns a tuple with the Cvss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRustsecFrontMatterAdvisory) GetCvssOk() (*string, bool) {
	if o == nil || IsNil(o.Cvss) {
		return nil, false
	}
	return o.Cvss, true
}

// HasCvss returns a boolean if a field has been set.
func (o *AdvisoryRustsecFrontMatterAdvisory) HasCvss() bool {
	if o != nil && !IsNil(o.Cvss) {
		return true
	}

	return false
}

// SetCvss gets a reference to the given string and assigns it to the Cvss field.
func (o *AdvisoryRustsecFrontMatterAdvisory) SetCvss(v string) {
	o.Cvss = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *AdvisoryRustsecFrontMatterAdvisory) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRustsecFrontMatterAdvisory) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *AdvisoryRustsecFrontMatterAdvisory) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *AdvisoryRustsecFrontMatterAdvisory) SetDate(v string) {
	o.Date = &v
}

// GetInformational returns the Informational field value if set, zero value otherwise.
func (o *AdvisoryRustsecFrontMatterAdvisory) GetInformational() string {
	if o == nil || IsNil(o.Informational) {
		var ret string
		return ret
	}
	return *o.Informational
}

// GetInformationalOk returns a tuple with the Informational field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRustsecFrontMatterAdvisory) GetInformationalOk() (*string, bool) {
	if o == nil || IsNil(o.Informational) {
		return nil, false
	}
	return o.Informational, true
}

// HasInformational returns a boolean if a field has been set.
func (o *AdvisoryRustsecFrontMatterAdvisory) HasInformational() bool {
	if o != nil && !IsNil(o.Informational) {
		return true
	}

	return false
}

// SetInformational gets a reference to the given string and assigns it to the Informational field.
func (o *AdvisoryRustsecFrontMatterAdvisory) SetInformational(v string) {
	o.Informational = &v
}

// GetKeywords returns the Keywords field value if set, zero value otherwise.
func (o *AdvisoryRustsecFrontMatterAdvisory) GetKeywords() []string {
	if o == nil || IsNil(o.Keywords) {
		var ret []string
		return ret
	}
	return o.Keywords
}

// GetKeywordsOk returns a tuple with the Keywords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRustsecFrontMatterAdvisory) GetKeywordsOk() ([]string, bool) {
	if o == nil || IsNil(o.Keywords) {
		return nil, false
	}
	return o.Keywords, true
}

// HasKeywords returns a boolean if a field has been set.
func (o *AdvisoryRustsecFrontMatterAdvisory) HasKeywords() bool {
	if o != nil && !IsNil(o.Keywords) {
		return true
	}

	return false
}

// SetKeywords gets a reference to the given []string and assigns it to the Keywords field.
func (o *AdvisoryRustsecFrontMatterAdvisory) SetKeywords(v []string) {
	o.Keywords = v
}

// GetPackage returns the Package field value if set, zero value otherwise.
func (o *AdvisoryRustsecFrontMatterAdvisory) GetPackage() string {
	if o == nil || IsNil(o.Package) {
		var ret string
		return ret
	}
	return *o.Package
}

// GetPackageOk returns a tuple with the Package field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRustsecFrontMatterAdvisory) GetPackageOk() (*string, bool) {
	if o == nil || IsNil(o.Package) {
		return nil, false
	}
	return o.Package, true
}

// HasPackage returns a boolean if a field has been set.
func (o *AdvisoryRustsecFrontMatterAdvisory) HasPackage() bool {
	if o != nil && !IsNil(o.Package) {
		return true
	}

	return false
}

// SetPackage gets a reference to the given string and assigns it to the Package field.
func (o *AdvisoryRustsecFrontMatterAdvisory) SetPackage(v string) {
	o.Package = &v
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *AdvisoryRustsecFrontMatterAdvisory) GetReferences() []string {
	if o == nil || IsNil(o.References) {
		var ret []string
		return ret
	}
	return o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRustsecFrontMatterAdvisory) GetReferencesOk() ([]string, bool) {
	if o == nil || IsNil(o.References) {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *AdvisoryRustsecFrontMatterAdvisory) HasReferences() bool {
	if o != nil && !IsNil(o.References) {
		return true
	}

	return false
}

// SetReferences gets a reference to the given []string and assigns it to the References field.
func (o *AdvisoryRustsecFrontMatterAdvisory) SetReferences(v []string) {
	o.References = v
}

// GetRelated returns the Related field value if set, zero value otherwise.
func (o *AdvisoryRustsecFrontMatterAdvisory) GetRelated() []string {
	if o == nil || IsNil(o.Related) {
		var ret []string
		return ret
	}
	return o.Related
}

// GetRelatedOk returns a tuple with the Related field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRustsecFrontMatterAdvisory) GetRelatedOk() ([]string, bool) {
	if o == nil || IsNil(o.Related) {
		return nil, false
	}
	return o.Related, true
}

// HasRelated returns a boolean if a field has been set.
func (o *AdvisoryRustsecFrontMatterAdvisory) HasRelated() bool {
	if o != nil && !IsNil(o.Related) {
		return true
	}

	return false
}

// SetRelated gets a reference to the given []string and assigns it to the Related field.
func (o *AdvisoryRustsecFrontMatterAdvisory) SetRelated(v []string) {
	o.Related = v
}

// GetRustsecId returns the RustsecId field value if set, zero value otherwise.
func (o *AdvisoryRustsecFrontMatterAdvisory) GetRustsecId() string {
	if o == nil || IsNil(o.RustsecId) {
		var ret string
		return ret
	}
	return *o.RustsecId
}

// GetRustsecIdOk returns a tuple with the RustsecId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRustsecFrontMatterAdvisory) GetRustsecIdOk() (*string, bool) {
	if o == nil || IsNil(o.RustsecId) {
		return nil, false
	}
	return o.RustsecId, true
}

// HasRustsecId returns a boolean if a field has been set.
func (o *AdvisoryRustsecFrontMatterAdvisory) HasRustsecId() bool {
	if o != nil && !IsNil(o.RustsecId) {
		return true
	}

	return false
}

// SetRustsecId gets a reference to the given string and assigns it to the RustsecId field.
func (o *AdvisoryRustsecFrontMatterAdvisory) SetRustsecId(v string) {
	o.RustsecId = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *AdvisoryRustsecFrontMatterAdvisory) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRustsecFrontMatterAdvisory) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *AdvisoryRustsecFrontMatterAdvisory) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *AdvisoryRustsecFrontMatterAdvisory) SetUrl(v string) {
	o.Url = &v
}

// GetWithdrawn returns the Withdrawn field value if set, zero value otherwise.
func (o *AdvisoryRustsecFrontMatterAdvisory) GetWithdrawn() string {
	if o == nil || IsNil(o.Withdrawn) {
		var ret string
		return ret
	}
	return *o.Withdrawn
}

// GetWithdrawnOk returns a tuple with the Withdrawn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRustsecFrontMatterAdvisory) GetWithdrawnOk() (*string, bool) {
	if o == nil || IsNil(o.Withdrawn) {
		return nil, false
	}
	return o.Withdrawn, true
}

// HasWithdrawn returns a boolean if a field has been set.
func (o *AdvisoryRustsecFrontMatterAdvisory) HasWithdrawn() bool {
	if o != nil && !IsNil(o.Withdrawn) {
		return true
	}

	return false
}

// SetWithdrawn gets a reference to the given string and assigns it to the Withdrawn field.
func (o *AdvisoryRustsecFrontMatterAdvisory) SetWithdrawn(v string) {
	o.Withdrawn = &v
}

func (o AdvisoryRustsecFrontMatterAdvisory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryRustsecFrontMatterAdvisory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aliases) {
		toSerialize["aliases"] = o.Aliases
	}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	if !IsNil(o.Cvss) {
		toSerialize["cvss"] = o.Cvss
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Informational) {
		toSerialize["informational"] = o.Informational
	}
	if !IsNil(o.Keywords) {
		toSerialize["keywords"] = o.Keywords
	}
	if !IsNil(o.Package) {
		toSerialize["package"] = o.Package
	}
	if !IsNil(o.References) {
		toSerialize["references"] = o.References
	}
	if !IsNil(o.Related) {
		toSerialize["related"] = o.Related
	}
	if !IsNil(o.RustsecId) {
		toSerialize["rustsec_id"] = o.RustsecId
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Withdrawn) {
		toSerialize["withdrawn"] = o.Withdrawn
	}
	return toSerialize, nil
}

type NullableAdvisoryRustsecFrontMatterAdvisory struct {
	value *AdvisoryRustsecFrontMatterAdvisory
	isSet bool
}

func (v NullableAdvisoryRustsecFrontMatterAdvisory) Get() *AdvisoryRustsecFrontMatterAdvisory {
	return v.value
}

func (v *NullableAdvisoryRustsecFrontMatterAdvisory) Set(val *AdvisoryRustsecFrontMatterAdvisory) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryRustsecFrontMatterAdvisory) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryRustsecFrontMatterAdvisory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryRustsecFrontMatterAdvisory(val *AdvisoryRustsecFrontMatterAdvisory) *NullableAdvisoryRustsecFrontMatterAdvisory {
	return &NullableAdvisoryRustsecFrontMatterAdvisory{value: val, isSet: true}
}

func (v NullableAdvisoryRustsecFrontMatterAdvisory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryRustsecFrontMatterAdvisory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


