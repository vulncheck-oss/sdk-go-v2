/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryRockyCve type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryRockyCve{}

// AdvisoryRockyCve struct for AdvisoryRockyCve
type AdvisoryRockyCve struct {
	Cvss3BaseScore *string `json:"cvss3BaseScore,omitempty"`
	Cvss3ScoringVector *string `json:"cvss3ScoringVector,omitempty"`
	Cwe *string `json:"cwe,omitempty"`
	Name *string `json:"name,omitempty"`
	SourceBy *string `json:"sourceBy,omitempty"`
	SourceLink *string `json:"sourceLink,omitempty"`
}

// NewAdvisoryRockyCve instantiates a new AdvisoryRockyCve object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryRockyCve() *AdvisoryRockyCve {
	this := AdvisoryRockyCve{}
	return &this
}

// NewAdvisoryRockyCveWithDefaults instantiates a new AdvisoryRockyCve object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryRockyCveWithDefaults() *AdvisoryRockyCve {
	this := AdvisoryRockyCve{}
	return &this
}

// GetCvss3BaseScore returns the Cvss3BaseScore field value if set, zero value otherwise.
func (o *AdvisoryRockyCve) GetCvss3BaseScore() string {
	if o == nil || IsNil(o.Cvss3BaseScore) {
		var ret string
		return ret
	}
	return *o.Cvss3BaseScore
}

// GetCvss3BaseScoreOk returns a tuple with the Cvss3BaseScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRockyCve) GetCvss3BaseScoreOk() (*string, bool) {
	if o == nil || IsNil(o.Cvss3BaseScore) {
		return nil, false
	}
	return o.Cvss3BaseScore, true
}

// HasCvss3BaseScore returns a boolean if a field has been set.
func (o *AdvisoryRockyCve) HasCvss3BaseScore() bool {
	if o != nil && !IsNil(o.Cvss3BaseScore) {
		return true
	}

	return false
}

// SetCvss3BaseScore gets a reference to the given string and assigns it to the Cvss3BaseScore field.
func (o *AdvisoryRockyCve) SetCvss3BaseScore(v string) {
	o.Cvss3BaseScore = &v
}

// GetCvss3ScoringVector returns the Cvss3ScoringVector field value if set, zero value otherwise.
func (o *AdvisoryRockyCve) GetCvss3ScoringVector() string {
	if o == nil || IsNil(o.Cvss3ScoringVector) {
		var ret string
		return ret
	}
	return *o.Cvss3ScoringVector
}

// GetCvss3ScoringVectorOk returns a tuple with the Cvss3ScoringVector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRockyCve) GetCvss3ScoringVectorOk() (*string, bool) {
	if o == nil || IsNil(o.Cvss3ScoringVector) {
		return nil, false
	}
	return o.Cvss3ScoringVector, true
}

// HasCvss3ScoringVector returns a boolean if a field has been set.
func (o *AdvisoryRockyCve) HasCvss3ScoringVector() bool {
	if o != nil && !IsNil(o.Cvss3ScoringVector) {
		return true
	}

	return false
}

// SetCvss3ScoringVector gets a reference to the given string and assigns it to the Cvss3ScoringVector field.
func (o *AdvisoryRockyCve) SetCvss3ScoringVector(v string) {
	o.Cvss3ScoringVector = &v
}

// GetCwe returns the Cwe field value if set, zero value otherwise.
func (o *AdvisoryRockyCve) GetCwe() string {
	if o == nil || IsNil(o.Cwe) {
		var ret string
		return ret
	}
	return *o.Cwe
}

// GetCweOk returns a tuple with the Cwe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRockyCve) GetCweOk() (*string, bool) {
	if o == nil || IsNil(o.Cwe) {
		return nil, false
	}
	return o.Cwe, true
}

// HasCwe returns a boolean if a field has been set.
func (o *AdvisoryRockyCve) HasCwe() bool {
	if o != nil && !IsNil(o.Cwe) {
		return true
	}

	return false
}

// SetCwe gets a reference to the given string and assigns it to the Cwe field.
func (o *AdvisoryRockyCve) SetCwe(v string) {
	o.Cwe = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AdvisoryRockyCve) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRockyCve) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AdvisoryRockyCve) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AdvisoryRockyCve) SetName(v string) {
	o.Name = &v
}

// GetSourceBy returns the SourceBy field value if set, zero value otherwise.
func (o *AdvisoryRockyCve) GetSourceBy() string {
	if o == nil || IsNil(o.SourceBy) {
		var ret string
		return ret
	}
	return *o.SourceBy
}

// GetSourceByOk returns a tuple with the SourceBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRockyCve) GetSourceByOk() (*string, bool) {
	if o == nil || IsNil(o.SourceBy) {
		return nil, false
	}
	return o.SourceBy, true
}

// HasSourceBy returns a boolean if a field has been set.
func (o *AdvisoryRockyCve) HasSourceBy() bool {
	if o != nil && !IsNil(o.SourceBy) {
		return true
	}

	return false
}

// SetSourceBy gets a reference to the given string and assigns it to the SourceBy field.
func (o *AdvisoryRockyCve) SetSourceBy(v string) {
	o.SourceBy = &v
}

// GetSourceLink returns the SourceLink field value if set, zero value otherwise.
func (o *AdvisoryRockyCve) GetSourceLink() string {
	if o == nil || IsNil(o.SourceLink) {
		var ret string
		return ret
	}
	return *o.SourceLink
}

// GetSourceLinkOk returns a tuple with the SourceLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRockyCve) GetSourceLinkOk() (*string, bool) {
	if o == nil || IsNil(o.SourceLink) {
		return nil, false
	}
	return o.SourceLink, true
}

// HasSourceLink returns a boolean if a field has been set.
func (o *AdvisoryRockyCve) HasSourceLink() bool {
	if o != nil && !IsNil(o.SourceLink) {
		return true
	}

	return false
}

// SetSourceLink gets a reference to the given string and assigns it to the SourceLink field.
func (o *AdvisoryRockyCve) SetSourceLink(v string) {
	o.SourceLink = &v
}

func (o AdvisoryRockyCve) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryRockyCve) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cvss3BaseScore) {
		toSerialize["cvss3BaseScore"] = o.Cvss3BaseScore
	}
	if !IsNil(o.Cvss3ScoringVector) {
		toSerialize["cvss3ScoringVector"] = o.Cvss3ScoringVector
	}
	if !IsNil(o.Cwe) {
		toSerialize["cwe"] = o.Cwe
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SourceBy) {
		toSerialize["sourceBy"] = o.SourceBy
	}
	if !IsNil(o.SourceLink) {
		toSerialize["sourceLink"] = o.SourceLink
	}
	return toSerialize, nil
}

type NullableAdvisoryRockyCve struct {
	value *AdvisoryRockyCve
	isSet bool
}

func (v NullableAdvisoryRockyCve) Get() *AdvisoryRockyCve {
	return v.value
}

func (v *NullableAdvisoryRockyCve) Set(val *AdvisoryRockyCve) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryRockyCve) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryRockyCve) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryRockyCve(val *AdvisoryRockyCve) *NullableAdvisoryRockyCve {
	return &NullableAdvisoryRockyCve{value: val, isSet: true}
}

func (v NullableAdvisoryRockyCve) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryRockyCve) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


