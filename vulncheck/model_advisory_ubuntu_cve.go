/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryUbuntuCVE type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryUbuntuCVE{}

// AdvisoryUbuntuCVE struct for AdvisoryUbuntuCVE
type AdvisoryUbuntuCVE struct {
	AffectedPackages []AdvisoryAffectedUbuntuPackage `json:"affected_packages,omitempty"`
	// Candidate
	Cve []string `json:"cve,omitempty"`
	// PublicDate
	DateAdded *string `json:"date_added,omitempty"`
	// References
	ReferenceUrls []string `json:"reference_urls,omitempty"`
	SourceUrl *string `json:"source_url,omitempty"`
	// active || retired
	Status *string `json:"status,omitempty"`
	UbuntuUrl *string `json:"ubuntu_url,omitempty"`
	Usn []string `json:"usn,omitempty"`
}

// NewAdvisoryUbuntuCVE instantiates a new AdvisoryUbuntuCVE object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryUbuntuCVE() *AdvisoryUbuntuCVE {
	this := AdvisoryUbuntuCVE{}
	return &this
}

// NewAdvisoryUbuntuCVEWithDefaults instantiates a new AdvisoryUbuntuCVE object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryUbuntuCVEWithDefaults() *AdvisoryUbuntuCVE {
	this := AdvisoryUbuntuCVE{}
	return &this
}

// GetAffectedPackages returns the AffectedPackages field value if set, zero value otherwise.
func (o *AdvisoryUbuntuCVE) GetAffectedPackages() []AdvisoryAffectedUbuntuPackage {
	if o == nil || IsNil(o.AffectedPackages) {
		var ret []AdvisoryAffectedUbuntuPackage
		return ret
	}
	return o.AffectedPackages
}

// GetAffectedPackagesOk returns a tuple with the AffectedPackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryUbuntuCVE) GetAffectedPackagesOk() ([]AdvisoryAffectedUbuntuPackage, bool) {
	if o == nil || IsNil(o.AffectedPackages) {
		return nil, false
	}
	return o.AffectedPackages, true
}

// HasAffectedPackages returns a boolean if a field has been set.
func (o *AdvisoryUbuntuCVE) HasAffectedPackages() bool {
	if o != nil && !IsNil(o.AffectedPackages) {
		return true
	}

	return false
}

// SetAffectedPackages gets a reference to the given []AdvisoryAffectedUbuntuPackage and assigns it to the AffectedPackages field.
func (o *AdvisoryUbuntuCVE) SetAffectedPackages(v []AdvisoryAffectedUbuntuPackage) {
	o.AffectedPackages = v
}

// GetCve returns the Cve field value if set, zero value otherwise.
func (o *AdvisoryUbuntuCVE) GetCve() []string {
	if o == nil || IsNil(o.Cve) {
		var ret []string
		return ret
	}
	return o.Cve
}

// GetCveOk returns a tuple with the Cve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryUbuntuCVE) GetCveOk() ([]string, bool) {
	if o == nil || IsNil(o.Cve) {
		return nil, false
	}
	return o.Cve, true
}

// HasCve returns a boolean if a field has been set.
func (o *AdvisoryUbuntuCVE) HasCve() bool {
	if o != nil && !IsNil(o.Cve) {
		return true
	}

	return false
}

// SetCve gets a reference to the given []string and assigns it to the Cve field.
func (o *AdvisoryUbuntuCVE) SetCve(v []string) {
	o.Cve = v
}

// GetDateAdded returns the DateAdded field value if set, zero value otherwise.
func (o *AdvisoryUbuntuCVE) GetDateAdded() string {
	if o == nil || IsNil(o.DateAdded) {
		var ret string
		return ret
	}
	return *o.DateAdded
}

// GetDateAddedOk returns a tuple with the DateAdded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryUbuntuCVE) GetDateAddedOk() (*string, bool) {
	if o == nil || IsNil(o.DateAdded) {
		return nil, false
	}
	return o.DateAdded, true
}

// HasDateAdded returns a boolean if a field has been set.
func (o *AdvisoryUbuntuCVE) HasDateAdded() bool {
	if o != nil && !IsNil(o.DateAdded) {
		return true
	}

	return false
}

// SetDateAdded gets a reference to the given string and assigns it to the DateAdded field.
func (o *AdvisoryUbuntuCVE) SetDateAdded(v string) {
	o.DateAdded = &v
}

// GetReferenceUrls returns the ReferenceUrls field value if set, zero value otherwise.
func (o *AdvisoryUbuntuCVE) GetReferenceUrls() []string {
	if o == nil || IsNil(o.ReferenceUrls) {
		var ret []string
		return ret
	}
	return o.ReferenceUrls
}

// GetReferenceUrlsOk returns a tuple with the ReferenceUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryUbuntuCVE) GetReferenceUrlsOk() ([]string, bool) {
	if o == nil || IsNil(o.ReferenceUrls) {
		return nil, false
	}
	return o.ReferenceUrls, true
}

// HasReferenceUrls returns a boolean if a field has been set.
func (o *AdvisoryUbuntuCVE) HasReferenceUrls() bool {
	if o != nil && !IsNil(o.ReferenceUrls) {
		return true
	}

	return false
}

// SetReferenceUrls gets a reference to the given []string and assigns it to the ReferenceUrls field.
func (o *AdvisoryUbuntuCVE) SetReferenceUrls(v []string) {
	o.ReferenceUrls = v
}

// GetSourceUrl returns the SourceUrl field value if set, zero value otherwise.
func (o *AdvisoryUbuntuCVE) GetSourceUrl() string {
	if o == nil || IsNil(o.SourceUrl) {
		var ret string
		return ret
	}
	return *o.SourceUrl
}

// GetSourceUrlOk returns a tuple with the SourceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryUbuntuCVE) GetSourceUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SourceUrl) {
		return nil, false
	}
	return o.SourceUrl, true
}

// HasSourceUrl returns a boolean if a field has been set.
func (o *AdvisoryUbuntuCVE) HasSourceUrl() bool {
	if o != nil && !IsNil(o.SourceUrl) {
		return true
	}

	return false
}

// SetSourceUrl gets a reference to the given string and assigns it to the SourceUrl field.
func (o *AdvisoryUbuntuCVE) SetSourceUrl(v string) {
	o.SourceUrl = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AdvisoryUbuntuCVE) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryUbuntuCVE) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AdvisoryUbuntuCVE) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *AdvisoryUbuntuCVE) SetStatus(v string) {
	o.Status = &v
}

// GetUbuntuUrl returns the UbuntuUrl field value if set, zero value otherwise.
func (o *AdvisoryUbuntuCVE) GetUbuntuUrl() string {
	if o == nil || IsNil(o.UbuntuUrl) {
		var ret string
		return ret
	}
	return *o.UbuntuUrl
}

// GetUbuntuUrlOk returns a tuple with the UbuntuUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryUbuntuCVE) GetUbuntuUrlOk() (*string, bool) {
	if o == nil || IsNil(o.UbuntuUrl) {
		return nil, false
	}
	return o.UbuntuUrl, true
}

// HasUbuntuUrl returns a boolean if a field has been set.
func (o *AdvisoryUbuntuCVE) HasUbuntuUrl() bool {
	if o != nil && !IsNil(o.UbuntuUrl) {
		return true
	}

	return false
}

// SetUbuntuUrl gets a reference to the given string and assigns it to the UbuntuUrl field.
func (o *AdvisoryUbuntuCVE) SetUbuntuUrl(v string) {
	o.UbuntuUrl = &v
}

// GetUsn returns the Usn field value if set, zero value otherwise.
func (o *AdvisoryUbuntuCVE) GetUsn() []string {
	if o == nil || IsNil(o.Usn) {
		var ret []string
		return ret
	}
	return o.Usn
}

// GetUsnOk returns a tuple with the Usn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryUbuntuCVE) GetUsnOk() ([]string, bool) {
	if o == nil || IsNil(o.Usn) {
		return nil, false
	}
	return o.Usn, true
}

// HasUsn returns a boolean if a field has been set.
func (o *AdvisoryUbuntuCVE) HasUsn() bool {
	if o != nil && !IsNil(o.Usn) {
		return true
	}

	return false
}

// SetUsn gets a reference to the given []string and assigns it to the Usn field.
func (o *AdvisoryUbuntuCVE) SetUsn(v []string) {
	o.Usn = v
}

func (o AdvisoryUbuntuCVE) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryUbuntuCVE) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AffectedPackages) {
		toSerialize["affected_packages"] = o.AffectedPackages
	}
	if !IsNil(o.Cve) {
		toSerialize["cve"] = o.Cve
	}
	if !IsNil(o.DateAdded) {
		toSerialize["date_added"] = o.DateAdded
	}
	if !IsNil(o.ReferenceUrls) {
		toSerialize["reference_urls"] = o.ReferenceUrls
	}
	if !IsNil(o.SourceUrl) {
		toSerialize["source_url"] = o.SourceUrl
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.UbuntuUrl) {
		toSerialize["ubuntu_url"] = o.UbuntuUrl
	}
	if !IsNil(o.Usn) {
		toSerialize["usn"] = o.Usn
	}
	return toSerialize, nil
}

type NullableAdvisoryUbuntuCVE struct {
	value *AdvisoryUbuntuCVE
	isSet bool
}

func (v NullableAdvisoryUbuntuCVE) Get() *AdvisoryUbuntuCVE {
	return v.value
}

func (v *NullableAdvisoryUbuntuCVE) Set(val *AdvisoryUbuntuCVE) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryUbuntuCVE) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryUbuntuCVE) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryUbuntuCVE(val *AdvisoryUbuntuCVE) *NullableAdvisoryUbuntuCVE {
	return &NullableAdvisoryUbuntuCVE{value: val, isSet: true}
}

func (v NullableAdvisoryUbuntuCVE) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryUbuntuCVE) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


