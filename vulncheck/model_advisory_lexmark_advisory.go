/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryLexmarkAdvisory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryLexmarkAdvisory{}

// AdvisoryLexmarkAdvisory struct for AdvisoryLexmarkAdvisory
type AdvisoryLexmarkAdvisory struct {
	AffectedProducts []AdvisoryAffectedProduct `json:"affectedProducts,omitempty"`
	Cve []string `json:"cve,omitempty"`
	DateAdded *string `json:"date_added,omitempty"`
	Details *string `json:"details,omitempty"`
	Impact *string `json:"impact,omitempty"`
	LastUpdate *string `json:"lastUpdate,omitempty"`
	Link *string `json:"link,omitempty"`
	PublicReleaseDate *string `json:"publicReleaseDate,omitempty"`
	References []string `json:"references,omitempty"`
	Revision *string `json:"revision,omitempty"`
	Summary *string `json:"summary,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	Workarounds *string `json:"workarounds,omitempty"`
}

// NewAdvisoryLexmarkAdvisory instantiates a new AdvisoryLexmarkAdvisory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryLexmarkAdvisory() *AdvisoryLexmarkAdvisory {
	this := AdvisoryLexmarkAdvisory{}
	return &this
}

// NewAdvisoryLexmarkAdvisoryWithDefaults instantiates a new AdvisoryLexmarkAdvisory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryLexmarkAdvisoryWithDefaults() *AdvisoryLexmarkAdvisory {
	this := AdvisoryLexmarkAdvisory{}
	return &this
}

// GetAffectedProducts returns the AffectedProducts field value if set, zero value otherwise.
func (o *AdvisoryLexmarkAdvisory) GetAffectedProducts() []AdvisoryAffectedProduct {
	if o == nil || IsNil(o.AffectedProducts) {
		var ret []AdvisoryAffectedProduct
		return ret
	}
	return o.AffectedProducts
}

// GetAffectedProductsOk returns a tuple with the AffectedProducts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryLexmarkAdvisory) GetAffectedProductsOk() ([]AdvisoryAffectedProduct, bool) {
	if o == nil || IsNil(o.AffectedProducts) {
		return nil, false
	}
	return o.AffectedProducts, true
}

// HasAffectedProducts returns a boolean if a field has been set.
func (o *AdvisoryLexmarkAdvisory) HasAffectedProducts() bool {
	if o != nil && !IsNil(o.AffectedProducts) {
		return true
	}

	return false
}

// SetAffectedProducts gets a reference to the given []AdvisoryAffectedProduct and assigns it to the AffectedProducts field.
func (o *AdvisoryLexmarkAdvisory) SetAffectedProducts(v []AdvisoryAffectedProduct) {
	o.AffectedProducts = v
}

// GetCve returns the Cve field value if set, zero value otherwise.
func (o *AdvisoryLexmarkAdvisory) GetCve() []string {
	if o == nil || IsNil(o.Cve) {
		var ret []string
		return ret
	}
	return o.Cve
}

// GetCveOk returns a tuple with the Cve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryLexmarkAdvisory) GetCveOk() ([]string, bool) {
	if o == nil || IsNil(o.Cve) {
		return nil, false
	}
	return o.Cve, true
}

// HasCve returns a boolean if a field has been set.
func (o *AdvisoryLexmarkAdvisory) HasCve() bool {
	if o != nil && !IsNil(o.Cve) {
		return true
	}

	return false
}

// SetCve gets a reference to the given []string and assigns it to the Cve field.
func (o *AdvisoryLexmarkAdvisory) SetCve(v []string) {
	o.Cve = v
}

// GetDateAdded returns the DateAdded field value if set, zero value otherwise.
func (o *AdvisoryLexmarkAdvisory) GetDateAdded() string {
	if o == nil || IsNil(o.DateAdded) {
		var ret string
		return ret
	}
	return *o.DateAdded
}

// GetDateAddedOk returns a tuple with the DateAdded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryLexmarkAdvisory) GetDateAddedOk() (*string, bool) {
	if o == nil || IsNil(o.DateAdded) {
		return nil, false
	}
	return o.DateAdded, true
}

// HasDateAdded returns a boolean if a field has been set.
func (o *AdvisoryLexmarkAdvisory) HasDateAdded() bool {
	if o != nil && !IsNil(o.DateAdded) {
		return true
	}

	return false
}

// SetDateAdded gets a reference to the given string and assigns it to the DateAdded field.
func (o *AdvisoryLexmarkAdvisory) SetDateAdded(v string) {
	o.DateAdded = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *AdvisoryLexmarkAdvisory) GetDetails() string {
	if o == nil || IsNil(o.Details) {
		var ret string
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryLexmarkAdvisory) GetDetailsOk() (*string, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *AdvisoryLexmarkAdvisory) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given string and assigns it to the Details field.
func (o *AdvisoryLexmarkAdvisory) SetDetails(v string) {
	o.Details = &v
}

// GetImpact returns the Impact field value if set, zero value otherwise.
func (o *AdvisoryLexmarkAdvisory) GetImpact() string {
	if o == nil || IsNil(o.Impact) {
		var ret string
		return ret
	}
	return *o.Impact
}

// GetImpactOk returns a tuple with the Impact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryLexmarkAdvisory) GetImpactOk() (*string, bool) {
	if o == nil || IsNil(o.Impact) {
		return nil, false
	}
	return o.Impact, true
}

// HasImpact returns a boolean if a field has been set.
func (o *AdvisoryLexmarkAdvisory) HasImpact() bool {
	if o != nil && !IsNil(o.Impact) {
		return true
	}

	return false
}

// SetImpact gets a reference to the given string and assigns it to the Impact field.
func (o *AdvisoryLexmarkAdvisory) SetImpact(v string) {
	o.Impact = &v
}

// GetLastUpdate returns the LastUpdate field value if set, zero value otherwise.
func (o *AdvisoryLexmarkAdvisory) GetLastUpdate() string {
	if o == nil || IsNil(o.LastUpdate) {
		var ret string
		return ret
	}
	return *o.LastUpdate
}

// GetLastUpdateOk returns a tuple with the LastUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryLexmarkAdvisory) GetLastUpdateOk() (*string, bool) {
	if o == nil || IsNil(o.LastUpdate) {
		return nil, false
	}
	return o.LastUpdate, true
}

// HasLastUpdate returns a boolean if a field has been set.
func (o *AdvisoryLexmarkAdvisory) HasLastUpdate() bool {
	if o != nil && !IsNil(o.LastUpdate) {
		return true
	}

	return false
}

// SetLastUpdate gets a reference to the given string and assigns it to the LastUpdate field.
func (o *AdvisoryLexmarkAdvisory) SetLastUpdate(v string) {
	o.LastUpdate = &v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *AdvisoryLexmarkAdvisory) GetLink() string {
	if o == nil || IsNil(o.Link) {
		var ret string
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryLexmarkAdvisory) GetLinkOk() (*string, bool) {
	if o == nil || IsNil(o.Link) {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *AdvisoryLexmarkAdvisory) HasLink() bool {
	if o != nil && !IsNil(o.Link) {
		return true
	}

	return false
}

// SetLink gets a reference to the given string and assigns it to the Link field.
func (o *AdvisoryLexmarkAdvisory) SetLink(v string) {
	o.Link = &v
}

// GetPublicReleaseDate returns the PublicReleaseDate field value if set, zero value otherwise.
func (o *AdvisoryLexmarkAdvisory) GetPublicReleaseDate() string {
	if o == nil || IsNil(o.PublicReleaseDate) {
		var ret string
		return ret
	}
	return *o.PublicReleaseDate
}

// GetPublicReleaseDateOk returns a tuple with the PublicReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryLexmarkAdvisory) GetPublicReleaseDateOk() (*string, bool) {
	if o == nil || IsNil(o.PublicReleaseDate) {
		return nil, false
	}
	return o.PublicReleaseDate, true
}

// HasPublicReleaseDate returns a boolean if a field has been set.
func (o *AdvisoryLexmarkAdvisory) HasPublicReleaseDate() bool {
	if o != nil && !IsNil(o.PublicReleaseDate) {
		return true
	}

	return false
}

// SetPublicReleaseDate gets a reference to the given string and assigns it to the PublicReleaseDate field.
func (o *AdvisoryLexmarkAdvisory) SetPublicReleaseDate(v string) {
	o.PublicReleaseDate = &v
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *AdvisoryLexmarkAdvisory) GetReferences() []string {
	if o == nil || IsNil(o.References) {
		var ret []string
		return ret
	}
	return o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryLexmarkAdvisory) GetReferencesOk() ([]string, bool) {
	if o == nil || IsNil(o.References) {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *AdvisoryLexmarkAdvisory) HasReferences() bool {
	if o != nil && !IsNil(o.References) {
		return true
	}

	return false
}

// SetReferences gets a reference to the given []string and assigns it to the References field.
func (o *AdvisoryLexmarkAdvisory) SetReferences(v []string) {
	o.References = v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *AdvisoryLexmarkAdvisory) GetRevision() string {
	if o == nil || IsNil(o.Revision) {
		var ret string
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryLexmarkAdvisory) GetRevisionOk() (*string, bool) {
	if o == nil || IsNil(o.Revision) {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *AdvisoryLexmarkAdvisory) HasRevision() bool {
	if o != nil && !IsNil(o.Revision) {
		return true
	}

	return false
}

// SetRevision gets a reference to the given string and assigns it to the Revision field.
func (o *AdvisoryLexmarkAdvisory) SetRevision(v string) {
	o.Revision = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *AdvisoryLexmarkAdvisory) GetSummary() string {
	if o == nil || IsNil(o.Summary) {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryLexmarkAdvisory) GetSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *AdvisoryLexmarkAdvisory) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *AdvisoryLexmarkAdvisory) SetSummary(v string) {
	o.Summary = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *AdvisoryLexmarkAdvisory) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryLexmarkAdvisory) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *AdvisoryLexmarkAdvisory) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *AdvisoryLexmarkAdvisory) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetWorkarounds returns the Workarounds field value if set, zero value otherwise.
func (o *AdvisoryLexmarkAdvisory) GetWorkarounds() string {
	if o == nil || IsNil(o.Workarounds) {
		var ret string
		return ret
	}
	return *o.Workarounds
}

// GetWorkaroundsOk returns a tuple with the Workarounds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryLexmarkAdvisory) GetWorkaroundsOk() (*string, bool) {
	if o == nil || IsNil(o.Workarounds) {
		return nil, false
	}
	return o.Workarounds, true
}

// HasWorkarounds returns a boolean if a field has been set.
func (o *AdvisoryLexmarkAdvisory) HasWorkarounds() bool {
	if o != nil && !IsNil(o.Workarounds) {
		return true
	}

	return false
}

// SetWorkarounds gets a reference to the given string and assigns it to the Workarounds field.
func (o *AdvisoryLexmarkAdvisory) SetWorkarounds(v string) {
	o.Workarounds = &v
}

func (o AdvisoryLexmarkAdvisory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryLexmarkAdvisory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AffectedProducts) {
		toSerialize["affectedProducts"] = o.AffectedProducts
	}
	if !IsNil(o.Cve) {
		toSerialize["cve"] = o.Cve
	}
	if !IsNil(o.DateAdded) {
		toSerialize["date_added"] = o.DateAdded
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.Impact) {
		toSerialize["impact"] = o.Impact
	}
	if !IsNil(o.LastUpdate) {
		toSerialize["lastUpdate"] = o.LastUpdate
	}
	if !IsNil(o.Link) {
		toSerialize["link"] = o.Link
	}
	if !IsNil(o.PublicReleaseDate) {
		toSerialize["publicReleaseDate"] = o.PublicReleaseDate
	}
	if !IsNil(o.References) {
		toSerialize["references"] = o.References
	}
	if !IsNil(o.Revision) {
		toSerialize["revision"] = o.Revision
	}
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Workarounds) {
		toSerialize["workarounds"] = o.Workarounds
	}
	return toSerialize, nil
}

type NullableAdvisoryLexmarkAdvisory struct {
	value *AdvisoryLexmarkAdvisory
	isSet bool
}

func (v NullableAdvisoryLexmarkAdvisory) Get() *AdvisoryLexmarkAdvisory {
	return v.value
}

func (v *NullableAdvisoryLexmarkAdvisory) Set(val *AdvisoryLexmarkAdvisory) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryLexmarkAdvisory) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryLexmarkAdvisory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryLexmarkAdvisory(val *AdvisoryLexmarkAdvisory) *NullableAdvisoryLexmarkAdvisory {
	return &NullableAdvisoryLexmarkAdvisory{value: val, isSet: true}
}

func (v NullableAdvisoryLexmarkAdvisory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryLexmarkAdvisory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


