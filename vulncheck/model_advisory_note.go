/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryNote type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryNote{}

// AdvisoryNote struct for AdvisoryNote
type AdvisoryNote struct {
	Ordinal *string `json:"ordinal,omitempty"`
	Text *string `json:"text,omitempty"`
	Title *string `json:"title,omitempty"`
	Type *int32 `json:"type,omitempty"`
}

// NewAdvisoryNote instantiates a new AdvisoryNote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryNote() *AdvisoryNote {
	this := AdvisoryNote{}
	return &this
}

// NewAdvisoryNoteWithDefaults instantiates a new AdvisoryNote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryNoteWithDefaults() *AdvisoryNote {
	this := AdvisoryNote{}
	return &this
}

// GetOrdinal returns the Ordinal field value if set, zero value otherwise.
func (o *AdvisoryNote) GetOrdinal() string {
	if o == nil || IsNil(o.Ordinal) {
		var ret string
		return ret
	}
	return *o.Ordinal
}

// GetOrdinalOk returns a tuple with the Ordinal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryNote) GetOrdinalOk() (*string, bool) {
	if o == nil || IsNil(o.Ordinal) {
		return nil, false
	}
	return o.Ordinal, true
}

// HasOrdinal returns a boolean if a field has been set.
func (o *AdvisoryNote) HasOrdinal() bool {
	if o != nil && !IsNil(o.Ordinal) {
		return true
	}

	return false
}

// SetOrdinal gets a reference to the given string and assigns it to the Ordinal field.
func (o *AdvisoryNote) SetOrdinal(v string) {
	o.Ordinal = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *AdvisoryNote) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryNote) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *AdvisoryNote) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *AdvisoryNote) SetText(v string) {
	o.Text = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *AdvisoryNote) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryNote) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *AdvisoryNote) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *AdvisoryNote) SetTitle(v string) {
	o.Title = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AdvisoryNote) GetType() int32 {
	if o == nil || IsNil(o.Type) {
		var ret int32
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryNote) GetTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AdvisoryNote) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given int32 and assigns it to the Type field.
func (o *AdvisoryNote) SetType(v int32) {
	o.Type = &v
}

func (o AdvisoryNote) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryNote) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ordinal) {
		toSerialize["ordinal"] = o.Ordinal
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableAdvisoryNote struct {
	value *AdvisoryNote
	isSet bool
}

func (v NullableAdvisoryNote) Get() *AdvisoryNote {
	return v.value
}

func (v *NullableAdvisoryNote) Set(val *AdvisoryNote) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryNote) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryNote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryNote(val *AdvisoryNote) *NullableAdvisoryNote {
	return &NullableAdvisoryNote{value: val, isSet: true}
}

func (v NullableAdvisoryNote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryNote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


