/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisorySiemensReferences type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisorySiemensReferences{}

// AdvisorySiemensReferences struct for AdvisorySiemensReferences
type AdvisorySiemensReferences struct {
	Category *string `json:"category,omitempty"`
	Summary *string `json:"summary,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewAdvisorySiemensReferences instantiates a new AdvisorySiemensReferences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisorySiemensReferences() *AdvisorySiemensReferences {
	this := AdvisorySiemensReferences{}
	return &this
}

// NewAdvisorySiemensReferencesWithDefaults instantiates a new AdvisorySiemensReferences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisorySiemensReferencesWithDefaults() *AdvisorySiemensReferences {
	this := AdvisorySiemensReferences{}
	return &this
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *AdvisorySiemensReferences) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisorySiemensReferences) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *AdvisorySiemensReferences) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *AdvisorySiemensReferences) SetCategory(v string) {
	o.Category = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *AdvisorySiemensReferences) GetSummary() string {
	if o == nil || IsNil(o.Summary) {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisorySiemensReferences) GetSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *AdvisorySiemensReferences) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *AdvisorySiemensReferences) SetSummary(v string) {
	o.Summary = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *AdvisorySiemensReferences) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisorySiemensReferences) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *AdvisorySiemensReferences) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *AdvisorySiemensReferences) SetUrl(v string) {
	o.Url = &v
}

func (o AdvisorySiemensReferences) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisorySiemensReferences) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableAdvisorySiemensReferences struct {
	value *AdvisorySiemensReferences
	isSet bool
}

func (v NullableAdvisorySiemensReferences) Get() *AdvisorySiemensReferences {
	return v.value
}

func (v *NullableAdvisorySiemensReferences) Set(val *AdvisorySiemensReferences) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisorySiemensReferences) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisorySiemensReferences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisorySiemensReferences(val *AdvisorySiemensReferences) *NullableAdvisorySiemensReferences {
	return &NullableAdvisorySiemensReferences{value: val, isSet: true}
}

func (v NullableAdvisorySiemensReferences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisorySiemensReferences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


