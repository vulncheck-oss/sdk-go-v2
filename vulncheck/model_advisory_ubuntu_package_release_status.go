/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryUbuntuPackageReleaseStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryUbuntuPackageReleaseStatus{}

// AdvisoryUbuntuPackageReleaseStatus struct for AdvisoryUbuntuPackageReleaseStatus
type AdvisoryUbuntuPackageReleaseStatus struct {
	Affected *bool `json:"affected,omitempty"`
	Fixed *bool `json:"fixed,omitempty"`
	FixedVersion *string `json:"fixed_version,omitempty"`
	Lts *bool `json:"lts,omitempty"`
	Release *string `json:"release,omitempty"`
	ReleaseLong *string `json:"release_long,omitempty"`
	ReleaseVersion *string `json:"release_version,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewAdvisoryUbuntuPackageReleaseStatus instantiates a new AdvisoryUbuntuPackageReleaseStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryUbuntuPackageReleaseStatus() *AdvisoryUbuntuPackageReleaseStatus {
	this := AdvisoryUbuntuPackageReleaseStatus{}
	return &this
}

// NewAdvisoryUbuntuPackageReleaseStatusWithDefaults instantiates a new AdvisoryUbuntuPackageReleaseStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryUbuntuPackageReleaseStatusWithDefaults() *AdvisoryUbuntuPackageReleaseStatus {
	this := AdvisoryUbuntuPackageReleaseStatus{}
	return &this
}

// GetAffected returns the Affected field value if set, zero value otherwise.
func (o *AdvisoryUbuntuPackageReleaseStatus) GetAffected() bool {
	if o == nil || IsNil(o.Affected) {
		var ret bool
		return ret
	}
	return *o.Affected
}

// GetAffectedOk returns a tuple with the Affected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryUbuntuPackageReleaseStatus) GetAffectedOk() (*bool, bool) {
	if o == nil || IsNil(o.Affected) {
		return nil, false
	}
	return o.Affected, true
}

// HasAffected returns a boolean if a field has been set.
func (o *AdvisoryUbuntuPackageReleaseStatus) HasAffected() bool {
	if o != nil && !IsNil(o.Affected) {
		return true
	}

	return false
}

// SetAffected gets a reference to the given bool and assigns it to the Affected field.
func (o *AdvisoryUbuntuPackageReleaseStatus) SetAffected(v bool) {
	o.Affected = &v
}

// GetFixed returns the Fixed field value if set, zero value otherwise.
func (o *AdvisoryUbuntuPackageReleaseStatus) GetFixed() bool {
	if o == nil || IsNil(o.Fixed) {
		var ret bool
		return ret
	}
	return *o.Fixed
}

// GetFixedOk returns a tuple with the Fixed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryUbuntuPackageReleaseStatus) GetFixedOk() (*bool, bool) {
	if o == nil || IsNil(o.Fixed) {
		return nil, false
	}
	return o.Fixed, true
}

// HasFixed returns a boolean if a field has been set.
func (o *AdvisoryUbuntuPackageReleaseStatus) HasFixed() bool {
	if o != nil && !IsNil(o.Fixed) {
		return true
	}

	return false
}

// SetFixed gets a reference to the given bool and assigns it to the Fixed field.
func (o *AdvisoryUbuntuPackageReleaseStatus) SetFixed(v bool) {
	o.Fixed = &v
}

// GetFixedVersion returns the FixedVersion field value if set, zero value otherwise.
func (o *AdvisoryUbuntuPackageReleaseStatus) GetFixedVersion() string {
	if o == nil || IsNil(o.FixedVersion) {
		var ret string
		return ret
	}
	return *o.FixedVersion
}

// GetFixedVersionOk returns a tuple with the FixedVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryUbuntuPackageReleaseStatus) GetFixedVersionOk() (*string, bool) {
	if o == nil || IsNil(o.FixedVersion) {
		return nil, false
	}
	return o.FixedVersion, true
}

// HasFixedVersion returns a boolean if a field has been set.
func (o *AdvisoryUbuntuPackageReleaseStatus) HasFixedVersion() bool {
	if o != nil && !IsNil(o.FixedVersion) {
		return true
	}

	return false
}

// SetFixedVersion gets a reference to the given string and assigns it to the FixedVersion field.
func (o *AdvisoryUbuntuPackageReleaseStatus) SetFixedVersion(v string) {
	o.FixedVersion = &v
}

// GetLts returns the Lts field value if set, zero value otherwise.
func (o *AdvisoryUbuntuPackageReleaseStatus) GetLts() bool {
	if o == nil || IsNil(o.Lts) {
		var ret bool
		return ret
	}
	return *o.Lts
}

// GetLtsOk returns a tuple with the Lts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryUbuntuPackageReleaseStatus) GetLtsOk() (*bool, bool) {
	if o == nil || IsNil(o.Lts) {
		return nil, false
	}
	return o.Lts, true
}

// HasLts returns a boolean if a field has been set.
func (o *AdvisoryUbuntuPackageReleaseStatus) HasLts() bool {
	if o != nil && !IsNil(o.Lts) {
		return true
	}

	return false
}

// SetLts gets a reference to the given bool and assigns it to the Lts field.
func (o *AdvisoryUbuntuPackageReleaseStatus) SetLts(v bool) {
	o.Lts = &v
}

// GetRelease returns the Release field value if set, zero value otherwise.
func (o *AdvisoryUbuntuPackageReleaseStatus) GetRelease() string {
	if o == nil || IsNil(o.Release) {
		var ret string
		return ret
	}
	return *o.Release
}

// GetReleaseOk returns a tuple with the Release field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryUbuntuPackageReleaseStatus) GetReleaseOk() (*string, bool) {
	if o == nil || IsNil(o.Release) {
		return nil, false
	}
	return o.Release, true
}

// HasRelease returns a boolean if a field has been set.
func (o *AdvisoryUbuntuPackageReleaseStatus) HasRelease() bool {
	if o != nil && !IsNil(o.Release) {
		return true
	}

	return false
}

// SetRelease gets a reference to the given string and assigns it to the Release field.
func (o *AdvisoryUbuntuPackageReleaseStatus) SetRelease(v string) {
	o.Release = &v
}

// GetReleaseLong returns the ReleaseLong field value if set, zero value otherwise.
func (o *AdvisoryUbuntuPackageReleaseStatus) GetReleaseLong() string {
	if o == nil || IsNil(o.ReleaseLong) {
		var ret string
		return ret
	}
	return *o.ReleaseLong
}

// GetReleaseLongOk returns a tuple with the ReleaseLong field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryUbuntuPackageReleaseStatus) GetReleaseLongOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseLong) {
		return nil, false
	}
	return o.ReleaseLong, true
}

// HasReleaseLong returns a boolean if a field has been set.
func (o *AdvisoryUbuntuPackageReleaseStatus) HasReleaseLong() bool {
	if o != nil && !IsNil(o.ReleaseLong) {
		return true
	}

	return false
}

// SetReleaseLong gets a reference to the given string and assigns it to the ReleaseLong field.
func (o *AdvisoryUbuntuPackageReleaseStatus) SetReleaseLong(v string) {
	o.ReleaseLong = &v
}

// GetReleaseVersion returns the ReleaseVersion field value if set, zero value otherwise.
func (o *AdvisoryUbuntuPackageReleaseStatus) GetReleaseVersion() string {
	if o == nil || IsNil(o.ReleaseVersion) {
		var ret string
		return ret
	}
	return *o.ReleaseVersion
}

// GetReleaseVersionOk returns a tuple with the ReleaseVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryUbuntuPackageReleaseStatus) GetReleaseVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseVersion) {
		return nil, false
	}
	return o.ReleaseVersion, true
}

// HasReleaseVersion returns a boolean if a field has been set.
func (o *AdvisoryUbuntuPackageReleaseStatus) HasReleaseVersion() bool {
	if o != nil && !IsNil(o.ReleaseVersion) {
		return true
	}

	return false
}

// SetReleaseVersion gets a reference to the given string and assigns it to the ReleaseVersion field.
func (o *AdvisoryUbuntuPackageReleaseStatus) SetReleaseVersion(v string) {
	o.ReleaseVersion = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AdvisoryUbuntuPackageReleaseStatus) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryUbuntuPackageReleaseStatus) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AdvisoryUbuntuPackageReleaseStatus) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *AdvisoryUbuntuPackageReleaseStatus) SetStatus(v string) {
	o.Status = &v
}

func (o AdvisoryUbuntuPackageReleaseStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryUbuntuPackageReleaseStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Affected) {
		toSerialize["affected"] = o.Affected
	}
	if !IsNil(o.Fixed) {
		toSerialize["fixed"] = o.Fixed
	}
	if !IsNil(o.FixedVersion) {
		toSerialize["fixed_version"] = o.FixedVersion
	}
	if !IsNil(o.Lts) {
		toSerialize["lts"] = o.Lts
	}
	if !IsNil(o.Release) {
		toSerialize["release"] = o.Release
	}
	if !IsNil(o.ReleaseLong) {
		toSerialize["release_long"] = o.ReleaseLong
	}
	if !IsNil(o.ReleaseVersion) {
		toSerialize["release_version"] = o.ReleaseVersion
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableAdvisoryUbuntuPackageReleaseStatus struct {
	value *AdvisoryUbuntuPackageReleaseStatus
	isSet bool
}

func (v NullableAdvisoryUbuntuPackageReleaseStatus) Get() *AdvisoryUbuntuPackageReleaseStatus {
	return v.value
}

func (v *NullableAdvisoryUbuntuPackageReleaseStatus) Set(val *AdvisoryUbuntuPackageReleaseStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryUbuntuPackageReleaseStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryUbuntuPackageReleaseStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryUbuntuPackageReleaseStatus(val *AdvisoryUbuntuPackageReleaseStatus) *NullableAdvisoryUbuntuPackageReleaseStatus {
	return &NullableAdvisoryUbuntuPackageReleaseStatus{value: val, isSet: true}
}

func (v NullableAdvisoryUbuntuPackageReleaseStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryUbuntuPackageReleaseStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


