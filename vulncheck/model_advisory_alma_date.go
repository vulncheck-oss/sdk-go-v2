/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryAlmaDate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryAlmaDate{}

// AdvisoryAlmaDate struct for AdvisoryAlmaDate
type AdvisoryAlmaDate struct {
	Date *int32 `json:"$date,omitempty"`
}

// NewAdvisoryAlmaDate instantiates a new AdvisoryAlmaDate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryAlmaDate() *AdvisoryAlmaDate {
	this := AdvisoryAlmaDate{}
	return &this
}

// NewAdvisoryAlmaDateWithDefaults instantiates a new AdvisoryAlmaDate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryAlmaDateWithDefaults() *AdvisoryAlmaDate {
	this := AdvisoryAlmaDate{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *AdvisoryAlmaDate) GetDate() int32 {
	if o == nil || IsNil(o.Date) {
		var ret int32
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryAlmaDate) GetDateOk() (*int32, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *AdvisoryAlmaDate) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given int32 and assigns it to the Date field.
func (o *AdvisoryAlmaDate) SetDate(v int32) {
	o.Date = &v
}

func (o AdvisoryAlmaDate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryAlmaDate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Date) {
		toSerialize["$date"] = o.Date
	}
	return toSerialize, nil
}

type NullableAdvisoryAlmaDate struct {
	value *AdvisoryAlmaDate
	isSet bool
}

func (v NullableAdvisoryAlmaDate) Get() *AdvisoryAlmaDate {
	return v.value
}

func (v *NullableAdvisoryAlmaDate) Set(val *AdvisoryAlmaDate) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryAlmaDate) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryAlmaDate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryAlmaDate(val *AdvisoryAlmaDate) *NullableAdvisoryAlmaDate {
	return &NullableAdvisoryAlmaDate{value: val, isSet: true}
}

func (v NullableAdvisoryAlmaDate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryAlmaDate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


