/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryEcoSystem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryEcoSystem{}

// AdvisoryEcoSystem struct for AdvisoryEcoSystem
type AdvisoryEcoSystem struct {
	Severity *string `json:"severity,omitempty"`
	Spl *string `json:"spl,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewAdvisoryEcoSystem instantiates a new AdvisoryEcoSystem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryEcoSystem() *AdvisoryEcoSystem {
	this := AdvisoryEcoSystem{}
	return &this
}

// NewAdvisoryEcoSystemWithDefaults instantiates a new AdvisoryEcoSystem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryEcoSystemWithDefaults() *AdvisoryEcoSystem {
	this := AdvisoryEcoSystem{}
	return &this
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *AdvisoryEcoSystem) GetSeverity() string {
	if o == nil || IsNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryEcoSystem) GetSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *AdvisoryEcoSystem) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *AdvisoryEcoSystem) SetSeverity(v string) {
	o.Severity = &v
}

// GetSpl returns the Spl field value if set, zero value otherwise.
func (o *AdvisoryEcoSystem) GetSpl() string {
	if o == nil || IsNil(o.Spl) {
		var ret string
		return ret
	}
	return *o.Spl
}

// GetSplOk returns a tuple with the Spl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryEcoSystem) GetSplOk() (*string, bool) {
	if o == nil || IsNil(o.Spl) {
		return nil, false
	}
	return o.Spl, true
}

// HasSpl returns a boolean if a field has been set.
func (o *AdvisoryEcoSystem) HasSpl() bool {
	if o != nil && !IsNil(o.Spl) {
		return true
	}

	return false
}

// SetSpl gets a reference to the given string and assigns it to the Spl field.
func (o *AdvisoryEcoSystem) SetSpl(v string) {
	o.Spl = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AdvisoryEcoSystem) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryEcoSystem) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AdvisoryEcoSystem) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AdvisoryEcoSystem) SetType(v string) {
	o.Type = &v
}

func (o AdvisoryEcoSystem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryEcoSystem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.Spl) {
		toSerialize["spl"] = o.Spl
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableAdvisoryEcoSystem struct {
	value *AdvisoryEcoSystem
	isSet bool
}

func (v NullableAdvisoryEcoSystem) Get() *AdvisoryEcoSystem {
	return v.value
}

func (v *NullableAdvisoryEcoSystem) Set(val *AdvisoryEcoSystem) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryEcoSystem) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryEcoSystem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryEcoSystem(val *AdvisoryEcoSystem) *NullableAdvisoryEcoSystem {
	return &NullableAdvisoryEcoSystem{value: val, isSet: true}
}

func (v NullableAdvisoryEcoSystem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryEcoSystem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


