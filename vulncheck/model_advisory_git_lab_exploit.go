/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryGitLabExploit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryGitLabExploit{}

// AdvisoryGitLabExploit struct for AdvisoryGitLabExploit
type AdvisoryGitLabExploit struct {
	CloneHttpsUrl *string `json:"clone_https_url,omitempty"`
	CloneSshUrl *string `json:"clone_ssh_url,omitempty"`
	CloneSshUrlCached *string `json:"clone_ssh_url_cached,omitempty"`
	Cve *string `json:"cve,omitempty"`
	DateAdded *string `json:"date_added,omitempty"`
	DateLastRevised *string `json:"date_last_revised,omitempty"`
	ExploitType *string `json:"exploit_type,omitempty"`
	Forks *int32 `json:"forks,omitempty"`
	HtmlUrl *string `json:"html_url,omitempty"`
	Language *string `json:"language,omitempty"`
	ReferenceUrl *string `json:"reference_url,omitempty"`
	Refsource *string `json:"refsource,omitempty"`
	RepoFullPath *string `json:"repo_full_path,omitempty"`
	RepoId *string `json:"repo_id,omitempty"`
	RepoName *string `json:"repo_name,omitempty"`
	RepoOwner *string `json:"repo_owner,omitempty"`
	Stars *int32 `json:"stars,omitempty"`
}

// NewAdvisoryGitLabExploit instantiates a new AdvisoryGitLabExploit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryGitLabExploit() *AdvisoryGitLabExploit {
	this := AdvisoryGitLabExploit{}
	return &this
}

// NewAdvisoryGitLabExploitWithDefaults instantiates a new AdvisoryGitLabExploit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryGitLabExploitWithDefaults() *AdvisoryGitLabExploit {
	this := AdvisoryGitLabExploit{}
	return &this
}

// GetCloneHttpsUrl returns the CloneHttpsUrl field value if set, zero value otherwise.
func (o *AdvisoryGitLabExploit) GetCloneHttpsUrl() string {
	if o == nil || IsNil(o.CloneHttpsUrl) {
		var ret string
		return ret
	}
	return *o.CloneHttpsUrl
}

// GetCloneHttpsUrlOk returns a tuple with the CloneHttpsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitLabExploit) GetCloneHttpsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CloneHttpsUrl) {
		return nil, false
	}
	return o.CloneHttpsUrl, true
}

// HasCloneHttpsUrl returns a boolean if a field has been set.
func (o *AdvisoryGitLabExploit) HasCloneHttpsUrl() bool {
	if o != nil && !IsNil(o.CloneHttpsUrl) {
		return true
	}

	return false
}

// SetCloneHttpsUrl gets a reference to the given string and assigns it to the CloneHttpsUrl field.
func (o *AdvisoryGitLabExploit) SetCloneHttpsUrl(v string) {
	o.CloneHttpsUrl = &v
}

// GetCloneSshUrl returns the CloneSshUrl field value if set, zero value otherwise.
func (o *AdvisoryGitLabExploit) GetCloneSshUrl() string {
	if o == nil || IsNil(o.CloneSshUrl) {
		var ret string
		return ret
	}
	return *o.CloneSshUrl
}

// GetCloneSshUrlOk returns a tuple with the CloneSshUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitLabExploit) GetCloneSshUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CloneSshUrl) {
		return nil, false
	}
	return o.CloneSshUrl, true
}

// HasCloneSshUrl returns a boolean if a field has been set.
func (o *AdvisoryGitLabExploit) HasCloneSshUrl() bool {
	if o != nil && !IsNil(o.CloneSshUrl) {
		return true
	}

	return false
}

// SetCloneSshUrl gets a reference to the given string and assigns it to the CloneSshUrl field.
func (o *AdvisoryGitLabExploit) SetCloneSshUrl(v string) {
	o.CloneSshUrl = &v
}

// GetCloneSshUrlCached returns the CloneSshUrlCached field value if set, zero value otherwise.
func (o *AdvisoryGitLabExploit) GetCloneSshUrlCached() string {
	if o == nil || IsNil(o.CloneSshUrlCached) {
		var ret string
		return ret
	}
	return *o.CloneSshUrlCached
}

// GetCloneSshUrlCachedOk returns a tuple with the CloneSshUrlCached field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitLabExploit) GetCloneSshUrlCachedOk() (*string, bool) {
	if o == nil || IsNil(o.CloneSshUrlCached) {
		return nil, false
	}
	return o.CloneSshUrlCached, true
}

// HasCloneSshUrlCached returns a boolean if a field has been set.
func (o *AdvisoryGitLabExploit) HasCloneSshUrlCached() bool {
	if o != nil && !IsNil(o.CloneSshUrlCached) {
		return true
	}

	return false
}

// SetCloneSshUrlCached gets a reference to the given string and assigns it to the CloneSshUrlCached field.
func (o *AdvisoryGitLabExploit) SetCloneSshUrlCached(v string) {
	o.CloneSshUrlCached = &v
}

// GetCve returns the Cve field value if set, zero value otherwise.
func (o *AdvisoryGitLabExploit) GetCve() string {
	if o == nil || IsNil(o.Cve) {
		var ret string
		return ret
	}
	return *o.Cve
}

// GetCveOk returns a tuple with the Cve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitLabExploit) GetCveOk() (*string, bool) {
	if o == nil || IsNil(o.Cve) {
		return nil, false
	}
	return o.Cve, true
}

// HasCve returns a boolean if a field has been set.
func (o *AdvisoryGitLabExploit) HasCve() bool {
	if o != nil && !IsNil(o.Cve) {
		return true
	}

	return false
}

// SetCve gets a reference to the given string and assigns it to the Cve field.
func (o *AdvisoryGitLabExploit) SetCve(v string) {
	o.Cve = &v
}

// GetDateAdded returns the DateAdded field value if set, zero value otherwise.
func (o *AdvisoryGitLabExploit) GetDateAdded() string {
	if o == nil || IsNil(o.DateAdded) {
		var ret string
		return ret
	}
	return *o.DateAdded
}

// GetDateAddedOk returns a tuple with the DateAdded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitLabExploit) GetDateAddedOk() (*string, bool) {
	if o == nil || IsNil(o.DateAdded) {
		return nil, false
	}
	return o.DateAdded, true
}

// HasDateAdded returns a boolean if a field has been set.
func (o *AdvisoryGitLabExploit) HasDateAdded() bool {
	if o != nil && !IsNil(o.DateAdded) {
		return true
	}

	return false
}

// SetDateAdded gets a reference to the given string and assigns it to the DateAdded field.
func (o *AdvisoryGitLabExploit) SetDateAdded(v string) {
	o.DateAdded = &v
}

// GetDateLastRevised returns the DateLastRevised field value if set, zero value otherwise.
func (o *AdvisoryGitLabExploit) GetDateLastRevised() string {
	if o == nil || IsNil(o.DateLastRevised) {
		var ret string
		return ret
	}
	return *o.DateLastRevised
}

// GetDateLastRevisedOk returns a tuple with the DateLastRevised field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitLabExploit) GetDateLastRevisedOk() (*string, bool) {
	if o == nil || IsNil(o.DateLastRevised) {
		return nil, false
	}
	return o.DateLastRevised, true
}

// HasDateLastRevised returns a boolean if a field has been set.
func (o *AdvisoryGitLabExploit) HasDateLastRevised() bool {
	if o != nil && !IsNil(o.DateLastRevised) {
		return true
	}

	return false
}

// SetDateLastRevised gets a reference to the given string and assigns it to the DateLastRevised field.
func (o *AdvisoryGitLabExploit) SetDateLastRevised(v string) {
	o.DateLastRevised = &v
}

// GetExploitType returns the ExploitType field value if set, zero value otherwise.
func (o *AdvisoryGitLabExploit) GetExploitType() string {
	if o == nil || IsNil(o.ExploitType) {
		var ret string
		return ret
	}
	return *o.ExploitType
}

// GetExploitTypeOk returns a tuple with the ExploitType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitLabExploit) GetExploitTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ExploitType) {
		return nil, false
	}
	return o.ExploitType, true
}

// HasExploitType returns a boolean if a field has been set.
func (o *AdvisoryGitLabExploit) HasExploitType() bool {
	if o != nil && !IsNil(o.ExploitType) {
		return true
	}

	return false
}

// SetExploitType gets a reference to the given string and assigns it to the ExploitType field.
func (o *AdvisoryGitLabExploit) SetExploitType(v string) {
	o.ExploitType = &v
}

// GetForks returns the Forks field value if set, zero value otherwise.
func (o *AdvisoryGitLabExploit) GetForks() int32 {
	if o == nil || IsNil(o.Forks) {
		var ret int32
		return ret
	}
	return *o.Forks
}

// GetForksOk returns a tuple with the Forks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitLabExploit) GetForksOk() (*int32, bool) {
	if o == nil || IsNil(o.Forks) {
		return nil, false
	}
	return o.Forks, true
}

// HasForks returns a boolean if a field has been set.
func (o *AdvisoryGitLabExploit) HasForks() bool {
	if o != nil && !IsNil(o.Forks) {
		return true
	}

	return false
}

// SetForks gets a reference to the given int32 and assigns it to the Forks field.
func (o *AdvisoryGitLabExploit) SetForks(v int32) {
	o.Forks = &v
}

// GetHtmlUrl returns the HtmlUrl field value if set, zero value otherwise.
func (o *AdvisoryGitLabExploit) GetHtmlUrl() string {
	if o == nil || IsNil(o.HtmlUrl) {
		var ret string
		return ret
	}
	return *o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitLabExploit) GetHtmlUrlOk() (*string, bool) {
	if o == nil || IsNil(o.HtmlUrl) {
		return nil, false
	}
	return o.HtmlUrl, true
}

// HasHtmlUrl returns a boolean if a field has been set.
func (o *AdvisoryGitLabExploit) HasHtmlUrl() bool {
	if o != nil && !IsNil(o.HtmlUrl) {
		return true
	}

	return false
}

// SetHtmlUrl gets a reference to the given string and assigns it to the HtmlUrl field.
func (o *AdvisoryGitLabExploit) SetHtmlUrl(v string) {
	o.HtmlUrl = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *AdvisoryGitLabExploit) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitLabExploit) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *AdvisoryGitLabExploit) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *AdvisoryGitLabExploit) SetLanguage(v string) {
	o.Language = &v
}

// GetReferenceUrl returns the ReferenceUrl field value if set, zero value otherwise.
func (o *AdvisoryGitLabExploit) GetReferenceUrl() string {
	if o == nil || IsNil(o.ReferenceUrl) {
		var ret string
		return ret
	}
	return *o.ReferenceUrl
}

// GetReferenceUrlOk returns a tuple with the ReferenceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitLabExploit) GetReferenceUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ReferenceUrl) {
		return nil, false
	}
	return o.ReferenceUrl, true
}

// HasReferenceUrl returns a boolean if a field has been set.
func (o *AdvisoryGitLabExploit) HasReferenceUrl() bool {
	if o != nil && !IsNil(o.ReferenceUrl) {
		return true
	}

	return false
}

// SetReferenceUrl gets a reference to the given string and assigns it to the ReferenceUrl field.
func (o *AdvisoryGitLabExploit) SetReferenceUrl(v string) {
	o.ReferenceUrl = &v
}

// GetRefsource returns the Refsource field value if set, zero value otherwise.
func (o *AdvisoryGitLabExploit) GetRefsource() string {
	if o == nil || IsNil(o.Refsource) {
		var ret string
		return ret
	}
	return *o.Refsource
}

// GetRefsourceOk returns a tuple with the Refsource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitLabExploit) GetRefsourceOk() (*string, bool) {
	if o == nil || IsNil(o.Refsource) {
		return nil, false
	}
	return o.Refsource, true
}

// HasRefsource returns a boolean if a field has been set.
func (o *AdvisoryGitLabExploit) HasRefsource() bool {
	if o != nil && !IsNil(o.Refsource) {
		return true
	}

	return false
}

// SetRefsource gets a reference to the given string and assigns it to the Refsource field.
func (o *AdvisoryGitLabExploit) SetRefsource(v string) {
	o.Refsource = &v
}

// GetRepoFullPath returns the RepoFullPath field value if set, zero value otherwise.
func (o *AdvisoryGitLabExploit) GetRepoFullPath() string {
	if o == nil || IsNil(o.RepoFullPath) {
		var ret string
		return ret
	}
	return *o.RepoFullPath
}

// GetRepoFullPathOk returns a tuple with the RepoFullPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitLabExploit) GetRepoFullPathOk() (*string, bool) {
	if o == nil || IsNil(o.RepoFullPath) {
		return nil, false
	}
	return o.RepoFullPath, true
}

// HasRepoFullPath returns a boolean if a field has been set.
func (o *AdvisoryGitLabExploit) HasRepoFullPath() bool {
	if o != nil && !IsNil(o.RepoFullPath) {
		return true
	}

	return false
}

// SetRepoFullPath gets a reference to the given string and assigns it to the RepoFullPath field.
func (o *AdvisoryGitLabExploit) SetRepoFullPath(v string) {
	o.RepoFullPath = &v
}

// GetRepoId returns the RepoId field value if set, zero value otherwise.
func (o *AdvisoryGitLabExploit) GetRepoId() string {
	if o == nil || IsNil(o.RepoId) {
		var ret string
		return ret
	}
	return *o.RepoId
}

// GetRepoIdOk returns a tuple with the RepoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitLabExploit) GetRepoIdOk() (*string, bool) {
	if o == nil || IsNil(o.RepoId) {
		return nil, false
	}
	return o.RepoId, true
}

// HasRepoId returns a boolean if a field has been set.
func (o *AdvisoryGitLabExploit) HasRepoId() bool {
	if o != nil && !IsNil(o.RepoId) {
		return true
	}

	return false
}

// SetRepoId gets a reference to the given string and assigns it to the RepoId field.
func (o *AdvisoryGitLabExploit) SetRepoId(v string) {
	o.RepoId = &v
}

// GetRepoName returns the RepoName field value if set, zero value otherwise.
func (o *AdvisoryGitLabExploit) GetRepoName() string {
	if o == nil || IsNil(o.RepoName) {
		var ret string
		return ret
	}
	return *o.RepoName
}

// GetRepoNameOk returns a tuple with the RepoName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitLabExploit) GetRepoNameOk() (*string, bool) {
	if o == nil || IsNil(o.RepoName) {
		return nil, false
	}
	return o.RepoName, true
}

// HasRepoName returns a boolean if a field has been set.
func (o *AdvisoryGitLabExploit) HasRepoName() bool {
	if o != nil && !IsNil(o.RepoName) {
		return true
	}

	return false
}

// SetRepoName gets a reference to the given string and assigns it to the RepoName field.
func (o *AdvisoryGitLabExploit) SetRepoName(v string) {
	o.RepoName = &v
}

// GetRepoOwner returns the RepoOwner field value if set, zero value otherwise.
func (o *AdvisoryGitLabExploit) GetRepoOwner() string {
	if o == nil || IsNil(o.RepoOwner) {
		var ret string
		return ret
	}
	return *o.RepoOwner
}

// GetRepoOwnerOk returns a tuple with the RepoOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitLabExploit) GetRepoOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.RepoOwner) {
		return nil, false
	}
	return o.RepoOwner, true
}

// HasRepoOwner returns a boolean if a field has been set.
func (o *AdvisoryGitLabExploit) HasRepoOwner() bool {
	if o != nil && !IsNil(o.RepoOwner) {
		return true
	}

	return false
}

// SetRepoOwner gets a reference to the given string and assigns it to the RepoOwner field.
func (o *AdvisoryGitLabExploit) SetRepoOwner(v string) {
	o.RepoOwner = &v
}

// GetStars returns the Stars field value if set, zero value otherwise.
func (o *AdvisoryGitLabExploit) GetStars() int32 {
	if o == nil || IsNil(o.Stars) {
		var ret int32
		return ret
	}
	return *o.Stars
}

// GetStarsOk returns a tuple with the Stars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitLabExploit) GetStarsOk() (*int32, bool) {
	if o == nil || IsNil(o.Stars) {
		return nil, false
	}
	return o.Stars, true
}

// HasStars returns a boolean if a field has been set.
func (o *AdvisoryGitLabExploit) HasStars() bool {
	if o != nil && !IsNil(o.Stars) {
		return true
	}

	return false
}

// SetStars gets a reference to the given int32 and assigns it to the Stars field.
func (o *AdvisoryGitLabExploit) SetStars(v int32) {
	o.Stars = &v
}

func (o AdvisoryGitLabExploit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryGitLabExploit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CloneHttpsUrl) {
		toSerialize["clone_https_url"] = o.CloneHttpsUrl
	}
	if !IsNil(o.CloneSshUrl) {
		toSerialize["clone_ssh_url"] = o.CloneSshUrl
	}
	if !IsNil(o.CloneSshUrlCached) {
		toSerialize["clone_ssh_url_cached"] = o.CloneSshUrlCached
	}
	if !IsNil(o.Cve) {
		toSerialize["cve"] = o.Cve
	}
	if !IsNil(o.DateAdded) {
		toSerialize["date_added"] = o.DateAdded
	}
	if !IsNil(o.DateLastRevised) {
		toSerialize["date_last_revised"] = o.DateLastRevised
	}
	if !IsNil(o.ExploitType) {
		toSerialize["exploit_type"] = o.ExploitType
	}
	if !IsNil(o.Forks) {
		toSerialize["forks"] = o.Forks
	}
	if !IsNil(o.HtmlUrl) {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.ReferenceUrl) {
		toSerialize["reference_url"] = o.ReferenceUrl
	}
	if !IsNil(o.Refsource) {
		toSerialize["refsource"] = o.Refsource
	}
	if !IsNil(o.RepoFullPath) {
		toSerialize["repo_full_path"] = o.RepoFullPath
	}
	if !IsNil(o.RepoId) {
		toSerialize["repo_id"] = o.RepoId
	}
	if !IsNil(o.RepoName) {
		toSerialize["repo_name"] = o.RepoName
	}
	if !IsNil(o.RepoOwner) {
		toSerialize["repo_owner"] = o.RepoOwner
	}
	if !IsNil(o.Stars) {
		toSerialize["stars"] = o.Stars
	}
	return toSerialize, nil
}

type NullableAdvisoryGitLabExploit struct {
	value *AdvisoryGitLabExploit
	isSet bool
}

func (v NullableAdvisoryGitLabExploit) Get() *AdvisoryGitLabExploit {
	return v.value
}

func (v *NullableAdvisoryGitLabExploit) Set(val *AdvisoryGitLabExploit) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryGitLabExploit) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryGitLabExploit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryGitLabExploit(val *AdvisoryGitLabExploit) *NullableAdvisoryGitLabExploit {
	return &NullableAdvisoryGitLabExploit{value: val, isSet: true}
}

func (v NullableAdvisoryGitLabExploit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryGitLabExploit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


