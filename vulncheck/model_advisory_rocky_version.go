/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryRockyVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryRockyVersion{}

// AdvisoryRockyVersion struct for AdvisoryRockyVersion
type AdvisoryRockyVersion struct {
	Nvras []string `json:"nvras,omitempty"`
}

// NewAdvisoryRockyVersion instantiates a new AdvisoryRockyVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryRockyVersion() *AdvisoryRockyVersion {
	this := AdvisoryRockyVersion{}
	return &this
}

// NewAdvisoryRockyVersionWithDefaults instantiates a new AdvisoryRockyVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryRockyVersionWithDefaults() *AdvisoryRockyVersion {
	this := AdvisoryRockyVersion{}
	return &this
}

// GetNvras returns the Nvras field value if set, zero value otherwise.
func (o *AdvisoryRockyVersion) GetNvras() []string {
	if o == nil || IsNil(o.Nvras) {
		var ret []string
		return ret
	}
	return o.Nvras
}

// GetNvrasOk returns a tuple with the Nvras field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRockyVersion) GetNvrasOk() ([]string, bool) {
	if o == nil || IsNil(o.Nvras) {
		return nil, false
	}
	return o.Nvras, true
}

// HasNvras returns a boolean if a field has been set.
func (o *AdvisoryRockyVersion) HasNvras() bool {
	if o != nil && !IsNil(o.Nvras) {
		return true
	}

	return false
}

// SetNvras gets a reference to the given []string and assigns it to the Nvras field.
func (o *AdvisoryRockyVersion) SetNvras(v []string) {
	o.Nvras = v
}

func (o AdvisoryRockyVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryRockyVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Nvras) {
		toSerialize["nvras"] = o.Nvras
	}
	return toSerialize, nil
}

type NullableAdvisoryRockyVersion struct {
	value *AdvisoryRockyVersion
	isSet bool
}

func (v NullableAdvisoryRockyVersion) Get() *AdvisoryRockyVersion {
	return v.value
}

func (v *NullableAdvisoryRockyVersion) Set(val *AdvisoryRockyVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryRockyVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryRockyVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryRockyVersion(val *AdvisoryRockyVersion) *NullableAdvisoryRockyVersion {
	return &NullableAdvisoryRockyVersion{value: val, isSet: true}
}

func (v NullableAdvisoryRockyVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryRockyVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


