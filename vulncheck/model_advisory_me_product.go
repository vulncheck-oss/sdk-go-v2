/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryMEProduct type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryMEProduct{}

// AdvisoryMEProduct struct for AdvisoryMEProduct
type AdvisoryMEProduct struct {
	ID *string `json:"ID,omitempty"`
	DisplayValue *string `json:"display_value,omitempty"`
}

// NewAdvisoryMEProduct instantiates a new AdvisoryMEProduct object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryMEProduct() *AdvisoryMEProduct {
	this := AdvisoryMEProduct{}
	return &this
}

// NewAdvisoryMEProductWithDefaults instantiates a new AdvisoryMEProduct object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryMEProductWithDefaults() *AdvisoryMEProduct {
	this := AdvisoryMEProduct{}
	return &this
}

// GetID returns the ID field value if set, zero value otherwise.
func (o *AdvisoryMEProduct) GetID() string {
	if o == nil || IsNil(o.ID) {
		var ret string
		return ret
	}
	return *o.ID
}

// GetIDOk returns a tuple with the ID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryMEProduct) GetIDOk() (*string, bool) {
	if o == nil || IsNil(o.ID) {
		return nil, false
	}
	return o.ID, true
}

// HasID returns a boolean if a field has been set.
func (o *AdvisoryMEProduct) HasID() bool {
	if o != nil && !IsNil(o.ID) {
		return true
	}

	return false
}

// SetID gets a reference to the given string and assigns it to the ID field.
func (o *AdvisoryMEProduct) SetID(v string) {
	o.ID = &v
}

// GetDisplayValue returns the DisplayValue field value if set, zero value otherwise.
func (o *AdvisoryMEProduct) GetDisplayValue() string {
	if o == nil || IsNil(o.DisplayValue) {
		var ret string
		return ret
	}
	return *o.DisplayValue
}

// GetDisplayValueOk returns a tuple with the DisplayValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryMEProduct) GetDisplayValueOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayValue) {
		return nil, false
	}
	return o.DisplayValue, true
}

// HasDisplayValue returns a boolean if a field has been set.
func (o *AdvisoryMEProduct) HasDisplayValue() bool {
	if o != nil && !IsNil(o.DisplayValue) {
		return true
	}

	return false
}

// SetDisplayValue gets a reference to the given string and assigns it to the DisplayValue field.
func (o *AdvisoryMEProduct) SetDisplayValue(v string) {
	o.DisplayValue = &v
}

func (o AdvisoryMEProduct) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryMEProduct) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ID) {
		toSerialize["ID"] = o.ID
	}
	if !IsNil(o.DisplayValue) {
		toSerialize["display_value"] = o.DisplayValue
	}
	return toSerialize, nil
}

type NullableAdvisoryMEProduct struct {
	value *AdvisoryMEProduct
	isSet bool
}

func (v NullableAdvisoryMEProduct) Get() *AdvisoryMEProduct {
	return v.value
}

func (v *NullableAdvisoryMEProduct) Set(val *AdvisoryMEProduct) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryMEProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryMEProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryMEProduct(val *AdvisoryMEProduct) *NullableAdvisoryMEProduct {
	return &NullableAdvisoryMEProduct{value: val, isSet: true}
}

func (v NullableAdvisoryMEProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryMEProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


