/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryGoVulnAffected type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryGoVulnAffected{}

// AdvisoryGoVulnAffected struct for AdvisoryGoVulnAffected
type AdvisoryGoVulnAffected struct {
	DatabaseSpecific *AdvisoryGoVulnDatabaseSpecific `json:"database_specific,omitempty"`
	EcosystemSpecific *AdvisoryGoVulnEcosystemSpecific `json:"ecosystem_specific,omitempty"`
	Package *AdvisoryGoVulnPackage `json:"package,omitempty"`
	Ranges []AdvisoryGoVulnRanges `json:"ranges,omitempty"`
}

// NewAdvisoryGoVulnAffected instantiates a new AdvisoryGoVulnAffected object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryGoVulnAffected() *AdvisoryGoVulnAffected {
	this := AdvisoryGoVulnAffected{}
	return &this
}

// NewAdvisoryGoVulnAffectedWithDefaults instantiates a new AdvisoryGoVulnAffected object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryGoVulnAffectedWithDefaults() *AdvisoryGoVulnAffected {
	this := AdvisoryGoVulnAffected{}
	return &this
}

// GetDatabaseSpecific returns the DatabaseSpecific field value if set, zero value otherwise.
func (o *AdvisoryGoVulnAffected) GetDatabaseSpecific() AdvisoryGoVulnDatabaseSpecific {
	if o == nil || IsNil(o.DatabaseSpecific) {
		var ret AdvisoryGoVulnDatabaseSpecific
		return ret
	}
	return *o.DatabaseSpecific
}

// GetDatabaseSpecificOk returns a tuple with the DatabaseSpecific field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGoVulnAffected) GetDatabaseSpecificOk() (*AdvisoryGoVulnDatabaseSpecific, bool) {
	if o == nil || IsNil(o.DatabaseSpecific) {
		return nil, false
	}
	return o.DatabaseSpecific, true
}

// HasDatabaseSpecific returns a boolean if a field has been set.
func (o *AdvisoryGoVulnAffected) HasDatabaseSpecific() bool {
	if o != nil && !IsNil(o.DatabaseSpecific) {
		return true
	}

	return false
}

// SetDatabaseSpecific gets a reference to the given AdvisoryGoVulnDatabaseSpecific and assigns it to the DatabaseSpecific field.
func (o *AdvisoryGoVulnAffected) SetDatabaseSpecific(v AdvisoryGoVulnDatabaseSpecific) {
	o.DatabaseSpecific = &v
}

// GetEcosystemSpecific returns the EcosystemSpecific field value if set, zero value otherwise.
func (o *AdvisoryGoVulnAffected) GetEcosystemSpecific() AdvisoryGoVulnEcosystemSpecific {
	if o == nil || IsNil(o.EcosystemSpecific) {
		var ret AdvisoryGoVulnEcosystemSpecific
		return ret
	}
	return *o.EcosystemSpecific
}

// GetEcosystemSpecificOk returns a tuple with the EcosystemSpecific field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGoVulnAffected) GetEcosystemSpecificOk() (*AdvisoryGoVulnEcosystemSpecific, bool) {
	if o == nil || IsNil(o.EcosystemSpecific) {
		return nil, false
	}
	return o.EcosystemSpecific, true
}

// HasEcosystemSpecific returns a boolean if a field has been set.
func (o *AdvisoryGoVulnAffected) HasEcosystemSpecific() bool {
	if o != nil && !IsNil(o.EcosystemSpecific) {
		return true
	}

	return false
}

// SetEcosystemSpecific gets a reference to the given AdvisoryGoVulnEcosystemSpecific and assigns it to the EcosystemSpecific field.
func (o *AdvisoryGoVulnAffected) SetEcosystemSpecific(v AdvisoryGoVulnEcosystemSpecific) {
	o.EcosystemSpecific = &v
}

// GetPackage returns the Package field value if set, zero value otherwise.
func (o *AdvisoryGoVulnAffected) GetPackage() AdvisoryGoVulnPackage {
	if o == nil || IsNil(o.Package) {
		var ret AdvisoryGoVulnPackage
		return ret
	}
	return *o.Package
}

// GetPackageOk returns a tuple with the Package field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGoVulnAffected) GetPackageOk() (*AdvisoryGoVulnPackage, bool) {
	if o == nil || IsNil(o.Package) {
		return nil, false
	}
	return o.Package, true
}

// HasPackage returns a boolean if a field has been set.
func (o *AdvisoryGoVulnAffected) HasPackage() bool {
	if o != nil && !IsNil(o.Package) {
		return true
	}

	return false
}

// SetPackage gets a reference to the given AdvisoryGoVulnPackage and assigns it to the Package field.
func (o *AdvisoryGoVulnAffected) SetPackage(v AdvisoryGoVulnPackage) {
	o.Package = &v
}

// GetRanges returns the Ranges field value if set, zero value otherwise.
func (o *AdvisoryGoVulnAffected) GetRanges() []AdvisoryGoVulnRanges {
	if o == nil || IsNil(o.Ranges) {
		var ret []AdvisoryGoVulnRanges
		return ret
	}
	return o.Ranges
}

// GetRangesOk returns a tuple with the Ranges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGoVulnAffected) GetRangesOk() ([]AdvisoryGoVulnRanges, bool) {
	if o == nil || IsNil(o.Ranges) {
		return nil, false
	}
	return o.Ranges, true
}

// HasRanges returns a boolean if a field has been set.
func (o *AdvisoryGoVulnAffected) HasRanges() bool {
	if o != nil && !IsNil(o.Ranges) {
		return true
	}

	return false
}

// SetRanges gets a reference to the given []AdvisoryGoVulnRanges and assigns it to the Ranges field.
func (o *AdvisoryGoVulnAffected) SetRanges(v []AdvisoryGoVulnRanges) {
	o.Ranges = v
}

func (o AdvisoryGoVulnAffected) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryGoVulnAffected) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DatabaseSpecific) {
		toSerialize["database_specific"] = o.DatabaseSpecific
	}
	if !IsNil(o.EcosystemSpecific) {
		toSerialize["ecosystem_specific"] = o.EcosystemSpecific
	}
	if !IsNil(o.Package) {
		toSerialize["package"] = o.Package
	}
	if !IsNil(o.Ranges) {
		toSerialize["ranges"] = o.Ranges
	}
	return toSerialize, nil
}

type NullableAdvisoryGoVulnAffected struct {
	value *AdvisoryGoVulnAffected
	isSet bool
}

func (v NullableAdvisoryGoVulnAffected) Get() *AdvisoryGoVulnAffected {
	return v.value
}

func (v *NullableAdvisoryGoVulnAffected) Set(val *AdvisoryGoVulnAffected) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryGoVulnAffected) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryGoVulnAffected) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryGoVulnAffected(val *AdvisoryGoVulnAffected) *NullableAdvisoryGoVulnAffected {
	return &NullableAdvisoryGoVulnAffected{value: val, isSet: true}
}

func (v NullableAdvisoryGoVulnAffected) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryGoVulnAffected) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


