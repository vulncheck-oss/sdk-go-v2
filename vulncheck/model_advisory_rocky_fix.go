/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryRockyFix type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryRockyFix{}

// AdvisoryRockyFix struct for AdvisoryRockyFix
type AdvisoryRockyFix struct {
	Description *string `json:"description,omitempty"`
	SourceBy *string `json:"sourceBy,omitempty"`
	SourceLink *string `json:"sourceLink,omitempty"`
	Ticket *string `json:"ticket,omitempty"`
}

// NewAdvisoryRockyFix instantiates a new AdvisoryRockyFix object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryRockyFix() *AdvisoryRockyFix {
	this := AdvisoryRockyFix{}
	return &this
}

// NewAdvisoryRockyFixWithDefaults instantiates a new AdvisoryRockyFix object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryRockyFixWithDefaults() *AdvisoryRockyFix {
	this := AdvisoryRockyFix{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AdvisoryRockyFix) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRockyFix) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AdvisoryRockyFix) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AdvisoryRockyFix) SetDescription(v string) {
	o.Description = &v
}

// GetSourceBy returns the SourceBy field value if set, zero value otherwise.
func (o *AdvisoryRockyFix) GetSourceBy() string {
	if o == nil || IsNil(o.SourceBy) {
		var ret string
		return ret
	}
	return *o.SourceBy
}

// GetSourceByOk returns a tuple with the SourceBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRockyFix) GetSourceByOk() (*string, bool) {
	if o == nil || IsNil(o.SourceBy) {
		return nil, false
	}
	return o.SourceBy, true
}

// HasSourceBy returns a boolean if a field has been set.
func (o *AdvisoryRockyFix) HasSourceBy() bool {
	if o != nil && !IsNil(o.SourceBy) {
		return true
	}

	return false
}

// SetSourceBy gets a reference to the given string and assigns it to the SourceBy field.
func (o *AdvisoryRockyFix) SetSourceBy(v string) {
	o.SourceBy = &v
}

// GetSourceLink returns the SourceLink field value if set, zero value otherwise.
func (o *AdvisoryRockyFix) GetSourceLink() string {
	if o == nil || IsNil(o.SourceLink) {
		var ret string
		return ret
	}
	return *o.SourceLink
}

// GetSourceLinkOk returns a tuple with the SourceLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRockyFix) GetSourceLinkOk() (*string, bool) {
	if o == nil || IsNil(o.SourceLink) {
		return nil, false
	}
	return o.SourceLink, true
}

// HasSourceLink returns a boolean if a field has been set.
func (o *AdvisoryRockyFix) HasSourceLink() bool {
	if o != nil && !IsNil(o.SourceLink) {
		return true
	}

	return false
}

// SetSourceLink gets a reference to the given string and assigns it to the SourceLink field.
func (o *AdvisoryRockyFix) SetSourceLink(v string) {
	o.SourceLink = &v
}

// GetTicket returns the Ticket field value if set, zero value otherwise.
func (o *AdvisoryRockyFix) GetTicket() string {
	if o == nil || IsNil(o.Ticket) {
		var ret string
		return ret
	}
	return *o.Ticket
}

// GetTicketOk returns a tuple with the Ticket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryRockyFix) GetTicketOk() (*string, bool) {
	if o == nil || IsNil(o.Ticket) {
		return nil, false
	}
	return o.Ticket, true
}

// HasTicket returns a boolean if a field has been set.
func (o *AdvisoryRockyFix) HasTicket() bool {
	if o != nil && !IsNil(o.Ticket) {
		return true
	}

	return false
}

// SetTicket gets a reference to the given string and assigns it to the Ticket field.
func (o *AdvisoryRockyFix) SetTicket(v string) {
	o.Ticket = &v
}

func (o AdvisoryRockyFix) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryRockyFix) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.SourceBy) {
		toSerialize["sourceBy"] = o.SourceBy
	}
	if !IsNil(o.SourceLink) {
		toSerialize["sourceLink"] = o.SourceLink
	}
	if !IsNil(o.Ticket) {
		toSerialize["ticket"] = o.Ticket
	}
	return toSerialize, nil
}

type NullableAdvisoryRockyFix struct {
	value *AdvisoryRockyFix
	isSet bool
}

func (v NullableAdvisoryRockyFix) Get() *AdvisoryRockyFix {
	return v.value
}

func (v *NullableAdvisoryRockyFix) Set(val *AdvisoryRockyFix) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryRockyFix) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryRockyFix) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryRockyFix(val *AdvisoryRockyFix) *NullableAdvisoryRockyFix {
	return &NullableAdvisoryRockyFix{value: val, isSet: true}
}

func (v NullableAdvisoryRockyFix) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryRockyFix) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


