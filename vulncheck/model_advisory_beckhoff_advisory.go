/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryBeckhoffAdvisory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryBeckhoffAdvisory{}

// AdvisoryBeckhoffAdvisory struct for AdvisoryBeckhoffAdvisory
type AdvisoryBeckhoffAdvisory struct {
	BeckhoffId *string `json:"beckhoff_id,omitempty"`
	Cve []string `json:"cve,omitempty"`
	Cwe []string `json:"cwe,omitempty"`
	DateAdded *string `json:"date_added,omitempty"`
	// if in the future we can delete this great - it's just a dupe to normalize the field names
	DateLastRevised *string `json:"date_last_revised,omitempty"`
	Name *string `json:"name,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	Url *string `json:"url,omitempty"`
	Vde []string `json:"vde,omitempty"`
}

// NewAdvisoryBeckhoffAdvisory instantiates a new AdvisoryBeckhoffAdvisory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryBeckhoffAdvisory() *AdvisoryBeckhoffAdvisory {
	this := AdvisoryBeckhoffAdvisory{}
	return &this
}

// NewAdvisoryBeckhoffAdvisoryWithDefaults instantiates a new AdvisoryBeckhoffAdvisory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryBeckhoffAdvisoryWithDefaults() *AdvisoryBeckhoffAdvisory {
	this := AdvisoryBeckhoffAdvisory{}
	return &this
}

// GetBeckhoffId returns the BeckhoffId field value if set, zero value otherwise.
func (o *AdvisoryBeckhoffAdvisory) GetBeckhoffId() string {
	if o == nil || IsNil(o.BeckhoffId) {
		var ret string
		return ret
	}
	return *o.BeckhoffId
}

// GetBeckhoffIdOk returns a tuple with the BeckhoffId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryBeckhoffAdvisory) GetBeckhoffIdOk() (*string, bool) {
	if o == nil || IsNil(o.BeckhoffId) {
		return nil, false
	}
	return o.BeckhoffId, true
}

// HasBeckhoffId returns a boolean if a field has been set.
func (o *AdvisoryBeckhoffAdvisory) HasBeckhoffId() bool {
	if o != nil && !IsNil(o.BeckhoffId) {
		return true
	}

	return false
}

// SetBeckhoffId gets a reference to the given string and assigns it to the BeckhoffId field.
func (o *AdvisoryBeckhoffAdvisory) SetBeckhoffId(v string) {
	o.BeckhoffId = &v
}

// GetCve returns the Cve field value if set, zero value otherwise.
func (o *AdvisoryBeckhoffAdvisory) GetCve() []string {
	if o == nil || IsNil(o.Cve) {
		var ret []string
		return ret
	}
	return o.Cve
}

// GetCveOk returns a tuple with the Cve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryBeckhoffAdvisory) GetCveOk() ([]string, bool) {
	if o == nil || IsNil(o.Cve) {
		return nil, false
	}
	return o.Cve, true
}

// HasCve returns a boolean if a field has been set.
func (o *AdvisoryBeckhoffAdvisory) HasCve() bool {
	if o != nil && !IsNil(o.Cve) {
		return true
	}

	return false
}

// SetCve gets a reference to the given []string and assigns it to the Cve field.
func (o *AdvisoryBeckhoffAdvisory) SetCve(v []string) {
	o.Cve = v
}

// GetCwe returns the Cwe field value if set, zero value otherwise.
func (o *AdvisoryBeckhoffAdvisory) GetCwe() []string {
	if o == nil || IsNil(o.Cwe) {
		var ret []string
		return ret
	}
	return o.Cwe
}

// GetCweOk returns a tuple with the Cwe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryBeckhoffAdvisory) GetCweOk() ([]string, bool) {
	if o == nil || IsNil(o.Cwe) {
		return nil, false
	}
	return o.Cwe, true
}

// HasCwe returns a boolean if a field has been set.
func (o *AdvisoryBeckhoffAdvisory) HasCwe() bool {
	if o != nil && !IsNil(o.Cwe) {
		return true
	}

	return false
}

// SetCwe gets a reference to the given []string and assigns it to the Cwe field.
func (o *AdvisoryBeckhoffAdvisory) SetCwe(v []string) {
	o.Cwe = v
}

// GetDateAdded returns the DateAdded field value if set, zero value otherwise.
func (o *AdvisoryBeckhoffAdvisory) GetDateAdded() string {
	if o == nil || IsNil(o.DateAdded) {
		var ret string
		return ret
	}
	return *o.DateAdded
}

// GetDateAddedOk returns a tuple with the DateAdded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryBeckhoffAdvisory) GetDateAddedOk() (*string, bool) {
	if o == nil || IsNil(o.DateAdded) {
		return nil, false
	}
	return o.DateAdded, true
}

// HasDateAdded returns a boolean if a field has been set.
func (o *AdvisoryBeckhoffAdvisory) HasDateAdded() bool {
	if o != nil && !IsNil(o.DateAdded) {
		return true
	}

	return false
}

// SetDateAdded gets a reference to the given string and assigns it to the DateAdded field.
func (o *AdvisoryBeckhoffAdvisory) SetDateAdded(v string) {
	o.DateAdded = &v
}

// GetDateLastRevised returns the DateLastRevised field value if set, zero value otherwise.
func (o *AdvisoryBeckhoffAdvisory) GetDateLastRevised() string {
	if o == nil || IsNil(o.DateLastRevised) {
		var ret string
		return ret
	}
	return *o.DateLastRevised
}

// GetDateLastRevisedOk returns a tuple with the DateLastRevised field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryBeckhoffAdvisory) GetDateLastRevisedOk() (*string, bool) {
	if o == nil || IsNil(o.DateLastRevised) {
		return nil, false
	}
	return o.DateLastRevised, true
}

// HasDateLastRevised returns a boolean if a field has been set.
func (o *AdvisoryBeckhoffAdvisory) HasDateLastRevised() bool {
	if o != nil && !IsNil(o.DateLastRevised) {
		return true
	}

	return false
}

// SetDateLastRevised gets a reference to the given string and assigns it to the DateLastRevised field.
func (o *AdvisoryBeckhoffAdvisory) SetDateLastRevised(v string) {
	o.DateLastRevised = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AdvisoryBeckhoffAdvisory) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryBeckhoffAdvisory) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AdvisoryBeckhoffAdvisory) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AdvisoryBeckhoffAdvisory) SetName(v string) {
	o.Name = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *AdvisoryBeckhoffAdvisory) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryBeckhoffAdvisory) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *AdvisoryBeckhoffAdvisory) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *AdvisoryBeckhoffAdvisory) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *AdvisoryBeckhoffAdvisory) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryBeckhoffAdvisory) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *AdvisoryBeckhoffAdvisory) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *AdvisoryBeckhoffAdvisory) SetUrl(v string) {
	o.Url = &v
}

// GetVde returns the Vde field value if set, zero value otherwise.
func (o *AdvisoryBeckhoffAdvisory) GetVde() []string {
	if o == nil || IsNil(o.Vde) {
		var ret []string
		return ret
	}
	return o.Vde
}

// GetVdeOk returns a tuple with the Vde field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryBeckhoffAdvisory) GetVdeOk() ([]string, bool) {
	if o == nil || IsNil(o.Vde) {
		return nil, false
	}
	return o.Vde, true
}

// HasVde returns a boolean if a field has been set.
func (o *AdvisoryBeckhoffAdvisory) HasVde() bool {
	if o != nil && !IsNil(o.Vde) {
		return true
	}

	return false
}

// SetVde gets a reference to the given []string and assigns it to the Vde field.
func (o *AdvisoryBeckhoffAdvisory) SetVde(v []string) {
	o.Vde = v
}

func (o AdvisoryBeckhoffAdvisory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryBeckhoffAdvisory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BeckhoffId) {
		toSerialize["beckhoff_id"] = o.BeckhoffId
	}
	if !IsNil(o.Cve) {
		toSerialize["cve"] = o.Cve
	}
	if !IsNil(o.Cwe) {
		toSerialize["cwe"] = o.Cwe
	}
	if !IsNil(o.DateAdded) {
		toSerialize["date_added"] = o.DateAdded
	}
	if !IsNil(o.DateLastRevised) {
		toSerialize["date_last_revised"] = o.DateLastRevised
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Vde) {
		toSerialize["vde"] = o.Vde
	}
	return toSerialize, nil
}

type NullableAdvisoryBeckhoffAdvisory struct {
	value *AdvisoryBeckhoffAdvisory
	isSet bool
}

func (v NullableAdvisoryBeckhoffAdvisory) Get() *AdvisoryBeckhoffAdvisory {
	return v.value
}

func (v *NullableAdvisoryBeckhoffAdvisory) Set(val *AdvisoryBeckhoffAdvisory) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryBeckhoffAdvisory) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryBeckhoffAdvisory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryBeckhoffAdvisory(val *AdvisoryBeckhoffAdvisory) *NullableAdvisoryBeckhoffAdvisory {
	return &NullableAdvisoryBeckhoffAdvisory{value: val, isSet: true}
}

func (v NullableAdvisoryBeckhoffAdvisory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryBeckhoffAdvisory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


