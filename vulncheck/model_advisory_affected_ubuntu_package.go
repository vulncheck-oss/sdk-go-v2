/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryAffectedUbuntuPackage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryAffectedUbuntuPackage{}

// AdvisoryAffectedUbuntuPackage struct for AdvisoryAffectedUbuntuPackage
type AdvisoryAffectedUbuntuPackage struct {
	BreakCommitUrl []string `json:"break_commit_url,omitempty"`
	FixCommitUrl []string `json:"fix_commit_url,omitempty"`
	PackageName *string `json:"package_name,omitempty"`
	PackageReleaseStatus []AdvisoryUbuntuPackageReleaseStatus `json:"package_release_status,omitempty"`
	UpstreamFixUrl []string `json:"upstream_fix_url,omitempty"`
}

// NewAdvisoryAffectedUbuntuPackage instantiates a new AdvisoryAffectedUbuntuPackage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryAffectedUbuntuPackage() *AdvisoryAffectedUbuntuPackage {
	this := AdvisoryAffectedUbuntuPackage{}
	return &this
}

// NewAdvisoryAffectedUbuntuPackageWithDefaults instantiates a new AdvisoryAffectedUbuntuPackage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryAffectedUbuntuPackageWithDefaults() *AdvisoryAffectedUbuntuPackage {
	this := AdvisoryAffectedUbuntuPackage{}
	return &this
}

// GetBreakCommitUrl returns the BreakCommitUrl field value if set, zero value otherwise.
func (o *AdvisoryAffectedUbuntuPackage) GetBreakCommitUrl() []string {
	if o == nil || IsNil(o.BreakCommitUrl) {
		var ret []string
		return ret
	}
	return o.BreakCommitUrl
}

// GetBreakCommitUrlOk returns a tuple with the BreakCommitUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryAffectedUbuntuPackage) GetBreakCommitUrlOk() ([]string, bool) {
	if o == nil || IsNil(o.BreakCommitUrl) {
		return nil, false
	}
	return o.BreakCommitUrl, true
}

// HasBreakCommitUrl returns a boolean if a field has been set.
func (o *AdvisoryAffectedUbuntuPackage) HasBreakCommitUrl() bool {
	if o != nil && !IsNil(o.BreakCommitUrl) {
		return true
	}

	return false
}

// SetBreakCommitUrl gets a reference to the given []string and assigns it to the BreakCommitUrl field.
func (o *AdvisoryAffectedUbuntuPackage) SetBreakCommitUrl(v []string) {
	o.BreakCommitUrl = v
}

// GetFixCommitUrl returns the FixCommitUrl field value if set, zero value otherwise.
func (o *AdvisoryAffectedUbuntuPackage) GetFixCommitUrl() []string {
	if o == nil || IsNil(o.FixCommitUrl) {
		var ret []string
		return ret
	}
	return o.FixCommitUrl
}

// GetFixCommitUrlOk returns a tuple with the FixCommitUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryAffectedUbuntuPackage) GetFixCommitUrlOk() ([]string, bool) {
	if o == nil || IsNil(o.FixCommitUrl) {
		return nil, false
	}
	return o.FixCommitUrl, true
}

// HasFixCommitUrl returns a boolean if a field has been set.
func (o *AdvisoryAffectedUbuntuPackage) HasFixCommitUrl() bool {
	if o != nil && !IsNil(o.FixCommitUrl) {
		return true
	}

	return false
}

// SetFixCommitUrl gets a reference to the given []string and assigns it to the FixCommitUrl field.
func (o *AdvisoryAffectedUbuntuPackage) SetFixCommitUrl(v []string) {
	o.FixCommitUrl = v
}

// GetPackageName returns the PackageName field value if set, zero value otherwise.
func (o *AdvisoryAffectedUbuntuPackage) GetPackageName() string {
	if o == nil || IsNil(o.PackageName) {
		var ret string
		return ret
	}
	return *o.PackageName
}

// GetPackageNameOk returns a tuple with the PackageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryAffectedUbuntuPackage) GetPackageNameOk() (*string, bool) {
	if o == nil || IsNil(o.PackageName) {
		return nil, false
	}
	return o.PackageName, true
}

// HasPackageName returns a boolean if a field has been set.
func (o *AdvisoryAffectedUbuntuPackage) HasPackageName() bool {
	if o != nil && !IsNil(o.PackageName) {
		return true
	}

	return false
}

// SetPackageName gets a reference to the given string and assigns it to the PackageName field.
func (o *AdvisoryAffectedUbuntuPackage) SetPackageName(v string) {
	o.PackageName = &v
}

// GetPackageReleaseStatus returns the PackageReleaseStatus field value if set, zero value otherwise.
func (o *AdvisoryAffectedUbuntuPackage) GetPackageReleaseStatus() []AdvisoryUbuntuPackageReleaseStatus {
	if o == nil || IsNil(o.PackageReleaseStatus) {
		var ret []AdvisoryUbuntuPackageReleaseStatus
		return ret
	}
	return o.PackageReleaseStatus
}

// GetPackageReleaseStatusOk returns a tuple with the PackageReleaseStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryAffectedUbuntuPackage) GetPackageReleaseStatusOk() ([]AdvisoryUbuntuPackageReleaseStatus, bool) {
	if o == nil || IsNil(o.PackageReleaseStatus) {
		return nil, false
	}
	return o.PackageReleaseStatus, true
}

// HasPackageReleaseStatus returns a boolean if a field has been set.
func (o *AdvisoryAffectedUbuntuPackage) HasPackageReleaseStatus() bool {
	if o != nil && !IsNil(o.PackageReleaseStatus) {
		return true
	}

	return false
}

// SetPackageReleaseStatus gets a reference to the given []AdvisoryUbuntuPackageReleaseStatus and assigns it to the PackageReleaseStatus field.
func (o *AdvisoryAffectedUbuntuPackage) SetPackageReleaseStatus(v []AdvisoryUbuntuPackageReleaseStatus) {
	o.PackageReleaseStatus = v
}

// GetUpstreamFixUrl returns the UpstreamFixUrl field value if set, zero value otherwise.
func (o *AdvisoryAffectedUbuntuPackage) GetUpstreamFixUrl() []string {
	if o == nil || IsNil(o.UpstreamFixUrl) {
		var ret []string
		return ret
	}
	return o.UpstreamFixUrl
}

// GetUpstreamFixUrlOk returns a tuple with the UpstreamFixUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryAffectedUbuntuPackage) GetUpstreamFixUrlOk() ([]string, bool) {
	if o == nil || IsNil(o.UpstreamFixUrl) {
		return nil, false
	}
	return o.UpstreamFixUrl, true
}

// HasUpstreamFixUrl returns a boolean if a field has been set.
func (o *AdvisoryAffectedUbuntuPackage) HasUpstreamFixUrl() bool {
	if o != nil && !IsNil(o.UpstreamFixUrl) {
		return true
	}

	return false
}

// SetUpstreamFixUrl gets a reference to the given []string and assigns it to the UpstreamFixUrl field.
func (o *AdvisoryAffectedUbuntuPackage) SetUpstreamFixUrl(v []string) {
	o.UpstreamFixUrl = v
}

func (o AdvisoryAffectedUbuntuPackage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryAffectedUbuntuPackage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BreakCommitUrl) {
		toSerialize["break_commit_url"] = o.BreakCommitUrl
	}
	if !IsNil(o.FixCommitUrl) {
		toSerialize["fix_commit_url"] = o.FixCommitUrl
	}
	if !IsNil(o.PackageName) {
		toSerialize["package_name"] = o.PackageName
	}
	if !IsNil(o.PackageReleaseStatus) {
		toSerialize["package_release_status"] = o.PackageReleaseStatus
	}
	if !IsNil(o.UpstreamFixUrl) {
		toSerialize["upstream_fix_url"] = o.UpstreamFixUrl
	}
	return toSerialize, nil
}

type NullableAdvisoryAffectedUbuntuPackage struct {
	value *AdvisoryAffectedUbuntuPackage
	isSet bool
}

func (v NullableAdvisoryAffectedUbuntuPackage) Get() *AdvisoryAffectedUbuntuPackage {
	return v.value
}

func (v *NullableAdvisoryAffectedUbuntuPackage) Set(val *AdvisoryAffectedUbuntuPackage) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryAffectedUbuntuPackage) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryAffectedUbuntuPackage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryAffectedUbuntuPackage(val *AdvisoryAffectedUbuntuPackage) *NullableAdvisoryAffectedUbuntuPackage {
	return &NullableAdvisoryAffectedUbuntuPackage{value: val, isSet: true}
}

func (v NullableAdvisoryAffectedUbuntuPackage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryAffectedUbuntuPackage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


