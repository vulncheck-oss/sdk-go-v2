/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryVCVulnerableCPEs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryVCVulnerableCPEs{}

// AdvisoryVCVulnerableCPEs struct for AdvisoryVCVulnerableCPEs
type AdvisoryVCVulnerableCPEs struct {
	Cve *string `json:"cve,omitempty"`
	Unrolled []string `json:"unrolled,omitempty"`
}

// NewAdvisoryVCVulnerableCPEs instantiates a new AdvisoryVCVulnerableCPEs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryVCVulnerableCPEs() *AdvisoryVCVulnerableCPEs {
	this := AdvisoryVCVulnerableCPEs{}
	return &this
}

// NewAdvisoryVCVulnerableCPEsWithDefaults instantiates a new AdvisoryVCVulnerableCPEs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryVCVulnerableCPEsWithDefaults() *AdvisoryVCVulnerableCPEs {
	this := AdvisoryVCVulnerableCPEs{}
	return &this
}

// GetCve returns the Cve field value if set, zero value otherwise.
func (o *AdvisoryVCVulnerableCPEs) GetCve() string {
	if o == nil || IsNil(o.Cve) {
		var ret string
		return ret
	}
	return *o.Cve
}

// GetCveOk returns a tuple with the Cve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryVCVulnerableCPEs) GetCveOk() (*string, bool) {
	if o == nil || IsNil(o.Cve) {
		return nil, false
	}
	return o.Cve, true
}

// HasCve returns a boolean if a field has been set.
func (o *AdvisoryVCVulnerableCPEs) HasCve() bool {
	if o != nil && !IsNil(o.Cve) {
		return true
	}

	return false
}

// SetCve gets a reference to the given string and assigns it to the Cve field.
func (o *AdvisoryVCVulnerableCPEs) SetCve(v string) {
	o.Cve = &v
}

// GetUnrolled returns the Unrolled field value if set, zero value otherwise.
func (o *AdvisoryVCVulnerableCPEs) GetUnrolled() []string {
	if o == nil || IsNil(o.Unrolled) {
		var ret []string
		return ret
	}
	return o.Unrolled
}

// GetUnrolledOk returns a tuple with the Unrolled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryVCVulnerableCPEs) GetUnrolledOk() ([]string, bool) {
	if o == nil || IsNil(o.Unrolled) {
		return nil, false
	}
	return o.Unrolled, true
}

// HasUnrolled returns a boolean if a field has been set.
func (o *AdvisoryVCVulnerableCPEs) HasUnrolled() bool {
	if o != nil && !IsNil(o.Unrolled) {
		return true
	}

	return false
}

// SetUnrolled gets a reference to the given []string and assigns it to the Unrolled field.
func (o *AdvisoryVCVulnerableCPEs) SetUnrolled(v []string) {
	o.Unrolled = v
}

func (o AdvisoryVCVulnerableCPEs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryVCVulnerableCPEs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cve) {
		toSerialize["cve"] = o.Cve
	}
	if !IsNil(o.Unrolled) {
		toSerialize["unrolled"] = o.Unrolled
	}
	return toSerialize, nil
}

type NullableAdvisoryVCVulnerableCPEs struct {
	value *AdvisoryVCVulnerableCPEs
	isSet bool
}

func (v NullableAdvisoryVCVulnerableCPEs) Get() *AdvisoryVCVulnerableCPEs {
	return v.value
}

func (v *NullableAdvisoryVCVulnerableCPEs) Set(val *AdvisoryVCVulnerableCPEs) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryVCVulnerableCPEs) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryVCVulnerableCPEs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryVCVulnerableCPEs(val *AdvisoryVCVulnerableCPEs) *NullableAdvisoryVCVulnerableCPEs {
	return &NullableAdvisoryVCVulnerableCPEs{value: val, isSet: true}
}

func (v NullableAdvisoryVCVulnerableCPEs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryVCVulnerableCPEs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


