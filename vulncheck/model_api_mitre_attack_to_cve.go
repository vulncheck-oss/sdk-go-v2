/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the ApiMitreAttackToCVE type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiMitreAttackToCVE{}

// ApiMitreAttackToCVE struct for ApiMitreAttackToCVE
type ApiMitreAttackToCVE struct {
	CveList []string `json:"cve_list,omitempty"`
	DateAdded *string `json:"date_added,omitempty"`
	TechniqueId *ApiMitreAttackTech `json:"technique_id,omitempty"`
}

// NewApiMitreAttackToCVE instantiates a new ApiMitreAttackToCVE object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiMitreAttackToCVE() *ApiMitreAttackToCVE {
	this := ApiMitreAttackToCVE{}
	return &this
}

// NewApiMitreAttackToCVEWithDefaults instantiates a new ApiMitreAttackToCVE object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiMitreAttackToCVEWithDefaults() *ApiMitreAttackToCVE {
	this := ApiMitreAttackToCVE{}
	return &this
}

// GetCveList returns the CveList field value if set, zero value otherwise.
func (o *ApiMitreAttackToCVE) GetCveList() []string {
	if o == nil || IsNil(o.CveList) {
		var ret []string
		return ret
	}
	return o.CveList
}

// GetCveListOk returns a tuple with the CveList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiMitreAttackToCVE) GetCveListOk() ([]string, bool) {
	if o == nil || IsNil(o.CveList) {
		return nil, false
	}
	return o.CveList, true
}

// HasCveList returns a boolean if a field has been set.
func (o *ApiMitreAttackToCVE) HasCveList() bool {
	if o != nil && !IsNil(o.CveList) {
		return true
	}

	return false
}

// SetCveList gets a reference to the given []string and assigns it to the CveList field.
func (o *ApiMitreAttackToCVE) SetCveList(v []string) {
	o.CveList = v
}

// GetDateAdded returns the DateAdded field value if set, zero value otherwise.
func (o *ApiMitreAttackToCVE) GetDateAdded() string {
	if o == nil || IsNil(o.DateAdded) {
		var ret string
		return ret
	}
	return *o.DateAdded
}

// GetDateAddedOk returns a tuple with the DateAdded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiMitreAttackToCVE) GetDateAddedOk() (*string, bool) {
	if o == nil || IsNil(o.DateAdded) {
		return nil, false
	}
	return o.DateAdded, true
}

// HasDateAdded returns a boolean if a field has been set.
func (o *ApiMitreAttackToCVE) HasDateAdded() bool {
	if o != nil && !IsNil(o.DateAdded) {
		return true
	}

	return false
}

// SetDateAdded gets a reference to the given string and assigns it to the DateAdded field.
func (o *ApiMitreAttackToCVE) SetDateAdded(v string) {
	o.DateAdded = &v
}

// GetTechniqueId returns the TechniqueId field value if set, zero value otherwise.
func (o *ApiMitreAttackToCVE) GetTechniqueId() ApiMitreAttackTech {
	if o == nil || IsNil(o.TechniqueId) {
		var ret ApiMitreAttackTech
		return ret
	}
	return *o.TechniqueId
}

// GetTechniqueIdOk returns a tuple with the TechniqueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiMitreAttackToCVE) GetTechniqueIdOk() (*ApiMitreAttackTech, bool) {
	if o == nil || IsNil(o.TechniqueId) {
		return nil, false
	}
	return o.TechniqueId, true
}

// HasTechniqueId returns a boolean if a field has been set.
func (o *ApiMitreAttackToCVE) HasTechniqueId() bool {
	if o != nil && !IsNil(o.TechniqueId) {
		return true
	}

	return false
}

// SetTechniqueId gets a reference to the given ApiMitreAttackTech and assigns it to the TechniqueId field.
func (o *ApiMitreAttackToCVE) SetTechniqueId(v ApiMitreAttackTech) {
	o.TechniqueId = &v
}

func (o ApiMitreAttackToCVE) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiMitreAttackToCVE) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CveList) {
		toSerialize["cve_list"] = o.CveList
	}
	if !IsNil(o.DateAdded) {
		toSerialize["date_added"] = o.DateAdded
	}
	if !IsNil(o.TechniqueId) {
		toSerialize["technique_id"] = o.TechniqueId
	}
	return toSerialize, nil
}

type NullableApiMitreAttackToCVE struct {
	value *ApiMitreAttackToCVE
	isSet bool
}

func (v NullableApiMitreAttackToCVE) Get() *ApiMitreAttackToCVE {
	return v.value
}

func (v *NullableApiMitreAttackToCVE) Set(val *ApiMitreAttackToCVE) {
	v.value = val
	v.isSet = true
}

func (v NullableApiMitreAttackToCVE) IsSet() bool {
	return v.isSet
}

func (v *NullableApiMitreAttackToCVE) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiMitreAttackToCVE(val *ApiMitreAttackToCVE) *NullableApiMitreAttackToCVE {
	return &NullableApiMitreAttackToCVE{value: val, isSet: true}
}

func (v NullableApiMitreAttackToCVE) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiMitreAttackToCVE) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


