/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisorySiemensCVSSV3 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisorySiemensCVSSV3{}

// AdvisorySiemensCVSSV3 struct for AdvisorySiemensCVSSV3
type AdvisorySiemensCVSSV3 struct {
	BaseScore *float32 `json:"baseScore,omitempty"`
	BaseSeverity *string `json:"baseSeverity,omitempty"`
	VectorString *string `json:"vectorString,omitempty"`
	Version *string `json:"version,omitempty"`
}

// NewAdvisorySiemensCVSSV3 instantiates a new AdvisorySiemensCVSSV3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisorySiemensCVSSV3() *AdvisorySiemensCVSSV3 {
	this := AdvisorySiemensCVSSV3{}
	return &this
}

// NewAdvisorySiemensCVSSV3WithDefaults instantiates a new AdvisorySiemensCVSSV3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisorySiemensCVSSV3WithDefaults() *AdvisorySiemensCVSSV3 {
	this := AdvisorySiemensCVSSV3{}
	return &this
}

// GetBaseScore returns the BaseScore field value if set, zero value otherwise.
func (o *AdvisorySiemensCVSSV3) GetBaseScore() float32 {
	if o == nil || IsNil(o.BaseScore) {
		var ret float32
		return ret
	}
	return *o.BaseScore
}

// GetBaseScoreOk returns a tuple with the BaseScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisorySiemensCVSSV3) GetBaseScoreOk() (*float32, bool) {
	if o == nil || IsNil(o.BaseScore) {
		return nil, false
	}
	return o.BaseScore, true
}

// HasBaseScore returns a boolean if a field has been set.
func (o *AdvisorySiemensCVSSV3) HasBaseScore() bool {
	if o != nil && !IsNil(o.BaseScore) {
		return true
	}

	return false
}

// SetBaseScore gets a reference to the given float32 and assigns it to the BaseScore field.
func (o *AdvisorySiemensCVSSV3) SetBaseScore(v float32) {
	o.BaseScore = &v
}

// GetBaseSeverity returns the BaseSeverity field value if set, zero value otherwise.
func (o *AdvisorySiemensCVSSV3) GetBaseSeverity() string {
	if o == nil || IsNil(o.BaseSeverity) {
		var ret string
		return ret
	}
	return *o.BaseSeverity
}

// GetBaseSeverityOk returns a tuple with the BaseSeverity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisorySiemensCVSSV3) GetBaseSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.BaseSeverity) {
		return nil, false
	}
	return o.BaseSeverity, true
}

// HasBaseSeverity returns a boolean if a field has been set.
func (o *AdvisorySiemensCVSSV3) HasBaseSeverity() bool {
	if o != nil && !IsNil(o.BaseSeverity) {
		return true
	}

	return false
}

// SetBaseSeverity gets a reference to the given string and assigns it to the BaseSeverity field.
func (o *AdvisorySiemensCVSSV3) SetBaseSeverity(v string) {
	o.BaseSeverity = &v
}

// GetVectorString returns the VectorString field value if set, zero value otherwise.
func (o *AdvisorySiemensCVSSV3) GetVectorString() string {
	if o == nil || IsNil(o.VectorString) {
		var ret string
		return ret
	}
	return *o.VectorString
}

// GetVectorStringOk returns a tuple with the VectorString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisorySiemensCVSSV3) GetVectorStringOk() (*string, bool) {
	if o == nil || IsNil(o.VectorString) {
		return nil, false
	}
	return o.VectorString, true
}

// HasVectorString returns a boolean if a field has been set.
func (o *AdvisorySiemensCVSSV3) HasVectorString() bool {
	if o != nil && !IsNil(o.VectorString) {
		return true
	}

	return false
}

// SetVectorString gets a reference to the given string and assigns it to the VectorString field.
func (o *AdvisorySiemensCVSSV3) SetVectorString(v string) {
	o.VectorString = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AdvisorySiemensCVSSV3) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisorySiemensCVSSV3) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *AdvisorySiemensCVSSV3) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *AdvisorySiemensCVSSV3) SetVersion(v string) {
	o.Version = &v
}

func (o AdvisorySiemensCVSSV3) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisorySiemensCVSSV3) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BaseScore) {
		toSerialize["baseScore"] = o.BaseScore
	}
	if !IsNil(o.BaseSeverity) {
		toSerialize["baseSeverity"] = o.BaseSeverity
	}
	if !IsNil(o.VectorString) {
		toSerialize["vectorString"] = o.VectorString
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableAdvisorySiemensCVSSV3 struct {
	value *AdvisorySiemensCVSSV3
	isSet bool
}

func (v NullableAdvisorySiemensCVSSV3) Get() *AdvisorySiemensCVSSV3 {
	return v.value
}

func (v *NullableAdvisorySiemensCVSSV3) Set(val *AdvisorySiemensCVSSV3) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisorySiemensCVSSV3) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisorySiemensCVSSV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisorySiemensCVSSV3(val *AdvisorySiemensCVSSV3) *NullableAdvisorySiemensCVSSV3 {
	return &NullableAdvisorySiemensCVSSV3{value: val, isSet: true}
}

func (v NullableAdvisorySiemensCVSSV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisorySiemensCVSSV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


