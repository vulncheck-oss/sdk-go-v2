/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryAffected type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryAffected{}

// AdvisoryAffected struct for AdvisoryAffected
type AdvisoryAffected struct {
	// The meaning of the values within the object is entirely defined by the database
	DatabaseSpecific map[string]interface{} `json:"database_specific,omitempty"`
	// The meaning of the values within the object is entirely defined by the ecosystem
	EcosystemSpecific map[string]interface{} `json:"ecosystem_specific,omitempty"`
	Package *AdvisoryOSVPackage `json:"package,omitempty"`
	Ranges []AdvisoryRange `json:"ranges,omitempty"`
	Severity []AdvisorySeverity `json:"severity,omitempty"`
	Versions []string `json:"versions,omitempty"`
}

// NewAdvisoryAffected instantiates a new AdvisoryAffected object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryAffected() *AdvisoryAffected {
	this := AdvisoryAffected{}
	return &this
}

// NewAdvisoryAffectedWithDefaults instantiates a new AdvisoryAffected object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryAffectedWithDefaults() *AdvisoryAffected {
	this := AdvisoryAffected{}
	return &this
}

// GetDatabaseSpecific returns the DatabaseSpecific field value if set, zero value otherwise.
func (o *AdvisoryAffected) GetDatabaseSpecific() map[string]interface{} {
	if o == nil || IsNil(o.DatabaseSpecific) {
		var ret map[string]interface{}
		return ret
	}
	return o.DatabaseSpecific
}

// GetDatabaseSpecificOk returns a tuple with the DatabaseSpecific field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryAffected) GetDatabaseSpecificOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DatabaseSpecific) {
		return map[string]interface{}{}, false
	}
	return o.DatabaseSpecific, true
}

// HasDatabaseSpecific returns a boolean if a field has been set.
func (o *AdvisoryAffected) HasDatabaseSpecific() bool {
	if o != nil && !IsNil(o.DatabaseSpecific) {
		return true
	}

	return false
}

// SetDatabaseSpecific gets a reference to the given map[string]interface{} and assigns it to the DatabaseSpecific field.
func (o *AdvisoryAffected) SetDatabaseSpecific(v map[string]interface{}) {
	o.DatabaseSpecific = v
}

// GetEcosystemSpecific returns the EcosystemSpecific field value if set, zero value otherwise.
func (o *AdvisoryAffected) GetEcosystemSpecific() map[string]interface{} {
	if o == nil || IsNil(o.EcosystemSpecific) {
		var ret map[string]interface{}
		return ret
	}
	return o.EcosystemSpecific
}

// GetEcosystemSpecificOk returns a tuple with the EcosystemSpecific field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryAffected) GetEcosystemSpecificOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.EcosystemSpecific) {
		return map[string]interface{}{}, false
	}
	return o.EcosystemSpecific, true
}

// HasEcosystemSpecific returns a boolean if a field has been set.
func (o *AdvisoryAffected) HasEcosystemSpecific() bool {
	if o != nil && !IsNil(o.EcosystemSpecific) {
		return true
	}

	return false
}

// SetEcosystemSpecific gets a reference to the given map[string]interface{} and assigns it to the EcosystemSpecific field.
func (o *AdvisoryAffected) SetEcosystemSpecific(v map[string]interface{}) {
	o.EcosystemSpecific = v
}

// GetPackage returns the Package field value if set, zero value otherwise.
func (o *AdvisoryAffected) GetPackage() AdvisoryOSVPackage {
	if o == nil || IsNil(o.Package) {
		var ret AdvisoryOSVPackage
		return ret
	}
	return *o.Package
}

// GetPackageOk returns a tuple with the Package field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryAffected) GetPackageOk() (*AdvisoryOSVPackage, bool) {
	if o == nil || IsNil(o.Package) {
		return nil, false
	}
	return o.Package, true
}

// HasPackage returns a boolean if a field has been set.
func (o *AdvisoryAffected) HasPackage() bool {
	if o != nil && !IsNil(o.Package) {
		return true
	}

	return false
}

// SetPackage gets a reference to the given AdvisoryOSVPackage and assigns it to the Package field.
func (o *AdvisoryAffected) SetPackage(v AdvisoryOSVPackage) {
	o.Package = &v
}

// GetRanges returns the Ranges field value if set, zero value otherwise.
func (o *AdvisoryAffected) GetRanges() []AdvisoryRange {
	if o == nil || IsNil(o.Ranges) {
		var ret []AdvisoryRange
		return ret
	}
	return o.Ranges
}

// GetRangesOk returns a tuple with the Ranges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryAffected) GetRangesOk() ([]AdvisoryRange, bool) {
	if o == nil || IsNil(o.Ranges) {
		return nil, false
	}
	return o.Ranges, true
}

// HasRanges returns a boolean if a field has been set.
func (o *AdvisoryAffected) HasRanges() bool {
	if o != nil && !IsNil(o.Ranges) {
		return true
	}

	return false
}

// SetRanges gets a reference to the given []AdvisoryRange and assigns it to the Ranges field.
func (o *AdvisoryAffected) SetRanges(v []AdvisoryRange) {
	o.Ranges = v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *AdvisoryAffected) GetSeverity() []AdvisorySeverity {
	if o == nil || IsNil(o.Severity) {
		var ret []AdvisorySeverity
		return ret
	}
	return o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryAffected) GetSeverityOk() ([]AdvisorySeverity, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *AdvisoryAffected) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given []AdvisorySeverity and assigns it to the Severity field.
func (o *AdvisoryAffected) SetSeverity(v []AdvisorySeverity) {
	o.Severity = v
}

// GetVersions returns the Versions field value if set, zero value otherwise.
func (o *AdvisoryAffected) GetVersions() []string {
	if o == nil || IsNil(o.Versions) {
		var ret []string
		return ret
	}
	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryAffected) GetVersionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Versions) {
		return nil, false
	}
	return o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *AdvisoryAffected) HasVersions() bool {
	if o != nil && !IsNil(o.Versions) {
		return true
	}

	return false
}

// SetVersions gets a reference to the given []string and assigns it to the Versions field.
func (o *AdvisoryAffected) SetVersions(v []string) {
	o.Versions = v
}

func (o AdvisoryAffected) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryAffected) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DatabaseSpecific) {
		toSerialize["database_specific"] = o.DatabaseSpecific
	}
	if !IsNil(o.EcosystemSpecific) {
		toSerialize["ecosystem_specific"] = o.EcosystemSpecific
	}
	if !IsNil(o.Package) {
		toSerialize["package"] = o.Package
	}
	if !IsNil(o.Ranges) {
		toSerialize["ranges"] = o.Ranges
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.Versions) {
		toSerialize["versions"] = o.Versions
	}
	return toSerialize, nil
}

type NullableAdvisoryAffected struct {
	value *AdvisoryAffected
	isSet bool
}

func (v NullableAdvisoryAffected) Get() *AdvisoryAffected {
	return v.value
}

func (v *NullableAdvisoryAffected) Set(val *AdvisoryAffected) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryAffected) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryAffected) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryAffected(val *AdvisoryAffected) *NullableAdvisoryAffected {
	return &NullableAdvisoryAffected{value: val, isSet: true}
}

func (v NullableAdvisoryAffected) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryAffected) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


