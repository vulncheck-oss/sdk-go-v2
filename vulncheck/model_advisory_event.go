/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryEvent{}

// AdvisoryEvent struct for AdvisoryEvent
type AdvisoryEvent struct {
	Fixed *string `json:"fixed,omitempty"`
	Introduced *string `json:"introduced,omitempty"`
	LastAffected *string `json:"last_affected,omitempty"`
	Limit *string `json:"limit,omitempty"`
}

// NewAdvisoryEvent instantiates a new AdvisoryEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryEvent() *AdvisoryEvent {
	this := AdvisoryEvent{}
	return &this
}

// NewAdvisoryEventWithDefaults instantiates a new AdvisoryEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryEventWithDefaults() *AdvisoryEvent {
	this := AdvisoryEvent{}
	return &this
}

// GetFixed returns the Fixed field value if set, zero value otherwise.
func (o *AdvisoryEvent) GetFixed() string {
	if o == nil || IsNil(o.Fixed) {
		var ret string
		return ret
	}
	return *o.Fixed
}

// GetFixedOk returns a tuple with the Fixed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryEvent) GetFixedOk() (*string, bool) {
	if o == nil || IsNil(o.Fixed) {
		return nil, false
	}
	return o.Fixed, true
}

// HasFixed returns a boolean if a field has been set.
func (o *AdvisoryEvent) HasFixed() bool {
	if o != nil && !IsNil(o.Fixed) {
		return true
	}

	return false
}

// SetFixed gets a reference to the given string and assigns it to the Fixed field.
func (o *AdvisoryEvent) SetFixed(v string) {
	o.Fixed = &v
}

// GetIntroduced returns the Introduced field value if set, zero value otherwise.
func (o *AdvisoryEvent) GetIntroduced() string {
	if o == nil || IsNil(o.Introduced) {
		var ret string
		return ret
	}
	return *o.Introduced
}

// GetIntroducedOk returns a tuple with the Introduced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryEvent) GetIntroducedOk() (*string, bool) {
	if o == nil || IsNil(o.Introduced) {
		return nil, false
	}
	return o.Introduced, true
}

// HasIntroduced returns a boolean if a field has been set.
func (o *AdvisoryEvent) HasIntroduced() bool {
	if o != nil && !IsNil(o.Introduced) {
		return true
	}

	return false
}

// SetIntroduced gets a reference to the given string and assigns it to the Introduced field.
func (o *AdvisoryEvent) SetIntroduced(v string) {
	o.Introduced = &v
}

// GetLastAffected returns the LastAffected field value if set, zero value otherwise.
func (o *AdvisoryEvent) GetLastAffected() string {
	if o == nil || IsNil(o.LastAffected) {
		var ret string
		return ret
	}
	return *o.LastAffected
}

// GetLastAffectedOk returns a tuple with the LastAffected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryEvent) GetLastAffectedOk() (*string, bool) {
	if o == nil || IsNil(o.LastAffected) {
		return nil, false
	}
	return o.LastAffected, true
}

// HasLastAffected returns a boolean if a field has been set.
func (o *AdvisoryEvent) HasLastAffected() bool {
	if o != nil && !IsNil(o.LastAffected) {
		return true
	}

	return false
}

// SetLastAffected gets a reference to the given string and assigns it to the LastAffected field.
func (o *AdvisoryEvent) SetLastAffected(v string) {
	o.LastAffected = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *AdvisoryEvent) GetLimit() string {
	if o == nil || IsNil(o.Limit) {
		var ret string
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryEvent) GetLimitOk() (*string, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *AdvisoryEvent) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given string and assigns it to the Limit field.
func (o *AdvisoryEvent) SetLimit(v string) {
	o.Limit = &v
}

func (o AdvisoryEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Fixed) {
		toSerialize["fixed"] = o.Fixed
	}
	if !IsNil(o.Introduced) {
		toSerialize["introduced"] = o.Introduced
	}
	if !IsNil(o.LastAffected) {
		toSerialize["last_affected"] = o.LastAffected
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	return toSerialize, nil
}

type NullableAdvisoryEvent struct {
	value *AdvisoryEvent
	isSet bool
}

func (v NullableAdvisoryEvent) Get() *AdvisoryEvent {
	return v.value
}

func (v *NullableAdvisoryEvent) Set(val *AdvisoryEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryEvent(val *AdvisoryEvent) *NullableAdvisoryEvent {
	return &NullableAdvisoryEvent{value: val, isSet: true}
}

func (v NullableAdvisoryEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


