/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the ApiExploitsChange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiExploitsChange{}

// ApiExploitsChange struct for ApiExploitsChange
type ApiExploitsChange struct {
	ChangeTime *string `json:"change_time,omitempty"`
	ChangeType *string `json:"change_type,omitempty"`
	Field *string `json:"field,omitempty"`
	NewValue map[string]interface{} `json:"new_value,omitempty"`
	OldValue map[string]interface{} `json:"old_value,omitempty"`
}

// NewApiExploitsChange instantiates a new ApiExploitsChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiExploitsChange() *ApiExploitsChange {
	this := ApiExploitsChange{}
	return &this
}

// NewApiExploitsChangeWithDefaults instantiates a new ApiExploitsChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiExploitsChangeWithDefaults() *ApiExploitsChange {
	this := ApiExploitsChange{}
	return &this
}

// GetChangeTime returns the ChangeTime field value if set, zero value otherwise.
func (o *ApiExploitsChange) GetChangeTime() string {
	if o == nil || IsNil(o.ChangeTime) {
		var ret string
		return ret
	}
	return *o.ChangeTime
}

// GetChangeTimeOk returns a tuple with the ChangeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiExploitsChange) GetChangeTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ChangeTime) {
		return nil, false
	}
	return o.ChangeTime, true
}

// HasChangeTime returns a boolean if a field has been set.
func (o *ApiExploitsChange) HasChangeTime() bool {
	if o != nil && !IsNil(o.ChangeTime) {
		return true
	}

	return false
}

// SetChangeTime gets a reference to the given string and assigns it to the ChangeTime field.
func (o *ApiExploitsChange) SetChangeTime(v string) {
	o.ChangeTime = &v
}

// GetChangeType returns the ChangeType field value if set, zero value otherwise.
func (o *ApiExploitsChange) GetChangeType() string {
	if o == nil || IsNil(o.ChangeType) {
		var ret string
		return ret
	}
	return *o.ChangeType
}

// GetChangeTypeOk returns a tuple with the ChangeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiExploitsChange) GetChangeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ChangeType) {
		return nil, false
	}
	return o.ChangeType, true
}

// HasChangeType returns a boolean if a field has been set.
func (o *ApiExploitsChange) HasChangeType() bool {
	if o != nil && !IsNil(o.ChangeType) {
		return true
	}

	return false
}

// SetChangeType gets a reference to the given string and assigns it to the ChangeType field.
func (o *ApiExploitsChange) SetChangeType(v string) {
	o.ChangeType = &v
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *ApiExploitsChange) GetField() string {
	if o == nil || IsNil(o.Field) {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiExploitsChange) GetFieldOk() (*string, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *ApiExploitsChange) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *ApiExploitsChange) SetField(v string) {
	o.Field = &v
}

// GetNewValue returns the NewValue field value if set, zero value otherwise.
func (o *ApiExploitsChange) GetNewValue() map[string]interface{} {
	if o == nil || IsNil(o.NewValue) {
		var ret map[string]interface{}
		return ret
	}
	return o.NewValue
}

// GetNewValueOk returns a tuple with the NewValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiExploitsChange) GetNewValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.NewValue) {
		return map[string]interface{}{}, false
	}
	return o.NewValue, true
}

// HasNewValue returns a boolean if a field has been set.
func (o *ApiExploitsChange) HasNewValue() bool {
	if o != nil && !IsNil(o.NewValue) {
		return true
	}

	return false
}

// SetNewValue gets a reference to the given map[string]interface{} and assigns it to the NewValue field.
func (o *ApiExploitsChange) SetNewValue(v map[string]interface{}) {
	o.NewValue = v
}

// GetOldValue returns the OldValue field value if set, zero value otherwise.
func (o *ApiExploitsChange) GetOldValue() map[string]interface{} {
	if o == nil || IsNil(o.OldValue) {
		var ret map[string]interface{}
		return ret
	}
	return o.OldValue
}

// GetOldValueOk returns a tuple with the OldValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiExploitsChange) GetOldValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.OldValue) {
		return map[string]interface{}{}, false
	}
	return o.OldValue, true
}

// HasOldValue returns a boolean if a field has been set.
func (o *ApiExploitsChange) HasOldValue() bool {
	if o != nil && !IsNil(o.OldValue) {
		return true
	}

	return false
}

// SetOldValue gets a reference to the given map[string]interface{} and assigns it to the OldValue field.
func (o *ApiExploitsChange) SetOldValue(v map[string]interface{}) {
	o.OldValue = v
}

func (o ApiExploitsChange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiExploitsChange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChangeTime) {
		toSerialize["change_time"] = o.ChangeTime
	}
	if !IsNil(o.ChangeType) {
		toSerialize["change_type"] = o.ChangeType
	}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	if !IsNil(o.NewValue) {
		toSerialize["new_value"] = o.NewValue
	}
	if !IsNil(o.OldValue) {
		toSerialize["old_value"] = o.OldValue
	}
	return toSerialize, nil
}

type NullableApiExploitsChange struct {
	value *ApiExploitsChange
	isSet bool
}

func (v NullableApiExploitsChange) Get() *ApiExploitsChange {
	return v.value
}

func (v *NullableApiExploitsChange) Set(val *ApiExploitsChange) {
	v.value = val
	v.isSet = true
}

func (v NullableApiExploitsChange) IsSet() bool {
	return v.isSet
}

func (v *NullableApiExploitsChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiExploitsChange(val *ApiExploitsChange) *NullableApiExploitsChange {
	return &NullableApiExploitsChange{value: val, isSet: true}
}

func (v NullableApiExploitsChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiExploitsChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


