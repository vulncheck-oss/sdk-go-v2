/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the PurlsVulnerability type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PurlsVulnerability{}

// PurlsVulnerability struct for PurlsVulnerability
type PurlsVulnerability struct {
	Arch *string `json:"arch,omitempty"`
	Detection *string `json:"detection,omitempty"`
	FixedVersion *string `json:"fixed_version,omitempty"`
}

// NewPurlsVulnerability instantiates a new PurlsVulnerability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurlsVulnerability() *PurlsVulnerability {
	this := PurlsVulnerability{}
	return &this
}

// NewPurlsVulnerabilityWithDefaults instantiates a new PurlsVulnerability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurlsVulnerabilityWithDefaults() *PurlsVulnerability {
	this := PurlsVulnerability{}
	return &this
}

// GetArch returns the Arch field value if set, zero value otherwise.
func (o *PurlsVulnerability) GetArch() string {
	if o == nil || IsNil(o.Arch) {
		var ret string
		return ret
	}
	return *o.Arch
}

// GetArchOk returns a tuple with the Arch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurlsVulnerability) GetArchOk() (*string, bool) {
	if o == nil || IsNil(o.Arch) {
		return nil, false
	}
	return o.Arch, true
}

// HasArch returns a boolean if a field has been set.
func (o *PurlsVulnerability) HasArch() bool {
	if o != nil && !IsNil(o.Arch) {
		return true
	}

	return false
}

// SetArch gets a reference to the given string and assigns it to the Arch field.
func (o *PurlsVulnerability) SetArch(v string) {
	o.Arch = &v
}

// GetDetection returns the Detection field value if set, zero value otherwise.
func (o *PurlsVulnerability) GetDetection() string {
	if o == nil || IsNil(o.Detection) {
		var ret string
		return ret
	}
	return *o.Detection
}

// GetDetectionOk returns a tuple with the Detection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurlsVulnerability) GetDetectionOk() (*string, bool) {
	if o == nil || IsNil(o.Detection) {
		return nil, false
	}
	return o.Detection, true
}

// HasDetection returns a boolean if a field has been set.
func (o *PurlsVulnerability) HasDetection() bool {
	if o != nil && !IsNil(o.Detection) {
		return true
	}

	return false
}

// SetDetection gets a reference to the given string and assigns it to the Detection field.
func (o *PurlsVulnerability) SetDetection(v string) {
	o.Detection = &v
}

// GetFixedVersion returns the FixedVersion field value if set, zero value otherwise.
func (o *PurlsVulnerability) GetFixedVersion() string {
	if o == nil || IsNil(o.FixedVersion) {
		var ret string
		return ret
	}
	return *o.FixedVersion
}

// GetFixedVersionOk returns a tuple with the FixedVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurlsVulnerability) GetFixedVersionOk() (*string, bool) {
	if o == nil || IsNil(o.FixedVersion) {
		return nil, false
	}
	return o.FixedVersion, true
}

// HasFixedVersion returns a boolean if a field has been set.
func (o *PurlsVulnerability) HasFixedVersion() bool {
	if o != nil && !IsNil(o.FixedVersion) {
		return true
	}

	return false
}

// SetFixedVersion gets a reference to the given string and assigns it to the FixedVersion field.
func (o *PurlsVulnerability) SetFixedVersion(v string) {
	o.FixedVersion = &v
}

func (o PurlsVulnerability) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PurlsVulnerability) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Arch) {
		toSerialize["arch"] = o.Arch
	}
	if !IsNil(o.Detection) {
		toSerialize["detection"] = o.Detection
	}
	if !IsNil(o.FixedVersion) {
		toSerialize["fixed_version"] = o.FixedVersion
	}
	return toSerialize, nil
}

type NullablePurlsVulnerability struct {
	value *PurlsVulnerability
	isSet bool
}

func (v NullablePurlsVulnerability) Get() *PurlsVulnerability {
	return v.value
}

func (v *NullablePurlsVulnerability) Set(val *PurlsVulnerability) {
	v.value = val
	v.isSet = true
}

func (v NullablePurlsVulnerability) IsSet() bool {
	return v.isSet
}

func (v *NullablePurlsVulnerability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurlsVulnerability(val *PurlsVulnerability) *NullablePurlsVulnerability {
	return &NullablePurlsVulnerability{value: val, isSet: true}
}

func (v NullablePurlsVulnerability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurlsVulnerability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


