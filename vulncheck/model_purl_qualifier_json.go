/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the PurlQualifierJSON type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PurlQualifierJSON{}

// PurlQualifierJSON struct for PurlQualifierJSON
type PurlQualifierJSON struct {
	Key *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

// NewPurlQualifierJSON instantiates a new PurlQualifierJSON object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurlQualifierJSON() *PurlQualifierJSON {
	this := PurlQualifierJSON{}
	return &this
}

// NewPurlQualifierJSONWithDefaults instantiates a new PurlQualifierJSON object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurlQualifierJSONWithDefaults() *PurlQualifierJSON {
	this := PurlQualifierJSON{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *PurlQualifierJSON) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurlQualifierJSON) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *PurlQualifierJSON) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *PurlQualifierJSON) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *PurlQualifierJSON) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurlQualifierJSON) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *PurlQualifierJSON) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *PurlQualifierJSON) SetValue(v string) {
	o.Value = &v
}

func (o PurlQualifierJSON) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PurlQualifierJSON) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullablePurlQualifierJSON struct {
	value *PurlQualifierJSON
	isSet bool
}

func (v NullablePurlQualifierJSON) Get() *PurlQualifierJSON {
	return v.value
}

func (v *NullablePurlQualifierJSON) Set(val *PurlQualifierJSON) {
	v.value = val
	v.isSet = true
}

func (v NullablePurlQualifierJSON) IsSet() bool {
	return v.isSet
}

func (v *NullablePurlQualifierJSON) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurlQualifierJSON(val *PurlQualifierJSON) *NullablePurlQualifierJSON {
	return &NullablePurlQualifierJSON{value: val, isSet: true}
}

func (v NullablePurlQualifierJSON) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurlQualifierJSON) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


