/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryCESA type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryCESA{}

// AdvisoryCESA struct for AdvisoryCESA
type AdvisoryCESA struct {
	Arch []string `json:"arch,omitempty"`
	Cve []string `json:"cve,omitempty"`
	DateAdded *string `json:"date_added,omitempty"`
	Id *string `json:"id,omitempty"`
	IssueDate *string `json:"issueDate,omitempty"`
	OsRelease *string `json:"osRelease,omitempty"`
	Packages []AdvisoryCentosPackage `json:"packages,omitempty"`
	References []string `json:"references,omitempty"`
	Title *string `json:"title,omitempty"`
}

// NewAdvisoryCESA instantiates a new AdvisoryCESA object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryCESA() *AdvisoryCESA {
	this := AdvisoryCESA{}
	return &this
}

// NewAdvisoryCESAWithDefaults instantiates a new AdvisoryCESA object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryCESAWithDefaults() *AdvisoryCESA {
	this := AdvisoryCESA{}
	return &this
}

// GetArch returns the Arch field value if set, zero value otherwise.
func (o *AdvisoryCESA) GetArch() []string {
	if o == nil || IsNil(o.Arch) {
		var ret []string
		return ret
	}
	return o.Arch
}

// GetArchOk returns a tuple with the Arch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryCESA) GetArchOk() ([]string, bool) {
	if o == nil || IsNil(o.Arch) {
		return nil, false
	}
	return o.Arch, true
}

// HasArch returns a boolean if a field has been set.
func (o *AdvisoryCESA) HasArch() bool {
	if o != nil && !IsNil(o.Arch) {
		return true
	}

	return false
}

// SetArch gets a reference to the given []string and assigns it to the Arch field.
func (o *AdvisoryCESA) SetArch(v []string) {
	o.Arch = v
}

// GetCve returns the Cve field value if set, zero value otherwise.
func (o *AdvisoryCESA) GetCve() []string {
	if o == nil || IsNil(o.Cve) {
		var ret []string
		return ret
	}
	return o.Cve
}

// GetCveOk returns a tuple with the Cve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryCESA) GetCveOk() ([]string, bool) {
	if o == nil || IsNil(o.Cve) {
		return nil, false
	}
	return o.Cve, true
}

// HasCve returns a boolean if a field has been set.
func (o *AdvisoryCESA) HasCve() bool {
	if o != nil && !IsNil(o.Cve) {
		return true
	}

	return false
}

// SetCve gets a reference to the given []string and assigns it to the Cve field.
func (o *AdvisoryCESA) SetCve(v []string) {
	o.Cve = v
}

// GetDateAdded returns the DateAdded field value if set, zero value otherwise.
func (o *AdvisoryCESA) GetDateAdded() string {
	if o == nil || IsNil(o.DateAdded) {
		var ret string
		return ret
	}
	return *o.DateAdded
}

// GetDateAddedOk returns a tuple with the DateAdded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryCESA) GetDateAddedOk() (*string, bool) {
	if o == nil || IsNil(o.DateAdded) {
		return nil, false
	}
	return o.DateAdded, true
}

// HasDateAdded returns a boolean if a field has been set.
func (o *AdvisoryCESA) HasDateAdded() bool {
	if o != nil && !IsNil(o.DateAdded) {
		return true
	}

	return false
}

// SetDateAdded gets a reference to the given string and assigns it to the DateAdded field.
func (o *AdvisoryCESA) SetDateAdded(v string) {
	o.DateAdded = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AdvisoryCESA) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryCESA) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AdvisoryCESA) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AdvisoryCESA) SetId(v string) {
	o.Id = &v
}

// GetIssueDate returns the IssueDate field value if set, zero value otherwise.
func (o *AdvisoryCESA) GetIssueDate() string {
	if o == nil || IsNil(o.IssueDate) {
		var ret string
		return ret
	}
	return *o.IssueDate
}

// GetIssueDateOk returns a tuple with the IssueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryCESA) GetIssueDateOk() (*string, bool) {
	if o == nil || IsNil(o.IssueDate) {
		return nil, false
	}
	return o.IssueDate, true
}

// HasIssueDate returns a boolean if a field has been set.
func (o *AdvisoryCESA) HasIssueDate() bool {
	if o != nil && !IsNil(o.IssueDate) {
		return true
	}

	return false
}

// SetIssueDate gets a reference to the given string and assigns it to the IssueDate field.
func (o *AdvisoryCESA) SetIssueDate(v string) {
	o.IssueDate = &v
}

// GetOsRelease returns the OsRelease field value if set, zero value otherwise.
func (o *AdvisoryCESA) GetOsRelease() string {
	if o == nil || IsNil(o.OsRelease) {
		var ret string
		return ret
	}
	return *o.OsRelease
}

// GetOsReleaseOk returns a tuple with the OsRelease field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryCESA) GetOsReleaseOk() (*string, bool) {
	if o == nil || IsNil(o.OsRelease) {
		return nil, false
	}
	return o.OsRelease, true
}

// HasOsRelease returns a boolean if a field has been set.
func (o *AdvisoryCESA) HasOsRelease() bool {
	if o != nil && !IsNil(o.OsRelease) {
		return true
	}

	return false
}

// SetOsRelease gets a reference to the given string and assigns it to the OsRelease field.
func (o *AdvisoryCESA) SetOsRelease(v string) {
	o.OsRelease = &v
}

// GetPackages returns the Packages field value if set, zero value otherwise.
func (o *AdvisoryCESA) GetPackages() []AdvisoryCentosPackage {
	if o == nil || IsNil(o.Packages) {
		var ret []AdvisoryCentosPackage
		return ret
	}
	return o.Packages
}

// GetPackagesOk returns a tuple with the Packages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryCESA) GetPackagesOk() ([]AdvisoryCentosPackage, bool) {
	if o == nil || IsNil(o.Packages) {
		return nil, false
	}
	return o.Packages, true
}

// HasPackages returns a boolean if a field has been set.
func (o *AdvisoryCESA) HasPackages() bool {
	if o != nil && !IsNil(o.Packages) {
		return true
	}

	return false
}

// SetPackages gets a reference to the given []AdvisoryCentosPackage and assigns it to the Packages field.
func (o *AdvisoryCESA) SetPackages(v []AdvisoryCentosPackage) {
	o.Packages = v
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *AdvisoryCESA) GetReferences() []string {
	if o == nil || IsNil(o.References) {
		var ret []string
		return ret
	}
	return o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryCESA) GetReferencesOk() ([]string, bool) {
	if o == nil || IsNil(o.References) {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *AdvisoryCESA) HasReferences() bool {
	if o != nil && !IsNil(o.References) {
		return true
	}

	return false
}

// SetReferences gets a reference to the given []string and assigns it to the References field.
func (o *AdvisoryCESA) SetReferences(v []string) {
	o.References = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *AdvisoryCESA) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryCESA) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *AdvisoryCESA) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *AdvisoryCESA) SetTitle(v string) {
	o.Title = &v
}

func (o AdvisoryCESA) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryCESA) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Arch) {
		toSerialize["arch"] = o.Arch
	}
	if !IsNil(o.Cve) {
		toSerialize["cve"] = o.Cve
	}
	if !IsNil(o.DateAdded) {
		toSerialize["date_added"] = o.DateAdded
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IssueDate) {
		toSerialize["issueDate"] = o.IssueDate
	}
	if !IsNil(o.OsRelease) {
		toSerialize["osRelease"] = o.OsRelease
	}
	if !IsNil(o.Packages) {
		toSerialize["packages"] = o.Packages
	}
	if !IsNil(o.References) {
		toSerialize["references"] = o.References
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	return toSerialize, nil
}

type NullableAdvisoryCESA struct {
	value *AdvisoryCESA
	isSet bool
}

func (v NullableAdvisoryCESA) Get() *AdvisoryCESA {
	return v.value
}

func (v *NullableAdvisoryCESA) Set(val *AdvisoryCESA) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryCESA) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryCESA) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryCESA(val *AdvisoryCESA) *NullableAdvisoryCESA {
	return &NullableAdvisoryCESA{value: val, isSet: true}
}

func (v NullableAdvisoryCESA) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryCESA) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


