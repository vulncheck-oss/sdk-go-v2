/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryOpenSSLVulnerability type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryOpenSSLVulnerability{}

// AdvisoryOpenSSLVulnerability struct for AdvisoryOpenSSLVulnerability
type AdvisoryOpenSSLVulnerability struct {
	Cve []string `json:"cve,omitempty"`
	Fixed []AdvisoryFixAff `json:"fixed,omitempty"`
	Severity *string `json:"severity,omitempty"`
	Title *string `json:"title,omitempty"`
}

// NewAdvisoryOpenSSLVulnerability instantiates a new AdvisoryOpenSSLVulnerability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryOpenSSLVulnerability() *AdvisoryOpenSSLVulnerability {
	this := AdvisoryOpenSSLVulnerability{}
	return &this
}

// NewAdvisoryOpenSSLVulnerabilityWithDefaults instantiates a new AdvisoryOpenSSLVulnerability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryOpenSSLVulnerabilityWithDefaults() *AdvisoryOpenSSLVulnerability {
	this := AdvisoryOpenSSLVulnerability{}
	return &this
}

// GetCve returns the Cve field value if set, zero value otherwise.
func (o *AdvisoryOpenSSLVulnerability) GetCve() []string {
	if o == nil || IsNil(o.Cve) {
		var ret []string
		return ret
	}
	return o.Cve
}

// GetCveOk returns a tuple with the Cve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryOpenSSLVulnerability) GetCveOk() ([]string, bool) {
	if o == nil || IsNil(o.Cve) {
		return nil, false
	}
	return o.Cve, true
}

// HasCve returns a boolean if a field has been set.
func (o *AdvisoryOpenSSLVulnerability) HasCve() bool {
	if o != nil && !IsNil(o.Cve) {
		return true
	}

	return false
}

// SetCve gets a reference to the given []string and assigns it to the Cve field.
func (o *AdvisoryOpenSSLVulnerability) SetCve(v []string) {
	o.Cve = v
}

// GetFixed returns the Fixed field value if set, zero value otherwise.
func (o *AdvisoryOpenSSLVulnerability) GetFixed() []AdvisoryFixAff {
	if o == nil || IsNil(o.Fixed) {
		var ret []AdvisoryFixAff
		return ret
	}
	return o.Fixed
}

// GetFixedOk returns a tuple with the Fixed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryOpenSSLVulnerability) GetFixedOk() ([]AdvisoryFixAff, bool) {
	if o == nil || IsNil(o.Fixed) {
		return nil, false
	}
	return o.Fixed, true
}

// HasFixed returns a boolean if a field has been set.
func (o *AdvisoryOpenSSLVulnerability) HasFixed() bool {
	if o != nil && !IsNil(o.Fixed) {
		return true
	}

	return false
}

// SetFixed gets a reference to the given []AdvisoryFixAff and assigns it to the Fixed field.
func (o *AdvisoryOpenSSLVulnerability) SetFixed(v []AdvisoryFixAff) {
	o.Fixed = v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *AdvisoryOpenSSLVulnerability) GetSeverity() string {
	if o == nil || IsNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryOpenSSLVulnerability) GetSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *AdvisoryOpenSSLVulnerability) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *AdvisoryOpenSSLVulnerability) SetSeverity(v string) {
	o.Severity = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *AdvisoryOpenSSLVulnerability) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryOpenSSLVulnerability) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *AdvisoryOpenSSLVulnerability) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *AdvisoryOpenSSLVulnerability) SetTitle(v string) {
	o.Title = &v
}

func (o AdvisoryOpenSSLVulnerability) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryOpenSSLVulnerability) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cve) {
		toSerialize["cve"] = o.Cve
	}
	if !IsNil(o.Fixed) {
		toSerialize["fixed"] = o.Fixed
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	return toSerialize, nil
}

type NullableAdvisoryOpenSSLVulnerability struct {
	value *AdvisoryOpenSSLVulnerability
	isSet bool
}

func (v NullableAdvisoryOpenSSLVulnerability) Get() *AdvisoryOpenSSLVulnerability {
	return v.value
}

func (v *NullableAdvisoryOpenSSLVulnerability) Set(val *AdvisoryOpenSSLVulnerability) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryOpenSSLVulnerability) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryOpenSSLVulnerability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryOpenSSLVulnerability(val *AdvisoryOpenSSLVulnerability) *NullableAdvisoryOpenSSLVulnerability {
	return &NullableAdvisoryOpenSSLVulnerability{value: val, isSet: true}
}

func (v NullableAdvisoryOpenSSLVulnerability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryOpenSSLVulnerability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


