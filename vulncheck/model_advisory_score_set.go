/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryScoreSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryScoreSet{}

// AdvisoryScoreSet struct for AdvisoryScoreSet
type AdvisoryScoreSet struct {
	BaseScore *string `json:"baseScore,omitempty"`
	Vector *string `json:"vector,omitempty"`
}

// NewAdvisoryScoreSet instantiates a new AdvisoryScoreSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryScoreSet() *AdvisoryScoreSet {
	this := AdvisoryScoreSet{}
	return &this
}

// NewAdvisoryScoreSetWithDefaults instantiates a new AdvisoryScoreSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryScoreSetWithDefaults() *AdvisoryScoreSet {
	this := AdvisoryScoreSet{}
	return &this
}

// GetBaseScore returns the BaseScore field value if set, zero value otherwise.
func (o *AdvisoryScoreSet) GetBaseScore() string {
	if o == nil || IsNil(o.BaseScore) {
		var ret string
		return ret
	}
	return *o.BaseScore
}

// GetBaseScoreOk returns a tuple with the BaseScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryScoreSet) GetBaseScoreOk() (*string, bool) {
	if o == nil || IsNil(o.BaseScore) {
		return nil, false
	}
	return o.BaseScore, true
}

// HasBaseScore returns a boolean if a field has been set.
func (o *AdvisoryScoreSet) HasBaseScore() bool {
	if o != nil && !IsNil(o.BaseScore) {
		return true
	}

	return false
}

// SetBaseScore gets a reference to the given string and assigns it to the BaseScore field.
func (o *AdvisoryScoreSet) SetBaseScore(v string) {
	o.BaseScore = &v
}

// GetVector returns the Vector field value if set, zero value otherwise.
func (o *AdvisoryScoreSet) GetVector() string {
	if o == nil || IsNil(o.Vector) {
		var ret string
		return ret
	}
	return *o.Vector
}

// GetVectorOk returns a tuple with the Vector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryScoreSet) GetVectorOk() (*string, bool) {
	if o == nil || IsNil(o.Vector) {
		return nil, false
	}
	return o.Vector, true
}

// HasVector returns a boolean if a field has been set.
func (o *AdvisoryScoreSet) HasVector() bool {
	if o != nil && !IsNil(o.Vector) {
		return true
	}

	return false
}

// SetVector gets a reference to the given string and assigns it to the Vector field.
func (o *AdvisoryScoreSet) SetVector(v string) {
	o.Vector = &v
}

func (o AdvisoryScoreSet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryScoreSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BaseScore) {
		toSerialize["baseScore"] = o.BaseScore
	}
	if !IsNil(o.Vector) {
		toSerialize["vector"] = o.Vector
	}
	return toSerialize, nil
}

type NullableAdvisoryScoreSet struct {
	value *AdvisoryScoreSet
	isSet bool
}

func (v NullableAdvisoryScoreSet) Get() *AdvisoryScoreSet {
	return v.value
}

func (v *NullableAdvisoryScoreSet) Set(val *AdvisoryScoreSet) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryScoreSet) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryScoreSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryScoreSet(val *AdvisoryScoreSet) *NullableAdvisoryScoreSet {
	return &NullableAdvisoryScoreSet{value: val, isSet: true}
}

func (v NullableAdvisoryScoreSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryScoreSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


