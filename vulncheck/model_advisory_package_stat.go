/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryPackageStat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryPackageStat{}

// AdvisoryPackageStat struct for AdvisoryPackageStat
type AdvisoryPackageStat struct {
	Cpe *string `json:"cpe,omitempty"`
	FixState *string `json:"fix_state,omitempty"`
	PackageName *string `json:"package_name,omitempty"`
	ProductName *string `json:"product_name,omitempty"`
}

// NewAdvisoryPackageStat instantiates a new AdvisoryPackageStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryPackageStat() *AdvisoryPackageStat {
	this := AdvisoryPackageStat{}
	return &this
}

// NewAdvisoryPackageStatWithDefaults instantiates a new AdvisoryPackageStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryPackageStatWithDefaults() *AdvisoryPackageStat {
	this := AdvisoryPackageStat{}
	return &this
}

// GetCpe returns the Cpe field value if set, zero value otherwise.
func (o *AdvisoryPackageStat) GetCpe() string {
	if o == nil || IsNil(o.Cpe) {
		var ret string
		return ret
	}
	return *o.Cpe
}

// GetCpeOk returns a tuple with the Cpe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryPackageStat) GetCpeOk() (*string, bool) {
	if o == nil || IsNil(o.Cpe) {
		return nil, false
	}
	return o.Cpe, true
}

// HasCpe returns a boolean if a field has been set.
func (o *AdvisoryPackageStat) HasCpe() bool {
	if o != nil && !IsNil(o.Cpe) {
		return true
	}

	return false
}

// SetCpe gets a reference to the given string and assigns it to the Cpe field.
func (o *AdvisoryPackageStat) SetCpe(v string) {
	o.Cpe = &v
}

// GetFixState returns the FixState field value if set, zero value otherwise.
func (o *AdvisoryPackageStat) GetFixState() string {
	if o == nil || IsNil(o.FixState) {
		var ret string
		return ret
	}
	return *o.FixState
}

// GetFixStateOk returns a tuple with the FixState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryPackageStat) GetFixStateOk() (*string, bool) {
	if o == nil || IsNil(o.FixState) {
		return nil, false
	}
	return o.FixState, true
}

// HasFixState returns a boolean if a field has been set.
func (o *AdvisoryPackageStat) HasFixState() bool {
	if o != nil && !IsNil(o.FixState) {
		return true
	}

	return false
}

// SetFixState gets a reference to the given string and assigns it to the FixState field.
func (o *AdvisoryPackageStat) SetFixState(v string) {
	o.FixState = &v
}

// GetPackageName returns the PackageName field value if set, zero value otherwise.
func (o *AdvisoryPackageStat) GetPackageName() string {
	if o == nil || IsNil(o.PackageName) {
		var ret string
		return ret
	}
	return *o.PackageName
}

// GetPackageNameOk returns a tuple with the PackageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryPackageStat) GetPackageNameOk() (*string, bool) {
	if o == nil || IsNil(o.PackageName) {
		return nil, false
	}
	return o.PackageName, true
}

// HasPackageName returns a boolean if a field has been set.
func (o *AdvisoryPackageStat) HasPackageName() bool {
	if o != nil && !IsNil(o.PackageName) {
		return true
	}

	return false
}

// SetPackageName gets a reference to the given string and assigns it to the PackageName field.
func (o *AdvisoryPackageStat) SetPackageName(v string) {
	o.PackageName = &v
}

// GetProductName returns the ProductName field value if set, zero value otherwise.
func (o *AdvisoryPackageStat) GetProductName() string {
	if o == nil || IsNil(o.ProductName) {
		var ret string
		return ret
	}
	return *o.ProductName
}

// GetProductNameOk returns a tuple with the ProductName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryPackageStat) GetProductNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProductName) {
		return nil, false
	}
	return o.ProductName, true
}

// HasProductName returns a boolean if a field has been set.
func (o *AdvisoryPackageStat) HasProductName() bool {
	if o != nil && !IsNil(o.ProductName) {
		return true
	}

	return false
}

// SetProductName gets a reference to the given string and assigns it to the ProductName field.
func (o *AdvisoryPackageStat) SetProductName(v string) {
	o.ProductName = &v
}

func (o AdvisoryPackageStat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryPackageStat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cpe) {
		toSerialize["cpe"] = o.Cpe
	}
	if !IsNil(o.FixState) {
		toSerialize["fix_state"] = o.FixState
	}
	if !IsNil(o.PackageName) {
		toSerialize["package_name"] = o.PackageName
	}
	if !IsNil(o.ProductName) {
		toSerialize["product_name"] = o.ProductName
	}
	return toSerialize, nil
}

type NullableAdvisoryPackageStat struct {
	value *AdvisoryPackageStat
	isSet bool
}

func (v NullableAdvisoryPackageStat) Get() *AdvisoryPackageStat {
	return v.value
}

func (v *NullableAdvisoryPackageStat) Set(val *AdvisoryPackageStat) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryPackageStat) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryPackageStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryPackageStat(val *AdvisoryPackageStat) *NullableAdvisoryPackageStat {
	return &NullableAdvisoryPackageStat{value: val, isSet: true}
}

func (v NullableAdvisoryPackageStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryPackageStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


