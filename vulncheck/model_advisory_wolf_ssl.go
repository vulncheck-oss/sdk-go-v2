/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryWolfSSL type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryWolfSSL{}

// AdvisoryWolfSSL struct for AdvisoryWolfSSL
type AdvisoryWolfSSL struct {
	Cve []string `json:"cve,omitempty"`
	DateAdded *string `json:"date_added,omitempty"`
	Description *string `json:"description,omitempty"`
	FixedVersion *string `json:"fixed_version,omitempty"`
	Severity *string `json:"severity,omitempty"`
}

// NewAdvisoryWolfSSL instantiates a new AdvisoryWolfSSL object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryWolfSSL() *AdvisoryWolfSSL {
	this := AdvisoryWolfSSL{}
	return &this
}

// NewAdvisoryWolfSSLWithDefaults instantiates a new AdvisoryWolfSSL object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryWolfSSLWithDefaults() *AdvisoryWolfSSL {
	this := AdvisoryWolfSSL{}
	return &this
}

// GetCve returns the Cve field value if set, zero value otherwise.
func (o *AdvisoryWolfSSL) GetCve() []string {
	if o == nil || IsNil(o.Cve) {
		var ret []string
		return ret
	}
	return o.Cve
}

// GetCveOk returns a tuple with the Cve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryWolfSSL) GetCveOk() ([]string, bool) {
	if o == nil || IsNil(o.Cve) {
		return nil, false
	}
	return o.Cve, true
}

// HasCve returns a boolean if a field has been set.
func (o *AdvisoryWolfSSL) HasCve() bool {
	if o != nil && !IsNil(o.Cve) {
		return true
	}

	return false
}

// SetCve gets a reference to the given []string and assigns it to the Cve field.
func (o *AdvisoryWolfSSL) SetCve(v []string) {
	o.Cve = v
}

// GetDateAdded returns the DateAdded field value if set, zero value otherwise.
func (o *AdvisoryWolfSSL) GetDateAdded() string {
	if o == nil || IsNil(o.DateAdded) {
		var ret string
		return ret
	}
	return *o.DateAdded
}

// GetDateAddedOk returns a tuple with the DateAdded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryWolfSSL) GetDateAddedOk() (*string, bool) {
	if o == nil || IsNil(o.DateAdded) {
		return nil, false
	}
	return o.DateAdded, true
}

// HasDateAdded returns a boolean if a field has been set.
func (o *AdvisoryWolfSSL) HasDateAdded() bool {
	if o != nil && !IsNil(o.DateAdded) {
		return true
	}

	return false
}

// SetDateAdded gets a reference to the given string and assigns it to the DateAdded field.
func (o *AdvisoryWolfSSL) SetDateAdded(v string) {
	o.DateAdded = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AdvisoryWolfSSL) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryWolfSSL) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AdvisoryWolfSSL) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AdvisoryWolfSSL) SetDescription(v string) {
	o.Description = &v
}

// GetFixedVersion returns the FixedVersion field value if set, zero value otherwise.
func (o *AdvisoryWolfSSL) GetFixedVersion() string {
	if o == nil || IsNil(o.FixedVersion) {
		var ret string
		return ret
	}
	return *o.FixedVersion
}

// GetFixedVersionOk returns a tuple with the FixedVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryWolfSSL) GetFixedVersionOk() (*string, bool) {
	if o == nil || IsNil(o.FixedVersion) {
		return nil, false
	}
	return o.FixedVersion, true
}

// HasFixedVersion returns a boolean if a field has been set.
func (o *AdvisoryWolfSSL) HasFixedVersion() bool {
	if o != nil && !IsNil(o.FixedVersion) {
		return true
	}

	return false
}

// SetFixedVersion gets a reference to the given string and assigns it to the FixedVersion field.
func (o *AdvisoryWolfSSL) SetFixedVersion(v string) {
	o.FixedVersion = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *AdvisoryWolfSSL) GetSeverity() string {
	if o == nil || IsNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryWolfSSL) GetSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *AdvisoryWolfSSL) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *AdvisoryWolfSSL) SetSeverity(v string) {
	o.Severity = &v
}

func (o AdvisoryWolfSSL) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryWolfSSL) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cve) {
		toSerialize["cve"] = o.Cve
	}
	if !IsNil(o.DateAdded) {
		toSerialize["date_added"] = o.DateAdded
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.FixedVersion) {
		toSerialize["fixed_version"] = o.FixedVersion
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	return toSerialize, nil
}

type NullableAdvisoryWolfSSL struct {
	value *AdvisoryWolfSSL
	isSet bool
}

func (v NullableAdvisoryWolfSSL) Get() *AdvisoryWolfSSL {
	return v.value
}

func (v *NullableAdvisoryWolfSSL) Set(val *AdvisoryWolfSSL) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryWolfSSL) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryWolfSSL) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryWolfSSL(val *AdvisoryWolfSSL) *NullableAdvisoryWolfSSL {
	return &NullableAdvisoryWolfSSL{value: val, isSet: true}
}

func (v NullableAdvisoryWolfSSL) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryWolfSSL) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


