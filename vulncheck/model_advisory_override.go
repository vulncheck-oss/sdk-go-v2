/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryOverride type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryOverride{}

// AdvisoryOverride struct for AdvisoryOverride
type AdvisoryOverride struct {
	Annotation *AdvisoryOverrideAnnotation `json:"_annotation,omitempty"`
	Cve *AdvisoryOverrideCVE `json:"cve,omitempty"`
}

// NewAdvisoryOverride instantiates a new AdvisoryOverride object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryOverride() *AdvisoryOverride {
	this := AdvisoryOverride{}
	return &this
}

// NewAdvisoryOverrideWithDefaults instantiates a new AdvisoryOverride object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryOverrideWithDefaults() *AdvisoryOverride {
	this := AdvisoryOverride{}
	return &this
}

// GetAnnotation returns the Annotation field value if set, zero value otherwise.
func (o *AdvisoryOverride) GetAnnotation() AdvisoryOverrideAnnotation {
	if o == nil || IsNil(o.Annotation) {
		var ret AdvisoryOverrideAnnotation
		return ret
	}
	return *o.Annotation
}

// GetAnnotationOk returns a tuple with the Annotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryOverride) GetAnnotationOk() (*AdvisoryOverrideAnnotation, bool) {
	if o == nil || IsNil(o.Annotation) {
		return nil, false
	}
	return o.Annotation, true
}

// HasAnnotation returns a boolean if a field has been set.
func (o *AdvisoryOverride) HasAnnotation() bool {
	if o != nil && !IsNil(o.Annotation) {
		return true
	}

	return false
}

// SetAnnotation gets a reference to the given AdvisoryOverrideAnnotation and assigns it to the Annotation field.
func (o *AdvisoryOverride) SetAnnotation(v AdvisoryOverrideAnnotation) {
	o.Annotation = &v
}

// GetCve returns the Cve field value if set, zero value otherwise.
func (o *AdvisoryOverride) GetCve() AdvisoryOverrideCVE {
	if o == nil || IsNil(o.Cve) {
		var ret AdvisoryOverrideCVE
		return ret
	}
	return *o.Cve
}

// GetCveOk returns a tuple with the Cve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryOverride) GetCveOk() (*AdvisoryOverrideCVE, bool) {
	if o == nil || IsNil(o.Cve) {
		return nil, false
	}
	return o.Cve, true
}

// HasCve returns a boolean if a field has been set.
func (o *AdvisoryOverride) HasCve() bool {
	if o != nil && !IsNil(o.Cve) {
		return true
	}

	return false
}

// SetCve gets a reference to the given AdvisoryOverrideCVE and assigns it to the Cve field.
func (o *AdvisoryOverride) SetCve(v AdvisoryOverrideCVE) {
	o.Cve = &v
}

func (o AdvisoryOverride) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryOverride) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Annotation) {
		toSerialize["_annotation"] = o.Annotation
	}
	if !IsNil(o.Cve) {
		toSerialize["cve"] = o.Cve
	}
	return toSerialize, nil
}

type NullableAdvisoryOverride struct {
	value *AdvisoryOverride
	isSet bool
}

func (v NullableAdvisoryOverride) Get() *AdvisoryOverride {
	return v.value
}

func (v *NullableAdvisoryOverride) Set(val *AdvisoryOverride) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryOverride) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryOverride) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryOverride(val *AdvisoryOverride) *NullableAdvisoryOverride {
	return &NullableAdvisoryOverride{value: val, isSet: true}
}

func (v NullableAdvisoryOverride) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryOverride) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


