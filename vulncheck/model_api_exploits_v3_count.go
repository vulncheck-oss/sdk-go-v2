/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the ApiExploitsV3Count type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiExploitsV3Count{}

// ApiExploitsV3Count struct for ApiExploitsV3Count
type ApiExploitsV3Count struct {
	Botnets *int32 `json:"botnets,omitempty"`
	Exploits *int32 `json:"exploits,omitempty"`
	RansomwareFamilies *int32 `json:"ransomware_families,omitempty"`
	ThreatActors *int32 `json:"threat_actors,omitempty"`
}

// NewApiExploitsV3Count instantiates a new ApiExploitsV3Count object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiExploitsV3Count() *ApiExploitsV3Count {
	this := ApiExploitsV3Count{}
	return &this
}

// NewApiExploitsV3CountWithDefaults instantiates a new ApiExploitsV3Count object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiExploitsV3CountWithDefaults() *ApiExploitsV3Count {
	this := ApiExploitsV3Count{}
	return &this
}

// GetBotnets returns the Botnets field value if set, zero value otherwise.
func (o *ApiExploitsV3Count) GetBotnets() int32 {
	if o == nil || IsNil(o.Botnets) {
		var ret int32
		return ret
	}
	return *o.Botnets
}

// GetBotnetsOk returns a tuple with the Botnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiExploitsV3Count) GetBotnetsOk() (*int32, bool) {
	if o == nil || IsNil(o.Botnets) {
		return nil, false
	}
	return o.Botnets, true
}

// HasBotnets returns a boolean if a field has been set.
func (o *ApiExploitsV3Count) HasBotnets() bool {
	if o != nil && !IsNil(o.Botnets) {
		return true
	}

	return false
}

// SetBotnets gets a reference to the given int32 and assigns it to the Botnets field.
func (o *ApiExploitsV3Count) SetBotnets(v int32) {
	o.Botnets = &v
}

// GetExploits returns the Exploits field value if set, zero value otherwise.
func (o *ApiExploitsV3Count) GetExploits() int32 {
	if o == nil || IsNil(o.Exploits) {
		var ret int32
		return ret
	}
	return *o.Exploits
}

// GetExploitsOk returns a tuple with the Exploits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiExploitsV3Count) GetExploitsOk() (*int32, bool) {
	if o == nil || IsNil(o.Exploits) {
		return nil, false
	}
	return o.Exploits, true
}

// HasExploits returns a boolean if a field has been set.
func (o *ApiExploitsV3Count) HasExploits() bool {
	if o != nil && !IsNil(o.Exploits) {
		return true
	}

	return false
}

// SetExploits gets a reference to the given int32 and assigns it to the Exploits field.
func (o *ApiExploitsV3Count) SetExploits(v int32) {
	o.Exploits = &v
}

// GetRansomwareFamilies returns the RansomwareFamilies field value if set, zero value otherwise.
func (o *ApiExploitsV3Count) GetRansomwareFamilies() int32 {
	if o == nil || IsNil(o.RansomwareFamilies) {
		var ret int32
		return ret
	}
	return *o.RansomwareFamilies
}

// GetRansomwareFamiliesOk returns a tuple with the RansomwareFamilies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiExploitsV3Count) GetRansomwareFamiliesOk() (*int32, bool) {
	if o == nil || IsNil(o.RansomwareFamilies) {
		return nil, false
	}
	return o.RansomwareFamilies, true
}

// HasRansomwareFamilies returns a boolean if a field has been set.
func (o *ApiExploitsV3Count) HasRansomwareFamilies() bool {
	if o != nil && !IsNil(o.RansomwareFamilies) {
		return true
	}

	return false
}

// SetRansomwareFamilies gets a reference to the given int32 and assigns it to the RansomwareFamilies field.
func (o *ApiExploitsV3Count) SetRansomwareFamilies(v int32) {
	o.RansomwareFamilies = &v
}

// GetThreatActors returns the ThreatActors field value if set, zero value otherwise.
func (o *ApiExploitsV3Count) GetThreatActors() int32 {
	if o == nil || IsNil(o.ThreatActors) {
		var ret int32
		return ret
	}
	return *o.ThreatActors
}

// GetThreatActorsOk returns a tuple with the ThreatActors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiExploitsV3Count) GetThreatActorsOk() (*int32, bool) {
	if o == nil || IsNil(o.ThreatActors) {
		return nil, false
	}
	return o.ThreatActors, true
}

// HasThreatActors returns a boolean if a field has been set.
func (o *ApiExploitsV3Count) HasThreatActors() bool {
	if o != nil && !IsNil(o.ThreatActors) {
		return true
	}

	return false
}

// SetThreatActors gets a reference to the given int32 and assigns it to the ThreatActors field.
func (o *ApiExploitsV3Count) SetThreatActors(v int32) {
	o.ThreatActors = &v
}

func (o ApiExploitsV3Count) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiExploitsV3Count) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Botnets) {
		toSerialize["botnets"] = o.Botnets
	}
	if !IsNil(o.Exploits) {
		toSerialize["exploits"] = o.Exploits
	}
	if !IsNil(o.RansomwareFamilies) {
		toSerialize["ransomware_families"] = o.RansomwareFamilies
	}
	if !IsNil(o.ThreatActors) {
		toSerialize["threat_actors"] = o.ThreatActors
	}
	return toSerialize, nil
}

type NullableApiExploitsV3Count struct {
	value *ApiExploitsV3Count
	isSet bool
}

func (v NullableApiExploitsV3Count) Get() *ApiExploitsV3Count {
	return v.value
}

func (v *NullableApiExploitsV3Count) Set(val *ApiExploitsV3Count) {
	v.value = val
	v.isSet = true
}

func (v NullableApiExploitsV3Count) IsSet() bool {
	return v.isSet
}

func (v *NullableApiExploitsV3Count) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiExploitsV3Count(val *ApiExploitsV3Count) *NullableApiExploitsV3Count {
	return &NullableApiExploitsV3Count{value: val, isSet: true}
}

func (v NullableApiExploitsV3Count) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiExploitsV3Count) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


