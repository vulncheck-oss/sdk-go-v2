/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisorySiemensDocument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisorySiemensDocument{}

// AdvisorySiemensDocument struct for AdvisorySiemensDocument
type AdvisorySiemensDocument struct {
	Acknowledgments []AdvisorySiemensAcknowledgments `json:"acknowledgments,omitempty"`
	Category *string `json:"category,omitempty"`
	CsafVersion *string `json:"csaf_version,omitempty"`
	Distribution *AdvisorySiemensDistribution `json:"distribution,omitempty"`
	Notes []AdvisorySiemensNotes `json:"notes,omitempty"`
	Publisher *AdvisorySiemensPublisher `json:"publisher,omitempty"`
	References []AdvisorySiemensReferences `json:"references,omitempty"`
	Title *string `json:"title,omitempty"`
	Tracking *AdvisorySiemensTracking `json:"tracking,omitempty"`
}

// NewAdvisorySiemensDocument instantiates a new AdvisorySiemensDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisorySiemensDocument() *AdvisorySiemensDocument {
	this := AdvisorySiemensDocument{}
	return &this
}

// NewAdvisorySiemensDocumentWithDefaults instantiates a new AdvisorySiemensDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisorySiemensDocumentWithDefaults() *AdvisorySiemensDocument {
	this := AdvisorySiemensDocument{}
	return &this
}

// GetAcknowledgments returns the Acknowledgments field value if set, zero value otherwise.
func (o *AdvisorySiemensDocument) GetAcknowledgments() []AdvisorySiemensAcknowledgments {
	if o == nil || IsNil(o.Acknowledgments) {
		var ret []AdvisorySiemensAcknowledgments
		return ret
	}
	return o.Acknowledgments
}

// GetAcknowledgmentsOk returns a tuple with the Acknowledgments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisorySiemensDocument) GetAcknowledgmentsOk() ([]AdvisorySiemensAcknowledgments, bool) {
	if o == nil || IsNil(o.Acknowledgments) {
		return nil, false
	}
	return o.Acknowledgments, true
}

// HasAcknowledgments returns a boolean if a field has been set.
func (o *AdvisorySiemensDocument) HasAcknowledgments() bool {
	if o != nil && !IsNil(o.Acknowledgments) {
		return true
	}

	return false
}

// SetAcknowledgments gets a reference to the given []AdvisorySiemensAcknowledgments and assigns it to the Acknowledgments field.
func (o *AdvisorySiemensDocument) SetAcknowledgments(v []AdvisorySiemensAcknowledgments) {
	o.Acknowledgments = v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *AdvisorySiemensDocument) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisorySiemensDocument) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *AdvisorySiemensDocument) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *AdvisorySiemensDocument) SetCategory(v string) {
	o.Category = &v
}

// GetCsafVersion returns the CsafVersion field value if set, zero value otherwise.
func (o *AdvisorySiemensDocument) GetCsafVersion() string {
	if o == nil || IsNil(o.CsafVersion) {
		var ret string
		return ret
	}
	return *o.CsafVersion
}

// GetCsafVersionOk returns a tuple with the CsafVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisorySiemensDocument) GetCsafVersionOk() (*string, bool) {
	if o == nil || IsNil(o.CsafVersion) {
		return nil, false
	}
	return o.CsafVersion, true
}

// HasCsafVersion returns a boolean if a field has been set.
func (o *AdvisorySiemensDocument) HasCsafVersion() bool {
	if o != nil && !IsNil(o.CsafVersion) {
		return true
	}

	return false
}

// SetCsafVersion gets a reference to the given string and assigns it to the CsafVersion field.
func (o *AdvisorySiemensDocument) SetCsafVersion(v string) {
	o.CsafVersion = &v
}

// GetDistribution returns the Distribution field value if set, zero value otherwise.
func (o *AdvisorySiemensDocument) GetDistribution() AdvisorySiemensDistribution {
	if o == nil || IsNil(o.Distribution) {
		var ret AdvisorySiemensDistribution
		return ret
	}
	return *o.Distribution
}

// GetDistributionOk returns a tuple with the Distribution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisorySiemensDocument) GetDistributionOk() (*AdvisorySiemensDistribution, bool) {
	if o == nil || IsNil(o.Distribution) {
		return nil, false
	}
	return o.Distribution, true
}

// HasDistribution returns a boolean if a field has been set.
func (o *AdvisorySiemensDocument) HasDistribution() bool {
	if o != nil && !IsNil(o.Distribution) {
		return true
	}

	return false
}

// SetDistribution gets a reference to the given AdvisorySiemensDistribution and assigns it to the Distribution field.
func (o *AdvisorySiemensDocument) SetDistribution(v AdvisorySiemensDistribution) {
	o.Distribution = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *AdvisorySiemensDocument) GetNotes() []AdvisorySiemensNotes {
	if o == nil || IsNil(o.Notes) {
		var ret []AdvisorySiemensNotes
		return ret
	}
	return o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisorySiemensDocument) GetNotesOk() ([]AdvisorySiemensNotes, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *AdvisorySiemensDocument) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given []AdvisorySiemensNotes and assigns it to the Notes field.
func (o *AdvisorySiemensDocument) SetNotes(v []AdvisorySiemensNotes) {
	o.Notes = v
}

// GetPublisher returns the Publisher field value if set, zero value otherwise.
func (o *AdvisorySiemensDocument) GetPublisher() AdvisorySiemensPublisher {
	if o == nil || IsNil(o.Publisher) {
		var ret AdvisorySiemensPublisher
		return ret
	}
	return *o.Publisher
}

// GetPublisherOk returns a tuple with the Publisher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisorySiemensDocument) GetPublisherOk() (*AdvisorySiemensPublisher, bool) {
	if o == nil || IsNil(o.Publisher) {
		return nil, false
	}
	return o.Publisher, true
}

// HasPublisher returns a boolean if a field has been set.
func (o *AdvisorySiemensDocument) HasPublisher() bool {
	if o != nil && !IsNil(o.Publisher) {
		return true
	}

	return false
}

// SetPublisher gets a reference to the given AdvisorySiemensPublisher and assigns it to the Publisher field.
func (o *AdvisorySiemensDocument) SetPublisher(v AdvisorySiemensPublisher) {
	o.Publisher = &v
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *AdvisorySiemensDocument) GetReferences() []AdvisorySiemensReferences {
	if o == nil || IsNil(o.References) {
		var ret []AdvisorySiemensReferences
		return ret
	}
	return o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisorySiemensDocument) GetReferencesOk() ([]AdvisorySiemensReferences, bool) {
	if o == nil || IsNil(o.References) {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *AdvisorySiemensDocument) HasReferences() bool {
	if o != nil && !IsNil(o.References) {
		return true
	}

	return false
}

// SetReferences gets a reference to the given []AdvisorySiemensReferences and assigns it to the References field.
func (o *AdvisorySiemensDocument) SetReferences(v []AdvisorySiemensReferences) {
	o.References = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *AdvisorySiemensDocument) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisorySiemensDocument) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *AdvisorySiemensDocument) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *AdvisorySiemensDocument) SetTitle(v string) {
	o.Title = &v
}

// GetTracking returns the Tracking field value if set, zero value otherwise.
func (o *AdvisorySiemensDocument) GetTracking() AdvisorySiemensTracking {
	if o == nil || IsNil(o.Tracking) {
		var ret AdvisorySiemensTracking
		return ret
	}
	return *o.Tracking
}

// GetTrackingOk returns a tuple with the Tracking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisorySiemensDocument) GetTrackingOk() (*AdvisorySiemensTracking, bool) {
	if o == nil || IsNil(o.Tracking) {
		return nil, false
	}
	return o.Tracking, true
}

// HasTracking returns a boolean if a field has been set.
func (o *AdvisorySiemensDocument) HasTracking() bool {
	if o != nil && !IsNil(o.Tracking) {
		return true
	}

	return false
}

// SetTracking gets a reference to the given AdvisorySiemensTracking and assigns it to the Tracking field.
func (o *AdvisorySiemensDocument) SetTracking(v AdvisorySiemensTracking) {
	o.Tracking = &v
}

func (o AdvisorySiemensDocument) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisorySiemensDocument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Acknowledgments) {
		toSerialize["acknowledgments"] = o.Acknowledgments
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.CsafVersion) {
		toSerialize["csaf_version"] = o.CsafVersion
	}
	if !IsNil(o.Distribution) {
		toSerialize["distribution"] = o.Distribution
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.Publisher) {
		toSerialize["publisher"] = o.Publisher
	}
	if !IsNil(o.References) {
		toSerialize["references"] = o.References
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Tracking) {
		toSerialize["tracking"] = o.Tracking
	}
	return toSerialize, nil
}

type NullableAdvisorySiemensDocument struct {
	value *AdvisorySiemensDocument
	isSet bool
}

func (v NullableAdvisorySiemensDocument) Get() *AdvisorySiemensDocument {
	return v.value
}

func (v *NullableAdvisorySiemensDocument) Set(val *AdvisorySiemensDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisorySiemensDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisorySiemensDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisorySiemensDocument(val *AdvisorySiemensDocument) *NullableAdvisorySiemensDocument {
	return &NullableAdvisorySiemensDocument{value: val, isSet: true}
}

func (v NullableAdvisorySiemensDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisorySiemensDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


