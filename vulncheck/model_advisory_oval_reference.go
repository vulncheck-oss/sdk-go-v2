/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryOvalReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryOvalReference{}

// AdvisoryOvalReference struct for AdvisoryOvalReference
type AdvisoryOvalReference struct {
	RefId *string `json:"ref_id,omitempty"`
	RefUrl *string `json:"ref_url,omitempty"`
	Source *string `json:"source,omitempty"`
}

// NewAdvisoryOvalReference instantiates a new AdvisoryOvalReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryOvalReference() *AdvisoryOvalReference {
	this := AdvisoryOvalReference{}
	return &this
}

// NewAdvisoryOvalReferenceWithDefaults instantiates a new AdvisoryOvalReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryOvalReferenceWithDefaults() *AdvisoryOvalReference {
	this := AdvisoryOvalReference{}
	return &this
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *AdvisoryOvalReference) GetRefId() string {
	if o == nil || IsNil(o.RefId) {
		var ret string
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryOvalReference) GetRefIdOk() (*string, bool) {
	if o == nil || IsNil(o.RefId) {
		return nil, false
	}
	return o.RefId, true
}

// HasRefId returns a boolean if a field has been set.
func (o *AdvisoryOvalReference) HasRefId() bool {
	if o != nil && !IsNil(o.RefId) {
		return true
	}

	return false
}

// SetRefId gets a reference to the given string and assigns it to the RefId field.
func (o *AdvisoryOvalReference) SetRefId(v string) {
	o.RefId = &v
}

// GetRefUrl returns the RefUrl field value if set, zero value otherwise.
func (o *AdvisoryOvalReference) GetRefUrl() string {
	if o == nil || IsNil(o.RefUrl) {
		var ret string
		return ret
	}
	return *o.RefUrl
}

// GetRefUrlOk returns a tuple with the RefUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryOvalReference) GetRefUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RefUrl) {
		return nil, false
	}
	return o.RefUrl, true
}

// HasRefUrl returns a boolean if a field has been set.
func (o *AdvisoryOvalReference) HasRefUrl() bool {
	if o != nil && !IsNil(o.RefUrl) {
		return true
	}

	return false
}

// SetRefUrl gets a reference to the given string and assigns it to the RefUrl field.
func (o *AdvisoryOvalReference) SetRefUrl(v string) {
	o.RefUrl = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *AdvisoryOvalReference) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryOvalReference) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *AdvisoryOvalReference) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *AdvisoryOvalReference) SetSource(v string) {
	o.Source = &v
}

func (o AdvisoryOvalReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryOvalReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RefId) {
		toSerialize["ref_id"] = o.RefId
	}
	if !IsNil(o.RefUrl) {
		toSerialize["ref_url"] = o.RefUrl
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	return toSerialize, nil
}

type NullableAdvisoryOvalReference struct {
	value *AdvisoryOvalReference
	isSet bool
}

func (v NullableAdvisoryOvalReference) Get() *AdvisoryOvalReference {
	return v.value
}

func (v *NullableAdvisoryOvalReference) Set(val *AdvisoryOvalReference) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryOvalReference) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryOvalReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryOvalReference(val *AdvisoryOvalReference) *NullableAdvisoryOvalReference {
	return &NullableAdvisoryOvalReference{value: val, isSet: true}
}

func (v NullableAdvisoryOvalReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryOvalReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


