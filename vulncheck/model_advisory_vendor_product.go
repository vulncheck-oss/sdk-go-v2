/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryVendorProduct type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryVendorProduct{}

// AdvisoryVendorProduct struct for AdvisoryVendorProduct
type AdvisoryVendorProduct struct {
	Product *string `json:"product,omitempty"`
	Vendor *string `json:"vendor,omitempty"`
}

// NewAdvisoryVendorProduct instantiates a new AdvisoryVendorProduct object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryVendorProduct() *AdvisoryVendorProduct {
	this := AdvisoryVendorProduct{}
	return &this
}

// NewAdvisoryVendorProductWithDefaults instantiates a new AdvisoryVendorProduct object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryVendorProductWithDefaults() *AdvisoryVendorProduct {
	this := AdvisoryVendorProduct{}
	return &this
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *AdvisoryVendorProduct) GetProduct() string {
	if o == nil || IsNil(o.Product) {
		var ret string
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryVendorProduct) GetProductOk() (*string, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *AdvisoryVendorProduct) HasProduct() bool {
	if o != nil && !IsNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given string and assigns it to the Product field.
func (o *AdvisoryVendorProduct) SetProduct(v string) {
	o.Product = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *AdvisoryVendorProduct) GetVendor() string {
	if o == nil || IsNil(o.Vendor) {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryVendorProduct) GetVendorOk() (*string, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *AdvisoryVendorProduct) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *AdvisoryVendorProduct) SetVendor(v string) {
	o.Vendor = &v
}

func (o AdvisoryVendorProduct) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryVendorProduct) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}
	return toSerialize, nil
}

type NullableAdvisoryVendorProduct struct {
	value *AdvisoryVendorProduct
	isSet bool
}

func (v NullableAdvisoryVendorProduct) Get() *AdvisoryVendorProduct {
	return v.value
}

func (v *NullableAdvisoryVendorProduct) Set(val *AdvisoryVendorProduct) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryVendorProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryVendorProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryVendorProduct(val *AdvisoryVendorProduct) *NullableAdvisoryVendorProduct {
	return &NullableAdvisoryVendorProduct{value: val, isSet: true}
}

func (v NullableAdvisoryVendorProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryVendorProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


