/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryGitlabAdvisory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryGitlabAdvisory{}

// AdvisoryGitlabAdvisory struct for AdvisoryGitlabAdvisory
type AdvisoryGitlabAdvisory struct {
	AffectedRange *string `json:"affected_range,omitempty"`
	AffectedVersions *string `json:"affected_versions,omitempty"`
	Cve []string `json:"cve,omitempty"`
	CvssV2 *string `json:"cvss_v2,omitempty"`
	CvssV3 *string `json:"cvss_v3,omitempty"`
	Cwe []string `json:"cwe,omitempty"`
	Date *string `json:"date,omitempty"`
	DateAdded *string `json:"date_added,omitempty"`
	Description *string `json:"description,omitempty"`
	Filename *string `json:"filename,omitempty"`
	FixedVersions []string `json:"fixed_versions,omitempty"`
	Ghsa []string `json:"ghsa,omitempty"`
	GitlabUrl *string `json:"gitlab_url,omitempty"`
	Identifier *string `json:"identifier,omitempty"`
	Identifiers []string `json:"identifiers,omitempty"`
	NotImpacted *string `json:"not_impacted,omitempty"`
	PackageManager *string `json:"package_manager,omitempty"`
	PackageName *string `json:"package_name,omitempty"`
	PackageSlug *string `json:"package_slug,omitempty"`
	Pubdate *string `json:"pubdate,omitempty"`
	Solution *string `json:"solution,omitempty"`
	Title *string `json:"title,omitempty"`
	Urls []string `json:"urls,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
}

// NewAdvisoryGitlabAdvisory instantiates a new AdvisoryGitlabAdvisory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryGitlabAdvisory() *AdvisoryGitlabAdvisory {
	this := AdvisoryGitlabAdvisory{}
	return &this
}

// NewAdvisoryGitlabAdvisoryWithDefaults instantiates a new AdvisoryGitlabAdvisory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryGitlabAdvisoryWithDefaults() *AdvisoryGitlabAdvisory {
	this := AdvisoryGitlabAdvisory{}
	return &this
}

// GetAffectedRange returns the AffectedRange field value if set, zero value otherwise.
func (o *AdvisoryGitlabAdvisory) GetAffectedRange() string {
	if o == nil || IsNil(o.AffectedRange) {
		var ret string
		return ret
	}
	return *o.AffectedRange
}

// GetAffectedRangeOk returns a tuple with the AffectedRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitlabAdvisory) GetAffectedRangeOk() (*string, bool) {
	if o == nil || IsNil(o.AffectedRange) {
		return nil, false
	}
	return o.AffectedRange, true
}

// HasAffectedRange returns a boolean if a field has been set.
func (o *AdvisoryGitlabAdvisory) HasAffectedRange() bool {
	if o != nil && !IsNil(o.AffectedRange) {
		return true
	}

	return false
}

// SetAffectedRange gets a reference to the given string and assigns it to the AffectedRange field.
func (o *AdvisoryGitlabAdvisory) SetAffectedRange(v string) {
	o.AffectedRange = &v
}

// GetAffectedVersions returns the AffectedVersions field value if set, zero value otherwise.
func (o *AdvisoryGitlabAdvisory) GetAffectedVersions() string {
	if o == nil || IsNil(o.AffectedVersions) {
		var ret string
		return ret
	}
	return *o.AffectedVersions
}

// GetAffectedVersionsOk returns a tuple with the AffectedVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitlabAdvisory) GetAffectedVersionsOk() (*string, bool) {
	if o == nil || IsNil(o.AffectedVersions) {
		return nil, false
	}
	return o.AffectedVersions, true
}

// HasAffectedVersions returns a boolean if a field has been set.
func (o *AdvisoryGitlabAdvisory) HasAffectedVersions() bool {
	if o != nil && !IsNil(o.AffectedVersions) {
		return true
	}

	return false
}

// SetAffectedVersions gets a reference to the given string and assigns it to the AffectedVersions field.
func (o *AdvisoryGitlabAdvisory) SetAffectedVersions(v string) {
	o.AffectedVersions = &v
}

// GetCve returns the Cve field value if set, zero value otherwise.
func (o *AdvisoryGitlabAdvisory) GetCve() []string {
	if o == nil || IsNil(o.Cve) {
		var ret []string
		return ret
	}
	return o.Cve
}

// GetCveOk returns a tuple with the Cve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitlabAdvisory) GetCveOk() ([]string, bool) {
	if o == nil || IsNil(o.Cve) {
		return nil, false
	}
	return o.Cve, true
}

// HasCve returns a boolean if a field has been set.
func (o *AdvisoryGitlabAdvisory) HasCve() bool {
	if o != nil && !IsNil(o.Cve) {
		return true
	}

	return false
}

// SetCve gets a reference to the given []string and assigns it to the Cve field.
func (o *AdvisoryGitlabAdvisory) SetCve(v []string) {
	o.Cve = v
}

// GetCvssV2 returns the CvssV2 field value if set, zero value otherwise.
func (o *AdvisoryGitlabAdvisory) GetCvssV2() string {
	if o == nil || IsNil(o.CvssV2) {
		var ret string
		return ret
	}
	return *o.CvssV2
}

// GetCvssV2Ok returns a tuple with the CvssV2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitlabAdvisory) GetCvssV2Ok() (*string, bool) {
	if o == nil || IsNil(o.CvssV2) {
		return nil, false
	}
	return o.CvssV2, true
}

// HasCvssV2 returns a boolean if a field has been set.
func (o *AdvisoryGitlabAdvisory) HasCvssV2() bool {
	if o != nil && !IsNil(o.CvssV2) {
		return true
	}

	return false
}

// SetCvssV2 gets a reference to the given string and assigns it to the CvssV2 field.
func (o *AdvisoryGitlabAdvisory) SetCvssV2(v string) {
	o.CvssV2 = &v
}

// GetCvssV3 returns the CvssV3 field value if set, zero value otherwise.
func (o *AdvisoryGitlabAdvisory) GetCvssV3() string {
	if o == nil || IsNil(o.CvssV3) {
		var ret string
		return ret
	}
	return *o.CvssV3
}

// GetCvssV3Ok returns a tuple with the CvssV3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitlabAdvisory) GetCvssV3Ok() (*string, bool) {
	if o == nil || IsNil(o.CvssV3) {
		return nil, false
	}
	return o.CvssV3, true
}

// HasCvssV3 returns a boolean if a field has been set.
func (o *AdvisoryGitlabAdvisory) HasCvssV3() bool {
	if o != nil && !IsNil(o.CvssV3) {
		return true
	}

	return false
}

// SetCvssV3 gets a reference to the given string and assigns it to the CvssV3 field.
func (o *AdvisoryGitlabAdvisory) SetCvssV3(v string) {
	o.CvssV3 = &v
}

// GetCwe returns the Cwe field value if set, zero value otherwise.
func (o *AdvisoryGitlabAdvisory) GetCwe() []string {
	if o == nil || IsNil(o.Cwe) {
		var ret []string
		return ret
	}
	return o.Cwe
}

// GetCweOk returns a tuple with the Cwe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitlabAdvisory) GetCweOk() ([]string, bool) {
	if o == nil || IsNil(o.Cwe) {
		return nil, false
	}
	return o.Cwe, true
}

// HasCwe returns a boolean if a field has been set.
func (o *AdvisoryGitlabAdvisory) HasCwe() bool {
	if o != nil && !IsNil(o.Cwe) {
		return true
	}

	return false
}

// SetCwe gets a reference to the given []string and assigns it to the Cwe field.
func (o *AdvisoryGitlabAdvisory) SetCwe(v []string) {
	o.Cwe = v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *AdvisoryGitlabAdvisory) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitlabAdvisory) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *AdvisoryGitlabAdvisory) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *AdvisoryGitlabAdvisory) SetDate(v string) {
	o.Date = &v
}

// GetDateAdded returns the DateAdded field value if set, zero value otherwise.
func (o *AdvisoryGitlabAdvisory) GetDateAdded() string {
	if o == nil || IsNil(o.DateAdded) {
		var ret string
		return ret
	}
	return *o.DateAdded
}

// GetDateAddedOk returns a tuple with the DateAdded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitlabAdvisory) GetDateAddedOk() (*string, bool) {
	if o == nil || IsNil(o.DateAdded) {
		return nil, false
	}
	return o.DateAdded, true
}

// HasDateAdded returns a boolean if a field has been set.
func (o *AdvisoryGitlabAdvisory) HasDateAdded() bool {
	if o != nil && !IsNil(o.DateAdded) {
		return true
	}

	return false
}

// SetDateAdded gets a reference to the given string and assigns it to the DateAdded field.
func (o *AdvisoryGitlabAdvisory) SetDateAdded(v string) {
	o.DateAdded = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AdvisoryGitlabAdvisory) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitlabAdvisory) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AdvisoryGitlabAdvisory) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AdvisoryGitlabAdvisory) SetDescription(v string) {
	o.Description = &v
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *AdvisoryGitlabAdvisory) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitlabAdvisory) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *AdvisoryGitlabAdvisory) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *AdvisoryGitlabAdvisory) SetFilename(v string) {
	o.Filename = &v
}

// GetFixedVersions returns the FixedVersions field value if set, zero value otherwise.
func (o *AdvisoryGitlabAdvisory) GetFixedVersions() []string {
	if o == nil || IsNil(o.FixedVersions) {
		var ret []string
		return ret
	}
	return o.FixedVersions
}

// GetFixedVersionsOk returns a tuple with the FixedVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitlabAdvisory) GetFixedVersionsOk() ([]string, bool) {
	if o == nil || IsNil(o.FixedVersions) {
		return nil, false
	}
	return o.FixedVersions, true
}

// HasFixedVersions returns a boolean if a field has been set.
func (o *AdvisoryGitlabAdvisory) HasFixedVersions() bool {
	if o != nil && !IsNil(o.FixedVersions) {
		return true
	}

	return false
}

// SetFixedVersions gets a reference to the given []string and assigns it to the FixedVersions field.
func (o *AdvisoryGitlabAdvisory) SetFixedVersions(v []string) {
	o.FixedVersions = v
}

// GetGhsa returns the Ghsa field value if set, zero value otherwise.
func (o *AdvisoryGitlabAdvisory) GetGhsa() []string {
	if o == nil || IsNil(o.Ghsa) {
		var ret []string
		return ret
	}
	return o.Ghsa
}

// GetGhsaOk returns a tuple with the Ghsa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitlabAdvisory) GetGhsaOk() ([]string, bool) {
	if o == nil || IsNil(o.Ghsa) {
		return nil, false
	}
	return o.Ghsa, true
}

// HasGhsa returns a boolean if a field has been set.
func (o *AdvisoryGitlabAdvisory) HasGhsa() bool {
	if o != nil && !IsNil(o.Ghsa) {
		return true
	}

	return false
}

// SetGhsa gets a reference to the given []string and assigns it to the Ghsa field.
func (o *AdvisoryGitlabAdvisory) SetGhsa(v []string) {
	o.Ghsa = v
}

// GetGitlabUrl returns the GitlabUrl field value if set, zero value otherwise.
func (o *AdvisoryGitlabAdvisory) GetGitlabUrl() string {
	if o == nil || IsNil(o.GitlabUrl) {
		var ret string
		return ret
	}
	return *o.GitlabUrl
}

// GetGitlabUrlOk returns a tuple with the GitlabUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitlabAdvisory) GetGitlabUrlOk() (*string, bool) {
	if o == nil || IsNil(o.GitlabUrl) {
		return nil, false
	}
	return o.GitlabUrl, true
}

// HasGitlabUrl returns a boolean if a field has been set.
func (o *AdvisoryGitlabAdvisory) HasGitlabUrl() bool {
	if o != nil && !IsNil(o.GitlabUrl) {
		return true
	}

	return false
}

// SetGitlabUrl gets a reference to the given string and assigns it to the GitlabUrl field.
func (o *AdvisoryGitlabAdvisory) SetGitlabUrl(v string) {
	o.GitlabUrl = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *AdvisoryGitlabAdvisory) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitlabAdvisory) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *AdvisoryGitlabAdvisory) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *AdvisoryGitlabAdvisory) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetIdentifiers returns the Identifiers field value if set, zero value otherwise.
func (o *AdvisoryGitlabAdvisory) GetIdentifiers() []string {
	if o == nil || IsNil(o.Identifiers) {
		var ret []string
		return ret
	}
	return o.Identifiers
}

// GetIdentifiersOk returns a tuple with the Identifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitlabAdvisory) GetIdentifiersOk() ([]string, bool) {
	if o == nil || IsNil(o.Identifiers) {
		return nil, false
	}
	return o.Identifiers, true
}

// HasIdentifiers returns a boolean if a field has been set.
func (o *AdvisoryGitlabAdvisory) HasIdentifiers() bool {
	if o != nil && !IsNil(o.Identifiers) {
		return true
	}

	return false
}

// SetIdentifiers gets a reference to the given []string and assigns it to the Identifiers field.
func (o *AdvisoryGitlabAdvisory) SetIdentifiers(v []string) {
	o.Identifiers = v
}

// GetNotImpacted returns the NotImpacted field value if set, zero value otherwise.
func (o *AdvisoryGitlabAdvisory) GetNotImpacted() string {
	if o == nil || IsNil(o.NotImpacted) {
		var ret string
		return ret
	}
	return *o.NotImpacted
}

// GetNotImpactedOk returns a tuple with the NotImpacted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitlabAdvisory) GetNotImpactedOk() (*string, bool) {
	if o == nil || IsNil(o.NotImpacted) {
		return nil, false
	}
	return o.NotImpacted, true
}

// HasNotImpacted returns a boolean if a field has been set.
func (o *AdvisoryGitlabAdvisory) HasNotImpacted() bool {
	if o != nil && !IsNil(o.NotImpacted) {
		return true
	}

	return false
}

// SetNotImpacted gets a reference to the given string and assigns it to the NotImpacted field.
func (o *AdvisoryGitlabAdvisory) SetNotImpacted(v string) {
	o.NotImpacted = &v
}

// GetPackageManager returns the PackageManager field value if set, zero value otherwise.
func (o *AdvisoryGitlabAdvisory) GetPackageManager() string {
	if o == nil || IsNil(o.PackageManager) {
		var ret string
		return ret
	}
	return *o.PackageManager
}

// GetPackageManagerOk returns a tuple with the PackageManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitlabAdvisory) GetPackageManagerOk() (*string, bool) {
	if o == nil || IsNil(o.PackageManager) {
		return nil, false
	}
	return o.PackageManager, true
}

// HasPackageManager returns a boolean if a field has been set.
func (o *AdvisoryGitlabAdvisory) HasPackageManager() bool {
	if o != nil && !IsNil(o.PackageManager) {
		return true
	}

	return false
}

// SetPackageManager gets a reference to the given string and assigns it to the PackageManager field.
func (o *AdvisoryGitlabAdvisory) SetPackageManager(v string) {
	o.PackageManager = &v
}

// GetPackageName returns the PackageName field value if set, zero value otherwise.
func (o *AdvisoryGitlabAdvisory) GetPackageName() string {
	if o == nil || IsNil(o.PackageName) {
		var ret string
		return ret
	}
	return *o.PackageName
}

// GetPackageNameOk returns a tuple with the PackageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitlabAdvisory) GetPackageNameOk() (*string, bool) {
	if o == nil || IsNil(o.PackageName) {
		return nil, false
	}
	return o.PackageName, true
}

// HasPackageName returns a boolean if a field has been set.
func (o *AdvisoryGitlabAdvisory) HasPackageName() bool {
	if o != nil && !IsNil(o.PackageName) {
		return true
	}

	return false
}

// SetPackageName gets a reference to the given string and assigns it to the PackageName field.
func (o *AdvisoryGitlabAdvisory) SetPackageName(v string) {
	o.PackageName = &v
}

// GetPackageSlug returns the PackageSlug field value if set, zero value otherwise.
func (o *AdvisoryGitlabAdvisory) GetPackageSlug() string {
	if o == nil || IsNil(o.PackageSlug) {
		var ret string
		return ret
	}
	return *o.PackageSlug
}

// GetPackageSlugOk returns a tuple with the PackageSlug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitlabAdvisory) GetPackageSlugOk() (*string, bool) {
	if o == nil || IsNil(o.PackageSlug) {
		return nil, false
	}
	return o.PackageSlug, true
}

// HasPackageSlug returns a boolean if a field has been set.
func (o *AdvisoryGitlabAdvisory) HasPackageSlug() bool {
	if o != nil && !IsNil(o.PackageSlug) {
		return true
	}

	return false
}

// SetPackageSlug gets a reference to the given string and assigns it to the PackageSlug field.
func (o *AdvisoryGitlabAdvisory) SetPackageSlug(v string) {
	o.PackageSlug = &v
}

// GetPubdate returns the Pubdate field value if set, zero value otherwise.
func (o *AdvisoryGitlabAdvisory) GetPubdate() string {
	if o == nil || IsNil(o.Pubdate) {
		var ret string
		return ret
	}
	return *o.Pubdate
}

// GetPubdateOk returns a tuple with the Pubdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitlabAdvisory) GetPubdateOk() (*string, bool) {
	if o == nil || IsNil(o.Pubdate) {
		return nil, false
	}
	return o.Pubdate, true
}

// HasPubdate returns a boolean if a field has been set.
func (o *AdvisoryGitlabAdvisory) HasPubdate() bool {
	if o != nil && !IsNil(o.Pubdate) {
		return true
	}

	return false
}

// SetPubdate gets a reference to the given string and assigns it to the Pubdate field.
func (o *AdvisoryGitlabAdvisory) SetPubdate(v string) {
	o.Pubdate = &v
}

// GetSolution returns the Solution field value if set, zero value otherwise.
func (o *AdvisoryGitlabAdvisory) GetSolution() string {
	if o == nil || IsNil(o.Solution) {
		var ret string
		return ret
	}
	return *o.Solution
}

// GetSolutionOk returns a tuple with the Solution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitlabAdvisory) GetSolutionOk() (*string, bool) {
	if o == nil || IsNil(o.Solution) {
		return nil, false
	}
	return o.Solution, true
}

// HasSolution returns a boolean if a field has been set.
func (o *AdvisoryGitlabAdvisory) HasSolution() bool {
	if o != nil && !IsNil(o.Solution) {
		return true
	}

	return false
}

// SetSolution gets a reference to the given string and assigns it to the Solution field.
func (o *AdvisoryGitlabAdvisory) SetSolution(v string) {
	o.Solution = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *AdvisoryGitlabAdvisory) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitlabAdvisory) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *AdvisoryGitlabAdvisory) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *AdvisoryGitlabAdvisory) SetTitle(v string) {
	o.Title = &v
}

// GetUrls returns the Urls field value if set, zero value otherwise.
func (o *AdvisoryGitlabAdvisory) GetUrls() []string {
	if o == nil || IsNil(o.Urls) {
		var ret []string
		return ret
	}
	return o.Urls
}

// GetUrlsOk returns a tuple with the Urls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitlabAdvisory) GetUrlsOk() ([]string, bool) {
	if o == nil || IsNil(o.Urls) {
		return nil, false
	}
	return o.Urls, true
}

// HasUrls returns a boolean if a field has been set.
func (o *AdvisoryGitlabAdvisory) HasUrls() bool {
	if o != nil && !IsNil(o.Urls) {
		return true
	}

	return false
}

// SetUrls gets a reference to the given []string and assigns it to the Urls field.
func (o *AdvisoryGitlabAdvisory) SetUrls(v []string) {
	o.Urls = v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *AdvisoryGitlabAdvisory) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryGitlabAdvisory) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *AdvisoryGitlabAdvisory) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *AdvisoryGitlabAdvisory) SetUuid(v string) {
	o.Uuid = &v
}

func (o AdvisoryGitlabAdvisory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryGitlabAdvisory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AffectedRange) {
		toSerialize["affected_range"] = o.AffectedRange
	}
	if !IsNil(o.AffectedVersions) {
		toSerialize["affected_versions"] = o.AffectedVersions
	}
	if !IsNil(o.Cve) {
		toSerialize["cve"] = o.Cve
	}
	if !IsNil(o.CvssV2) {
		toSerialize["cvss_v2"] = o.CvssV2
	}
	if !IsNil(o.CvssV3) {
		toSerialize["cvss_v3"] = o.CvssV3
	}
	if !IsNil(o.Cwe) {
		toSerialize["cwe"] = o.Cwe
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.DateAdded) {
		toSerialize["date_added"] = o.DateAdded
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	if !IsNil(o.FixedVersions) {
		toSerialize["fixed_versions"] = o.FixedVersions
	}
	if !IsNil(o.Ghsa) {
		toSerialize["ghsa"] = o.Ghsa
	}
	if !IsNil(o.GitlabUrl) {
		toSerialize["gitlab_url"] = o.GitlabUrl
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Identifiers) {
		toSerialize["identifiers"] = o.Identifiers
	}
	if !IsNil(o.NotImpacted) {
		toSerialize["not_impacted"] = o.NotImpacted
	}
	if !IsNil(o.PackageManager) {
		toSerialize["package_manager"] = o.PackageManager
	}
	if !IsNil(o.PackageName) {
		toSerialize["package_name"] = o.PackageName
	}
	if !IsNil(o.PackageSlug) {
		toSerialize["package_slug"] = o.PackageSlug
	}
	if !IsNil(o.Pubdate) {
		toSerialize["pubdate"] = o.Pubdate
	}
	if !IsNil(o.Solution) {
		toSerialize["solution"] = o.Solution
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Urls) {
		toSerialize["urls"] = o.Urls
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	return toSerialize, nil
}

type NullableAdvisoryGitlabAdvisory struct {
	value *AdvisoryGitlabAdvisory
	isSet bool
}

func (v NullableAdvisoryGitlabAdvisory) Get() *AdvisoryGitlabAdvisory {
	return v.value
}

func (v *NullableAdvisoryGitlabAdvisory) Set(val *AdvisoryGitlabAdvisory) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryGitlabAdvisory) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryGitlabAdvisory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryGitlabAdvisory(val *AdvisoryGitlabAdvisory) *NullableAdvisoryGitlabAdvisory {
	return &NullableAdvisoryGitlabAdvisory{value: val, isSet: true}
}

func (v NullableAdvisoryGitlabAdvisory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryGitlabAdvisory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


