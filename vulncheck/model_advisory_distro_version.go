/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryDistroVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryDistroVersion{}

// AdvisoryDistroVersion struct for AdvisoryDistroVersion
type AdvisoryDistroVersion struct {
	Arch *string `json:"arch,omitempty"`
	PublishedDate *string `json:"published_date,omitempty"`
	Release *string `json:"release,omitempty"`
	Version *string `json:"version,omitempty"`
}

// NewAdvisoryDistroVersion instantiates a new AdvisoryDistroVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryDistroVersion() *AdvisoryDistroVersion {
	this := AdvisoryDistroVersion{}
	return &this
}

// NewAdvisoryDistroVersionWithDefaults instantiates a new AdvisoryDistroVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryDistroVersionWithDefaults() *AdvisoryDistroVersion {
	this := AdvisoryDistroVersion{}
	return &this
}

// GetArch returns the Arch field value if set, zero value otherwise.
func (o *AdvisoryDistroVersion) GetArch() string {
	if o == nil || IsNil(o.Arch) {
		var ret string
		return ret
	}
	return *o.Arch
}

// GetArchOk returns a tuple with the Arch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryDistroVersion) GetArchOk() (*string, bool) {
	if o == nil || IsNil(o.Arch) {
		return nil, false
	}
	return o.Arch, true
}

// HasArch returns a boolean if a field has been set.
func (o *AdvisoryDistroVersion) HasArch() bool {
	if o != nil && !IsNil(o.Arch) {
		return true
	}

	return false
}

// SetArch gets a reference to the given string and assigns it to the Arch field.
func (o *AdvisoryDistroVersion) SetArch(v string) {
	o.Arch = &v
}

// GetPublishedDate returns the PublishedDate field value if set, zero value otherwise.
func (o *AdvisoryDistroVersion) GetPublishedDate() string {
	if o == nil || IsNil(o.PublishedDate) {
		var ret string
		return ret
	}
	return *o.PublishedDate
}

// GetPublishedDateOk returns a tuple with the PublishedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryDistroVersion) GetPublishedDateOk() (*string, bool) {
	if o == nil || IsNil(o.PublishedDate) {
		return nil, false
	}
	return o.PublishedDate, true
}

// HasPublishedDate returns a boolean if a field has been set.
func (o *AdvisoryDistroVersion) HasPublishedDate() bool {
	if o != nil && !IsNil(o.PublishedDate) {
		return true
	}

	return false
}

// SetPublishedDate gets a reference to the given string and assigns it to the PublishedDate field.
func (o *AdvisoryDistroVersion) SetPublishedDate(v string) {
	o.PublishedDate = &v
}

// GetRelease returns the Release field value if set, zero value otherwise.
func (o *AdvisoryDistroVersion) GetRelease() string {
	if o == nil || IsNil(o.Release) {
		var ret string
		return ret
	}
	return *o.Release
}

// GetReleaseOk returns a tuple with the Release field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryDistroVersion) GetReleaseOk() (*string, bool) {
	if o == nil || IsNil(o.Release) {
		return nil, false
	}
	return o.Release, true
}

// HasRelease returns a boolean if a field has been set.
func (o *AdvisoryDistroVersion) HasRelease() bool {
	if o != nil && !IsNil(o.Release) {
		return true
	}

	return false
}

// SetRelease gets a reference to the given string and assigns it to the Release field.
func (o *AdvisoryDistroVersion) SetRelease(v string) {
	o.Release = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AdvisoryDistroVersion) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryDistroVersion) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *AdvisoryDistroVersion) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *AdvisoryDistroVersion) SetVersion(v string) {
	o.Version = &v
}

func (o AdvisoryDistroVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryDistroVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Arch) {
		toSerialize["arch"] = o.Arch
	}
	if !IsNil(o.PublishedDate) {
		toSerialize["published_date"] = o.PublishedDate
	}
	if !IsNil(o.Release) {
		toSerialize["release"] = o.Release
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableAdvisoryDistroVersion struct {
	value *AdvisoryDistroVersion
	isSet bool
}

func (v NullableAdvisoryDistroVersion) Get() *AdvisoryDistroVersion {
	return v.value
}

func (v *NullableAdvisoryDistroVersion) Set(val *AdvisoryDistroVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryDistroVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryDistroVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryDistroVersion(val *AdvisoryDistroVersion) *NullableAdvisoryDistroVersion {
	return &NullableAdvisoryDistroVersion{value: val, isSet: true}
}

func (v NullableAdvisoryDistroVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryDistroVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


