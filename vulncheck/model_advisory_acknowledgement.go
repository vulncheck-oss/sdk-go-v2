/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryAcknowledgement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryAcknowledgement{}

// AdvisoryAcknowledgement struct for AdvisoryAcknowledgement
type AdvisoryAcknowledgement struct {
	Name []AdvisoryIVal `json:"name,omitempty"`
	Url []string `json:"url,omitempty"`
}

// NewAdvisoryAcknowledgement instantiates a new AdvisoryAcknowledgement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryAcknowledgement() *AdvisoryAcknowledgement {
	this := AdvisoryAcknowledgement{}
	return &this
}

// NewAdvisoryAcknowledgementWithDefaults instantiates a new AdvisoryAcknowledgement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryAcknowledgementWithDefaults() *AdvisoryAcknowledgement {
	this := AdvisoryAcknowledgement{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AdvisoryAcknowledgement) GetName() []AdvisoryIVal {
	if o == nil || IsNil(o.Name) {
		var ret []AdvisoryIVal
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryAcknowledgement) GetNameOk() ([]AdvisoryIVal, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AdvisoryAcknowledgement) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given []AdvisoryIVal and assigns it to the Name field.
func (o *AdvisoryAcknowledgement) SetName(v []AdvisoryIVal) {
	o.Name = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *AdvisoryAcknowledgement) GetUrl() []string {
	if o == nil || IsNil(o.Url) {
		var ret []string
		return ret
	}
	return o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryAcknowledgement) GetUrlOk() ([]string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *AdvisoryAcknowledgement) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given []string and assigns it to the Url field.
func (o *AdvisoryAcknowledgement) SetUrl(v []string) {
	o.Url = v
}

func (o AdvisoryAcknowledgement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryAcknowledgement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableAdvisoryAcknowledgement struct {
	value *AdvisoryAcknowledgement
	isSet bool
}

func (v NullableAdvisoryAcknowledgement) Get() *AdvisoryAcknowledgement {
	return v.value
}

func (v *NullableAdvisoryAcknowledgement) Set(val *AdvisoryAcknowledgement) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryAcknowledgement) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryAcknowledgement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryAcknowledgement(val *AdvisoryAcknowledgement) *NullableAdvisoryAcknowledgement {
	return &NullableAdvisoryAcknowledgement{value: val, isSet: true}
}

func (v NullableAdvisoryAcknowledgement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryAcknowledgement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


