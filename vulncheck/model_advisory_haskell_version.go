/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisoryHaskellVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisoryHaskellVersion{}

// AdvisoryHaskellVersion struct for AdvisoryHaskellVersion
type AdvisoryHaskellVersion struct {
	Fixed *string `json:"fixed,omitempty"`
	Introduced *string `json:"introduced,omitempty"`
}

// NewAdvisoryHaskellVersion instantiates a new AdvisoryHaskellVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisoryHaskellVersion() *AdvisoryHaskellVersion {
	this := AdvisoryHaskellVersion{}
	return &this
}

// NewAdvisoryHaskellVersionWithDefaults instantiates a new AdvisoryHaskellVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisoryHaskellVersionWithDefaults() *AdvisoryHaskellVersion {
	this := AdvisoryHaskellVersion{}
	return &this
}

// GetFixed returns the Fixed field value if set, zero value otherwise.
func (o *AdvisoryHaskellVersion) GetFixed() string {
	if o == nil || IsNil(o.Fixed) {
		var ret string
		return ret
	}
	return *o.Fixed
}

// GetFixedOk returns a tuple with the Fixed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryHaskellVersion) GetFixedOk() (*string, bool) {
	if o == nil || IsNil(o.Fixed) {
		return nil, false
	}
	return o.Fixed, true
}

// HasFixed returns a boolean if a field has been set.
func (o *AdvisoryHaskellVersion) HasFixed() bool {
	if o != nil && !IsNil(o.Fixed) {
		return true
	}

	return false
}

// SetFixed gets a reference to the given string and assigns it to the Fixed field.
func (o *AdvisoryHaskellVersion) SetFixed(v string) {
	o.Fixed = &v
}

// GetIntroduced returns the Introduced field value if set, zero value otherwise.
func (o *AdvisoryHaskellVersion) GetIntroduced() string {
	if o == nil || IsNil(o.Introduced) {
		var ret string
		return ret
	}
	return *o.Introduced
}

// GetIntroducedOk returns a tuple with the Introduced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisoryHaskellVersion) GetIntroducedOk() (*string, bool) {
	if o == nil || IsNil(o.Introduced) {
		return nil, false
	}
	return o.Introduced, true
}

// HasIntroduced returns a boolean if a field has been set.
func (o *AdvisoryHaskellVersion) HasIntroduced() bool {
	if o != nil && !IsNil(o.Introduced) {
		return true
	}

	return false
}

// SetIntroduced gets a reference to the given string and assigns it to the Introduced field.
func (o *AdvisoryHaskellVersion) SetIntroduced(v string) {
	o.Introduced = &v
}

func (o AdvisoryHaskellVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisoryHaskellVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Fixed) {
		toSerialize["fixed"] = o.Fixed
	}
	if !IsNil(o.Introduced) {
		toSerialize["introduced"] = o.Introduced
	}
	return toSerialize, nil
}

type NullableAdvisoryHaskellVersion struct {
	value *AdvisoryHaskellVersion
	isSet bool
}

func (v NullableAdvisoryHaskellVersion) Get() *AdvisoryHaskellVersion {
	return v.value
}

func (v *NullableAdvisoryHaskellVersion) Set(val *AdvisoryHaskellVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisoryHaskellVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisoryHaskellVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisoryHaskellVersion(val *AdvisoryHaskellVersion) *NullableAdvisoryHaskellVersion {
	return &NullableAdvisoryHaskellVersion{value: val, isSet: true}
}

func (v NullableAdvisoryHaskellVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisoryHaskellVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


