/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisorySiemensSubBranch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisorySiemensSubBranch{}

// AdvisorySiemensSubBranch struct for AdvisorySiemensSubBranch
type AdvisorySiemensSubBranch struct {
	Branches []AdvisorySiemensSubSubBranch `json:"branches,omitempty"`
	Category *string `json:"category,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewAdvisorySiemensSubBranch instantiates a new AdvisorySiemensSubBranch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisorySiemensSubBranch() *AdvisorySiemensSubBranch {
	this := AdvisorySiemensSubBranch{}
	return &this
}

// NewAdvisorySiemensSubBranchWithDefaults instantiates a new AdvisorySiemensSubBranch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisorySiemensSubBranchWithDefaults() *AdvisorySiemensSubBranch {
	this := AdvisorySiemensSubBranch{}
	return &this
}

// GetBranches returns the Branches field value if set, zero value otherwise.
func (o *AdvisorySiemensSubBranch) GetBranches() []AdvisorySiemensSubSubBranch {
	if o == nil || IsNil(o.Branches) {
		var ret []AdvisorySiemensSubSubBranch
		return ret
	}
	return o.Branches
}

// GetBranchesOk returns a tuple with the Branches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisorySiemensSubBranch) GetBranchesOk() ([]AdvisorySiemensSubSubBranch, bool) {
	if o == nil || IsNil(o.Branches) {
		return nil, false
	}
	return o.Branches, true
}

// HasBranches returns a boolean if a field has been set.
func (o *AdvisorySiemensSubBranch) HasBranches() bool {
	if o != nil && !IsNil(o.Branches) {
		return true
	}

	return false
}

// SetBranches gets a reference to the given []AdvisorySiemensSubSubBranch and assigns it to the Branches field.
func (o *AdvisorySiemensSubBranch) SetBranches(v []AdvisorySiemensSubSubBranch) {
	o.Branches = v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *AdvisorySiemensSubBranch) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisorySiemensSubBranch) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *AdvisorySiemensSubBranch) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *AdvisorySiemensSubBranch) SetCategory(v string) {
	o.Category = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AdvisorySiemensSubBranch) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisorySiemensSubBranch) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AdvisorySiemensSubBranch) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AdvisorySiemensSubBranch) SetName(v string) {
	o.Name = &v
}

func (o AdvisorySiemensSubBranch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisorySiemensSubBranch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Branches) {
		toSerialize["branches"] = o.Branches
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableAdvisorySiemensSubBranch struct {
	value *AdvisorySiemensSubBranch
	isSet bool
}

func (v NullableAdvisorySiemensSubBranch) Get() *AdvisorySiemensSubBranch {
	return v.value
}

func (v *NullableAdvisorySiemensSubBranch) Set(val *AdvisorySiemensSubBranch) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisorySiemensSubBranch) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisorySiemensSubBranch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisorySiemensSubBranch(val *AdvisorySiemensSubBranch) *NullableAdvisorySiemensSubBranch {
	return &NullableAdvisorySiemensSubBranch{value: val, isSet: true}
}

func (v NullableAdvisorySiemensSubBranch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisorySiemensSubBranch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


