/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the ApiCVSSV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiCVSSV2{}

// ApiCVSSV2 struct for ApiCVSSV2
type ApiCVSSV2 struct {
	AccessComplexity *string `json:"accessComplexity,omitempty"`
	AccessVector *string `json:"accessVector,omitempty"`
	Authentication *string `json:"authentication,omitempty"`
	AvailabilityImpact *string `json:"availabilityImpact,omitempty"`
	BaseScore *float32 `json:"baseScore,omitempty"`
	ConfidentialityImpact *string `json:"confidentialityImpact,omitempty"`
	IntegrityImpact *string `json:"integrityImpact,omitempty"`
	VectorString *string `json:"vectorString,omitempty"`
	Version *string `json:"version,omitempty"`
}

// NewApiCVSSV2 instantiates a new ApiCVSSV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiCVSSV2() *ApiCVSSV2 {
	this := ApiCVSSV2{}
	return &this
}

// NewApiCVSSV2WithDefaults instantiates a new ApiCVSSV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiCVSSV2WithDefaults() *ApiCVSSV2 {
	this := ApiCVSSV2{}
	return &this
}

// GetAccessComplexity returns the AccessComplexity field value if set, zero value otherwise.
func (o *ApiCVSSV2) GetAccessComplexity() string {
	if o == nil || IsNil(o.AccessComplexity) {
		var ret string
		return ret
	}
	return *o.AccessComplexity
}

// GetAccessComplexityOk returns a tuple with the AccessComplexity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCVSSV2) GetAccessComplexityOk() (*string, bool) {
	if o == nil || IsNil(o.AccessComplexity) {
		return nil, false
	}
	return o.AccessComplexity, true
}

// HasAccessComplexity returns a boolean if a field has been set.
func (o *ApiCVSSV2) HasAccessComplexity() bool {
	if o != nil && !IsNil(o.AccessComplexity) {
		return true
	}

	return false
}

// SetAccessComplexity gets a reference to the given string and assigns it to the AccessComplexity field.
func (o *ApiCVSSV2) SetAccessComplexity(v string) {
	o.AccessComplexity = &v
}

// GetAccessVector returns the AccessVector field value if set, zero value otherwise.
func (o *ApiCVSSV2) GetAccessVector() string {
	if o == nil || IsNil(o.AccessVector) {
		var ret string
		return ret
	}
	return *o.AccessVector
}

// GetAccessVectorOk returns a tuple with the AccessVector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCVSSV2) GetAccessVectorOk() (*string, bool) {
	if o == nil || IsNil(o.AccessVector) {
		return nil, false
	}
	return o.AccessVector, true
}

// HasAccessVector returns a boolean if a field has been set.
func (o *ApiCVSSV2) HasAccessVector() bool {
	if o != nil && !IsNil(o.AccessVector) {
		return true
	}

	return false
}

// SetAccessVector gets a reference to the given string and assigns it to the AccessVector field.
func (o *ApiCVSSV2) SetAccessVector(v string) {
	o.AccessVector = &v
}

// GetAuthentication returns the Authentication field value if set, zero value otherwise.
func (o *ApiCVSSV2) GetAuthentication() string {
	if o == nil || IsNil(o.Authentication) {
		var ret string
		return ret
	}
	return *o.Authentication
}

// GetAuthenticationOk returns a tuple with the Authentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCVSSV2) GetAuthenticationOk() (*string, bool) {
	if o == nil || IsNil(o.Authentication) {
		return nil, false
	}
	return o.Authentication, true
}

// HasAuthentication returns a boolean if a field has been set.
func (o *ApiCVSSV2) HasAuthentication() bool {
	if o != nil && !IsNil(o.Authentication) {
		return true
	}

	return false
}

// SetAuthentication gets a reference to the given string and assigns it to the Authentication field.
func (o *ApiCVSSV2) SetAuthentication(v string) {
	o.Authentication = &v
}

// GetAvailabilityImpact returns the AvailabilityImpact field value if set, zero value otherwise.
func (o *ApiCVSSV2) GetAvailabilityImpact() string {
	if o == nil || IsNil(o.AvailabilityImpact) {
		var ret string
		return ret
	}
	return *o.AvailabilityImpact
}

// GetAvailabilityImpactOk returns a tuple with the AvailabilityImpact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCVSSV2) GetAvailabilityImpactOk() (*string, bool) {
	if o == nil || IsNil(o.AvailabilityImpact) {
		return nil, false
	}
	return o.AvailabilityImpact, true
}

// HasAvailabilityImpact returns a boolean if a field has been set.
func (o *ApiCVSSV2) HasAvailabilityImpact() bool {
	if o != nil && !IsNil(o.AvailabilityImpact) {
		return true
	}

	return false
}

// SetAvailabilityImpact gets a reference to the given string and assigns it to the AvailabilityImpact field.
func (o *ApiCVSSV2) SetAvailabilityImpact(v string) {
	o.AvailabilityImpact = &v
}

// GetBaseScore returns the BaseScore field value if set, zero value otherwise.
func (o *ApiCVSSV2) GetBaseScore() float32 {
	if o == nil || IsNil(o.BaseScore) {
		var ret float32
		return ret
	}
	return *o.BaseScore
}

// GetBaseScoreOk returns a tuple with the BaseScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCVSSV2) GetBaseScoreOk() (*float32, bool) {
	if o == nil || IsNil(o.BaseScore) {
		return nil, false
	}
	return o.BaseScore, true
}

// HasBaseScore returns a boolean if a field has been set.
func (o *ApiCVSSV2) HasBaseScore() bool {
	if o != nil && !IsNil(o.BaseScore) {
		return true
	}

	return false
}

// SetBaseScore gets a reference to the given float32 and assigns it to the BaseScore field.
func (o *ApiCVSSV2) SetBaseScore(v float32) {
	o.BaseScore = &v
}

// GetConfidentialityImpact returns the ConfidentialityImpact field value if set, zero value otherwise.
func (o *ApiCVSSV2) GetConfidentialityImpact() string {
	if o == nil || IsNil(o.ConfidentialityImpact) {
		var ret string
		return ret
	}
	return *o.ConfidentialityImpact
}

// GetConfidentialityImpactOk returns a tuple with the ConfidentialityImpact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCVSSV2) GetConfidentialityImpactOk() (*string, bool) {
	if o == nil || IsNil(o.ConfidentialityImpact) {
		return nil, false
	}
	return o.ConfidentialityImpact, true
}

// HasConfidentialityImpact returns a boolean if a field has been set.
func (o *ApiCVSSV2) HasConfidentialityImpact() bool {
	if o != nil && !IsNil(o.ConfidentialityImpact) {
		return true
	}

	return false
}

// SetConfidentialityImpact gets a reference to the given string and assigns it to the ConfidentialityImpact field.
func (o *ApiCVSSV2) SetConfidentialityImpact(v string) {
	o.ConfidentialityImpact = &v
}

// GetIntegrityImpact returns the IntegrityImpact field value if set, zero value otherwise.
func (o *ApiCVSSV2) GetIntegrityImpact() string {
	if o == nil || IsNil(o.IntegrityImpact) {
		var ret string
		return ret
	}
	return *o.IntegrityImpact
}

// GetIntegrityImpactOk returns a tuple with the IntegrityImpact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCVSSV2) GetIntegrityImpactOk() (*string, bool) {
	if o == nil || IsNil(o.IntegrityImpact) {
		return nil, false
	}
	return o.IntegrityImpact, true
}

// HasIntegrityImpact returns a boolean if a field has been set.
func (o *ApiCVSSV2) HasIntegrityImpact() bool {
	if o != nil && !IsNil(o.IntegrityImpact) {
		return true
	}

	return false
}

// SetIntegrityImpact gets a reference to the given string and assigns it to the IntegrityImpact field.
func (o *ApiCVSSV2) SetIntegrityImpact(v string) {
	o.IntegrityImpact = &v
}

// GetVectorString returns the VectorString field value if set, zero value otherwise.
func (o *ApiCVSSV2) GetVectorString() string {
	if o == nil || IsNil(o.VectorString) {
		var ret string
		return ret
	}
	return *o.VectorString
}

// GetVectorStringOk returns a tuple with the VectorString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCVSSV2) GetVectorStringOk() (*string, bool) {
	if o == nil || IsNil(o.VectorString) {
		return nil, false
	}
	return o.VectorString, true
}

// HasVectorString returns a boolean if a field has been set.
func (o *ApiCVSSV2) HasVectorString() bool {
	if o != nil && !IsNil(o.VectorString) {
		return true
	}

	return false
}

// SetVectorString gets a reference to the given string and assigns it to the VectorString field.
func (o *ApiCVSSV2) SetVectorString(v string) {
	o.VectorString = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ApiCVSSV2) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCVSSV2) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ApiCVSSV2) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ApiCVSSV2) SetVersion(v string) {
	o.Version = &v
}

func (o ApiCVSSV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiCVSSV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessComplexity) {
		toSerialize["accessComplexity"] = o.AccessComplexity
	}
	if !IsNil(o.AccessVector) {
		toSerialize["accessVector"] = o.AccessVector
	}
	if !IsNil(o.Authentication) {
		toSerialize["authentication"] = o.Authentication
	}
	if !IsNil(o.AvailabilityImpact) {
		toSerialize["availabilityImpact"] = o.AvailabilityImpact
	}
	if !IsNil(o.BaseScore) {
		toSerialize["baseScore"] = o.BaseScore
	}
	if !IsNil(o.ConfidentialityImpact) {
		toSerialize["confidentialityImpact"] = o.ConfidentialityImpact
	}
	if !IsNil(o.IntegrityImpact) {
		toSerialize["integrityImpact"] = o.IntegrityImpact
	}
	if !IsNil(o.VectorString) {
		toSerialize["vectorString"] = o.VectorString
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableApiCVSSV2 struct {
	value *ApiCVSSV2
	isSet bool
}

func (v NullableApiCVSSV2) Get() *ApiCVSSV2 {
	return v.value
}

func (v *NullableApiCVSSV2) Set(val *ApiCVSSV2) {
	v.value = val
	v.isSet = true
}

func (v NullableApiCVSSV2) IsSet() bool {
	return v.isSet
}

func (v *NullableApiCVSSV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiCVSSV2(val *ApiCVSSV2) *NullableApiCVSSV2 {
	return &NullableApiCVSSV2{value: val, isSet: true}
}

func (v NullableApiCVSSV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiCVSSV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


