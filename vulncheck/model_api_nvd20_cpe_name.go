/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the ApiNVD20CPEName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiNVD20CPEName{}

// ApiNVD20CPEName struct for ApiNVD20CPEName
type ApiNVD20CPEName struct {
	CpeName *string `json:"cpeName,omitempty"`
	CpeNameId *string `json:"cpeNameId,omitempty"`
}

// NewApiNVD20CPEName instantiates a new ApiNVD20CPEName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiNVD20CPEName() *ApiNVD20CPEName {
	this := ApiNVD20CPEName{}
	return &this
}

// NewApiNVD20CPENameWithDefaults instantiates a new ApiNVD20CPEName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiNVD20CPENameWithDefaults() *ApiNVD20CPEName {
	this := ApiNVD20CPEName{}
	return &this
}

// GetCpeName returns the CpeName field value if set, zero value otherwise.
func (o *ApiNVD20CPEName) GetCpeName() string {
	if o == nil || IsNil(o.CpeName) {
		var ret string
		return ret
	}
	return *o.CpeName
}

// GetCpeNameOk returns a tuple with the CpeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiNVD20CPEName) GetCpeNameOk() (*string, bool) {
	if o == nil || IsNil(o.CpeName) {
		return nil, false
	}
	return o.CpeName, true
}

// HasCpeName returns a boolean if a field has been set.
func (o *ApiNVD20CPEName) HasCpeName() bool {
	if o != nil && !IsNil(o.CpeName) {
		return true
	}

	return false
}

// SetCpeName gets a reference to the given string and assigns it to the CpeName field.
func (o *ApiNVD20CPEName) SetCpeName(v string) {
	o.CpeName = &v
}

// GetCpeNameId returns the CpeNameId field value if set, zero value otherwise.
func (o *ApiNVD20CPEName) GetCpeNameId() string {
	if o == nil || IsNil(o.CpeNameId) {
		var ret string
		return ret
	}
	return *o.CpeNameId
}

// GetCpeNameIdOk returns a tuple with the CpeNameId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiNVD20CPEName) GetCpeNameIdOk() (*string, bool) {
	if o == nil || IsNil(o.CpeNameId) {
		return nil, false
	}
	return o.CpeNameId, true
}

// HasCpeNameId returns a boolean if a field has been set.
func (o *ApiNVD20CPEName) HasCpeNameId() bool {
	if o != nil && !IsNil(o.CpeNameId) {
		return true
	}

	return false
}

// SetCpeNameId gets a reference to the given string and assigns it to the CpeNameId field.
func (o *ApiNVD20CPEName) SetCpeNameId(v string) {
	o.CpeNameId = &v
}

func (o ApiNVD20CPEName) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiNVD20CPEName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CpeName) {
		toSerialize["cpeName"] = o.CpeName
	}
	if !IsNil(o.CpeNameId) {
		toSerialize["cpeNameId"] = o.CpeNameId
	}
	return toSerialize, nil
}

type NullableApiNVD20CPEName struct {
	value *ApiNVD20CPEName
	isSet bool
}

func (v NullableApiNVD20CPEName) Get() *ApiNVD20CPEName {
	return v.value
}

func (v *NullableApiNVD20CPEName) Set(val *ApiNVD20CPEName) {
	v.value = val
	v.isSet = true
}

func (v NullableApiNVD20CPEName) IsSet() bool {
	return v.isSet
}

func (v *NullableApiNVD20CPEName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiNVD20CPEName(val *ApiNVD20CPEName) *NullableApiNVD20CPEName {
	return &NullableApiNVD20CPEName{value: val, isSet: true}
}

func (v NullableApiNVD20CPEName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiNVD20CPEName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


