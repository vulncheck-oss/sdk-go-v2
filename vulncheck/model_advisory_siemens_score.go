/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the AdvisorySiemensScore type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvisorySiemensScore{}

// AdvisorySiemensScore struct for AdvisorySiemensScore
type AdvisorySiemensScore struct {
	CvssV3 *AdvisorySiemensCVSSV3 `json:"cvss_v3,omitempty"`
	Products []string `json:"products,omitempty"`
}

// NewAdvisorySiemensScore instantiates a new AdvisorySiemensScore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvisorySiemensScore() *AdvisorySiemensScore {
	this := AdvisorySiemensScore{}
	return &this
}

// NewAdvisorySiemensScoreWithDefaults instantiates a new AdvisorySiemensScore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvisorySiemensScoreWithDefaults() *AdvisorySiemensScore {
	this := AdvisorySiemensScore{}
	return &this
}

// GetCvssV3 returns the CvssV3 field value if set, zero value otherwise.
func (o *AdvisorySiemensScore) GetCvssV3() AdvisorySiemensCVSSV3 {
	if o == nil || IsNil(o.CvssV3) {
		var ret AdvisorySiemensCVSSV3
		return ret
	}
	return *o.CvssV3
}

// GetCvssV3Ok returns a tuple with the CvssV3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisorySiemensScore) GetCvssV3Ok() (*AdvisorySiemensCVSSV3, bool) {
	if o == nil || IsNil(o.CvssV3) {
		return nil, false
	}
	return o.CvssV3, true
}

// HasCvssV3 returns a boolean if a field has been set.
func (o *AdvisorySiemensScore) HasCvssV3() bool {
	if o != nil && !IsNil(o.CvssV3) {
		return true
	}

	return false
}

// SetCvssV3 gets a reference to the given AdvisorySiemensCVSSV3 and assigns it to the CvssV3 field.
func (o *AdvisorySiemensScore) SetCvssV3(v AdvisorySiemensCVSSV3) {
	o.CvssV3 = &v
}

// GetProducts returns the Products field value if set, zero value otherwise.
func (o *AdvisorySiemensScore) GetProducts() []string {
	if o == nil || IsNil(o.Products) {
		var ret []string
		return ret
	}
	return o.Products
}

// GetProductsOk returns a tuple with the Products field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvisorySiemensScore) GetProductsOk() ([]string, bool) {
	if o == nil || IsNil(o.Products) {
		return nil, false
	}
	return o.Products, true
}

// HasProducts returns a boolean if a field has been set.
func (o *AdvisorySiemensScore) HasProducts() bool {
	if o != nil && !IsNil(o.Products) {
		return true
	}

	return false
}

// SetProducts gets a reference to the given []string and assigns it to the Products field.
func (o *AdvisorySiemensScore) SetProducts(v []string) {
	o.Products = v
}

func (o AdvisorySiemensScore) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvisorySiemensScore) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CvssV3) {
		toSerialize["cvss_v3"] = o.CvssV3
	}
	if !IsNil(o.Products) {
		toSerialize["products"] = o.Products
	}
	return toSerialize, nil
}

type NullableAdvisorySiemensScore struct {
	value *AdvisorySiemensScore
	isSet bool
}

func (v NullableAdvisorySiemensScore) Get() *AdvisorySiemensScore {
	return v.value
}

func (v *NullableAdvisorySiemensScore) Set(val *AdvisorySiemensScore) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvisorySiemensScore) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvisorySiemensScore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvisorySiemensScore(val *AdvisorySiemensScore) *NullableAdvisorySiemensScore {
	return &NullableAdvisorySiemensScore{value: val, isSet: true}
}

func (v NullableAdvisorySiemensScore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvisorySiemensScore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


