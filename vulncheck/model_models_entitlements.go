/*
VulnCheck API

Version 3 of the VulnCheck API

API version: 3.0
Contact: support@vulncheck.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vulncheck

import (
	"encoding/json"
)

// checks if the ModelsEntitlements type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsEntitlements{}

// ModelsEntitlements struct for ModelsEntitlements
type ModelsEntitlements struct {
	// Entitlements provides a map of roles to a list of entitlements
	Entitlements *map[string][]string `json:"entitlements,omitempty"`
}

// NewModelsEntitlements instantiates a new ModelsEntitlements object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsEntitlements() *ModelsEntitlements {
	this := ModelsEntitlements{}
	return &this
}

// NewModelsEntitlementsWithDefaults instantiates a new ModelsEntitlements object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsEntitlementsWithDefaults() *ModelsEntitlements {
	this := ModelsEntitlements{}
	return &this
}

// GetEntitlements returns the Entitlements field value if set, zero value otherwise.
func (o *ModelsEntitlements) GetEntitlements() map[string][]string {
	if o == nil || IsNil(o.Entitlements) {
		var ret map[string][]string
		return ret
	}
	return *o.Entitlements
}

// GetEntitlementsOk returns a tuple with the Entitlements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsEntitlements) GetEntitlementsOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.Entitlements) {
		return nil, false
	}
	return o.Entitlements, true
}

// HasEntitlements returns a boolean if a field has been set.
func (o *ModelsEntitlements) HasEntitlements() bool {
	if o != nil && !IsNil(o.Entitlements) {
		return true
	}

	return false
}

// SetEntitlements gets a reference to the given map[string][]string and assigns it to the Entitlements field.
func (o *ModelsEntitlements) SetEntitlements(v map[string][]string) {
	o.Entitlements = &v
}

func (o ModelsEntitlements) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsEntitlements) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Entitlements) {
		toSerialize["entitlements"] = o.Entitlements
	}
	return toSerialize, nil
}

type NullableModelsEntitlements struct {
	value *ModelsEntitlements
	isSet bool
}

func (v NullableModelsEntitlements) Get() *ModelsEntitlements {
	return v.value
}

func (v *NullableModelsEntitlements) Set(val *ModelsEntitlements) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsEntitlements) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsEntitlements) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsEntitlements(val *ModelsEntitlements) *NullableModelsEntitlements {
	return &NullableModelsEntitlements{value: val, isSet: true}
}

func (v NullableModelsEntitlements) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsEntitlements) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


